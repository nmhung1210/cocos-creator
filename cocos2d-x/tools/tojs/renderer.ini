[renderer]
# the prefix to be added to the generated functions. You might or might not use this in your own
# templates
prefix = renderer

# create a target namespace (in javascript, this would create some code like the equiv. to `ns = ns || {}`)
# all classes will be embedded in that namespace
target_namespace = renderer

macro_judgement  = #if (USE_GFX_RENDERER > 0) && (CC_TARGET_PLATFORM == CC_PLATFORM_ANDROID || CC_TARGET_PLATFORM == CC_PLATFORM_IOS || CC_TARGET_PLATFORM == CC_PLATFORM_MAC || CC_TARGET_PLATFORM == CC_PLATFORM_WIN32)

android_headers = 

android_flags = -target armv7-none-linux-androideabi -D_LIBCPP_DISABLE_VISIBILITY_ANNOTATIONS -DANDROID -D__ANDROID_API__=14 -gcc-toolchain %(gcc_toolchain_dir)s --sysroot=%(androidndkdir)s/platforms/android-14/arch-arm  -idirafter %(androidndkdir)s/sources/android/support/include -idirafter %(androidndkdir)s/sysroot/usr/include -idirafter %(androidndkdir)s/sysroot/usr/include/arm-linux-androideabi -idirafter %(clangllvmdir)s/lib64/clang/5.0/include -I%(androidndkdir)s/sources/cxx-stl/llvm-libc++/include -I%(cocosdir)s/external/android/arm64-v8a/include/v8

clang_headers = 
clang_flags = -nostdinc -x c++ -std=c++11 -fsigned-char -U__SSE__

cocos_headers = -I%(cocosdir)s/cocos/renderer -I%(cocosdir)s/cocos -I%(cocosdir)s/cocos/math -I%(cocosdir)s/cocos/platform/android -I%(cocosdir)s/external/source
cocos_flags = -DANDROID

cxxgenerator_headers =

# extra arguments for clang
extra_arguments = %(android_headers)s %(clang_headers)s %(cxxgenerator_headers)s %(cocos_headers)s %(android_flags)s %(clang_flags)s %(cocos_flags)s %(extra_flags)s

# what headers to parse
headers = %(cocosdir)s/cocos/renderer/renderer/Renderer.h %(cocosdir)s/cocos/renderer/scene/scene-bindings.h

replace_headers = 

# what classes to produce code for. You can use regular expressions here. When testing the regular
# expression, it will be enclosed in "^$", like this: "^Menu*$".

classes = ForwardRenderer BaseRenderer Camera Light Scene View ProgramLib EffectBase Effect NodeProxy Assembler RenderFlow CustomAssembler MaskAssembler RenderDataList AssemblerBase TiledMapAssembler NodeMemPool MemPool EffectVariant AssemblerSprite SimpleSprite2D SlicedSprite2D MeshAssembler SimpleSprite3D SlicedSprite3D Particle3DAssembler

classes_need_extend = Assembler CustomAssembler MaskAssembler AssemblerBase TiledMapAssembler AssemblerSprite SimpleSprite2D SlicedSprite2D MeshAssembler SimpleSprite3D SlicedSprite3D Particle3DAssembler

# what should we skip? in the format ClassName::[function function]
# ClassName is a regular expression, but will be used like this: "^ClassName$" functions are also
# regular expressions, they will not be surrounded by "^$". If you want to skip a whole class, just
# add a single "*" as functions. See bellow for several examples. A special class name is "*", which
# will apply to all class names. This is a convenience wildcard to be able to skip similar named
# functions from all classes.

skip =  RenderFlow::[calculateWorldMatrix insertNodeLevel visit calculateLocalMatrix removeNodeLevel getRenderScene getModelBatcher calculateLevelWorldMatrix getDevice getInstance],
        AssemblerBase::[handle postHandle enableDirty getDirty getUseModel getCustomWorldMatrix setCustomWorldMatrix clearCustomWorldMatirx],
        Assembler::[getIACount updateOpacity isOpacityAlwaysDirty isIgnoreWorldMatrix fillBuffers beforeFillBuffers getVertexFormat getEffect],
        CustomAssembler::[getIACount getIA adjustIA updateIARange getEffect],
        RenderDataList::[getRenderData getMeshCount],
        BaseRenderer::[registerStage],
        Camera::[getColor getRect extractView screenToWorld worldToScreen setNode getNode worldMatrixToScreen],
        Light::[extractView setNode],
        View::[getForward getPosition],
        Scene::[getModel removeModel addModel removeModels],
        Effect::[getPasses init],
        EffectBase::[setProperty],
        EffectVariant::[getHash getPasses],
        NodeProxy::[render updateLocalMatrix updateWorldMatrix getChildren setCullingMask disaleUpdateWorldMatrix getAssembler getChildByName visit setOpacity getRealOpacity getDirty getOpacity enableUpdateWorldMatrix updateRealOpacity getCullingMask getID getParent getChildByID set3DNode setLocalZOrder getName getChildrenCount addChild removeAllChildren getRotation setParent getWorldRT getWorldMatrix getWorldPosition isDirty getScale getPosition removeChild getRenderOrder resetGlobalRenderOrder getWorldRotation],
        MemPool::[getCommonPool getCommonUnit getCommonList],
        NodeMemPool::[getUnit getNodePool getInstance],
        AssemblerSprite::[fillBuffers calculateWorldVertices generateWorldVertices],
        SimpleSprite2D::[generateWorldVertices],
        SlicedSprite2D::[generateWorldVertices],
        SimpleSprite3D::[generateWorldVertices],
        SlicedSprite3D::[generateWorldVertices],
        ProgramLib::[switchProgram getKey getValueFromDefineList]
rename_classes = BaseRenderer::Base,
                 Effect::EffectNative

rename_functions =

# for all class names, should we remove something when registering in the target VM?
remove_prefix =

# classes for which there will be no "parent" lookup
classes_have_no_parents = 

# base classes which will be skipped when their sub-classes found them.
base_classes_to_skip = Ref Clonable

# classes that create no constructor
# Set is special and we will use a hand-written constructor

abstract_classes = EffectBase

persistent_classes = 

classes_owned_by_cpp = 
