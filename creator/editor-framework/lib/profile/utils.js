const e=require("path"),t=require("fs-extra"),r=require("@base/electron-profile");require("lodash/isEqual");function a(e,t){for(let r in t)void 0!==e[r]?i(t[r])&&(i(e[r])||(e[r]={}),arguments.callee(e[r],t[r])):i(t[r])||Array.isArray(t[r])?e[r]=JSON.parse(JSON.stringify(t[r])):e[r]=t[r]}function i(e){return e&&"object"==typeof e&&!Array.isArray(e)}module.exports={url2profile:Object.create(null),setDefaultData(e,t){let a=r.load(e),i=e.startsWith("default://");Object.keys(t).forEach(e=>{void 0===a.get(e)&&a.set(e,t[e]),i||a.save()})},checkMigrate(r,a){let i=e.basename(r),o=e.join(a,i);if(t.existsSync(o)){if(r.startsWith("global://")){const r=e.join(a,"profiles");let s=e.join(r,i);t.existsSync(s)||t.copySync(o,s)}}else;},adaptProfile:e=>(e.getSelfData=function(){return this.get("",{type:"current"})},e.reload=function(){console.warn("'profile.reload' has been deprecated, the all data is up to date")},e.clear=function(){let e=this.getSelfData();Object.keys(e).forEach(e=>{this.remove(e)})},e.mergeData=function(e){let t=this.getSelfData();a(t,e),Object.keys(t).forEach(e=>{this.set(e,t[e])})},e)};