"use strict";const e=require("fire-path"),t=require("fire-fs"),r=require("xcode"),{spawn:o,spawnSync:i}=require("child_process"),s=require("./base");module.exports=class extends s{constructor(o){super(o),-1===process.env.PATH.indexOf("/usr/local/bin")&&(process.env.PATH+=":/usr/local/bin"),process.env.LANG="en_US.UTF-8";let i=Editor.Profile.load("global://settings.json").get("http-proxy");if(Editor.isDarwin&&i&&(process.env=Object.assign(process.env,{http_proxy:i,https_proxy:i})),this.projectPath=e.join(o.dest,`frameworks/runtime-src/proj.ios_mac/${o.projectName}.xcodeproj/project.pbxproj`),!t.existsSync(this.projectPath))return Editor.error("Can't find xcodeproj file at path: ",this.projectPath),void 0;this.project=r.project(this.projectPath),this.project.parseSync()}addFramework(e,t){let r=!0;return this._searchTarget(t)?(this.project.addFramework(e,{customFramework:!0,target:this._searchTarget(t),embed:!0}),this._save()):r=!1,r}addFileToCompileSource(e,t,r){let o=!0,i=this._searchTarget(t),s=this._searchPBXGroup(r);return i&&s?(this.project.addSourceFile(e,{target:i},s),this._save()):o=!1,o}addFileToProject(e,t){let r=!0,o=this._searchPBXGroup(t);return o?this.project.addFile(e,o):r=!1,this._save(),r}checkPodEnvironment(){return!i("pod").error||(Editor.error("Can't find pod command , please install CocoaPods (https://cocoapods.org/)"),!1)}addPodDependenceForTarget(r,o,i){this._createPodFileIfNotExist();let s=e.join(this.options.dest,"frameworks/runtime-src/proj.ios_mac/Podfile"),n=t.readFileSync(s,"utf-8");if(-1===n.indexOf(o)&&(n+=`target '${o}' do\nend`),this.isDependenceExist(r,o,i))Editor.log("CocoaPods:",r,"is already exist,ignore update Podfile");else{let e=new RegExp(`target\\s*'${o}'\\s*do`);n=n.replace(e,e=>{let t=`  pod '${r}'`;return i&&(t+=`,${i}`),e+="\n"+t})}t.writeFileSync(s,n)}isDependenceExist(r,o,i){let s=!1;do{let i=e.join(this.options.dest,"frameworks/runtime-src/proj.ios_mac/Podfile");if(!t.existsSync(i))break;let n=t.readFileSync(i,"utf-8").match(new RegExp(`target\\s*'${o}'\\s*do(\\S|\\s|\\n|\\r|\\r\\n)+?(end)`));if(!n)break;-1!==(n=n[0]).indexOf(r)&&(s=!0)}while(0);return s}executePodFile(){return new Promise((t,r)=>{let i=o("pod",["install"],{cwd:e.join(this.options.dest,"frameworks/runtime-src/proj.ios_mac/")});i.stdout.on("data",e=>{Editor.log("CocoaPods:"+e.toString())}),i.stderr.on("data",e=>{Editor.log("CocoaPods:"+e.toString())}),i.on("error",e=>{r(e.toString()||"exec pod install fail")}),i.on("close",e=>{if(0!==e)return r("exec pod install fail with exit code",e),void 0;t()})})}_createPodFileIfNotExist(){let r=e.join(this.options.dest,"frameworks/runtime-src/proj.ios_mac/Podfile");t.existsSync(r)||this.ensureFile(Editor.url("unpack://editor/core/native-packer/libs/ios/cocoapods/Podfile"),r)}_searchPBXGroup(e){if(!this.project)return;let t=this.project.getPBXObject("PBXGroup"),r=null;for(let o in t){let i=t[o];if("string"==typeof i&&i===e){r=o.split("_")[0];break}}return r}_searchTarget(e){let t=this.project.pbxNativeTargetSection(),r=null;for(let o in t){let i=t[o];if("string"==typeof i&&i===e){r=o.split("_")[0];break}}return r}_save(){t.writeFileSync(this.projectPath,this.project.writeSync())}};