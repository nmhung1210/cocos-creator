"use strict";const{Vec3:t,Quat:i}=cc.math;let e=require("./controller-base"),a=require("../utils/controller-utils"),s=require("../utils/controller-shape");const{gfx:o,setNodeOpacity:r,getModel:c,updateVBAttr:h,create3DNode:n,panPlaneLayer:l,getRaycastResults:d,setMeshColor:_}=require("../../../utils/engine"),u=require("../../../utils"),p=require("../../../utils/external"),D=p.NodeUtils,x=p.EditorMath,N=p.EditorCamera;let v=cc.quat();module.exports=class extends e{constructor(t){super(t),this._deltaRotation=cc.quat(0,0,0,1),this._rotFactor=1,this._zDeltaAngle=0,this.initShape()}createRotationShape(t,i,e,s,o,c){let h=this._baseRadius,l=this._tubeRadius,d=n(t+"Rotation");d.parent=this.shape;let _=a.torus(h,l,{arc:Math.abs(o)},c);_.name=t+"RotationTorus",_.parent=d,r(_,0),D.setEulerAngles(_,i);let u=a.arrow(25,10,140,c);u.name=t+"Axis",u.parent=d,D.setEulerAngles(u,e);let p=a.arc(cc.v3(),this._axisDir[t],s,o,h,c,{noDepthTestForLines:!0});p.parent=d,p.name=t+"RotationArc",(p=a.arc(cc.v3(),this._axisDir[t],s,this._twoPI,h,c,{noDepthTestForLines:!0})).parent=d,p.active=!1,p.name=t+"IndicatorCircle",this.initAxis(d,t)}initShape(){this.createShapeNode("RotationController"),this.registerSizeChangeEvents(),this._baseRadius=100,this._tubeRadius=3,this.createRotationShape("x",cc.v3(0,0,90),cc.v3(-90,-90,0),this._axisDir.z,-this._twoPI,cc.Color.RED),this.createRotationShape("y",cc.v3(0,0,0),cc.v3(0,0,0),this._axisDir.z,this._twoPI,cc.Color.GREEN),this.createRotationShape("z",cc.v3(-90,0,0),cc.v3(90,0,90),this._axisDir.x,this._twoPI,cc.Color.BLUE),this._axisDir.w=cc.v3(0,0,1),this.createRotationShape("w",cc.v3(-90,0,0),cc.v3(0,0,-90),this._axisDir.x,this._twoPI,cc.Color.BLUE);let i=N._camera.node.getWorldRotation(v),e=cc.v3();t.transformQuat(e,cc.v3(0,0,1),i);let s=a.circle(cc.v3(),e,this._baseRadius,cc.Color.GRAY);s.name="circleBorder",s.parent=this._rootNode,r(s,200),this._circleBorderNode=s,this._circleBorderMR=c(s),this._circleBorderNode.setWorldPosition(this._position);let o=a.quad(2*this._baseRadius,2*this._baseRadius);r(o,0),o.parent=this._rootNode,o.layer=l,this._cutoffNode=o,this._cutoffMR=c(o);let h={};h.sectorNode=a.sector(cc.v3(),cc.v3(0,1,0),cc.v3(1,0,0),Math.PI,this._baseRadius,a.YELLOW,{unlit:!0}),r(h.sectorNode,200),h.sectorNode.parent=this._rootNode,h.sectorNode.active=!1,h.meshRenderer=c(h.sectorNode),this._indicator=h,this.shape.active=!1}onInitAxis(t,i){let e=this._axisDataMap[i];e.normalTorusNode=t.getChildByName(i+"RotationArc"),e.indicatorCircle=t.getChildByName(i+"IndicatorCircle"),e.arrowNode=t.getChildByName(i+"Axis"),e.arrowNode.active=!1,e.normalTorusMR=c(e.normalTorusNode)}isHitOnAxisArrow(t,i){let e=this._axisDataMap[i].arrowNode;for(let i=0;i<e.childrenCount;i++)if(t===e._children[i])return!0;return!1}isInCutoffBack(t,i,e){let a=this._axisDataMap[t].normalTorusNode,s=d(this._cutoffNode,i,e);if(s.length>0){let t=s[0].distance;if((s=d(a,i,e)).length>0&&s[0].distance>t)return!0}return!1}onMouseDown(e){if(!this.is2D&&this.isInCutoffBack(e.axisName,e.x,e.y))return;this._mouseDownRot=i.clone(this._rotation),this._mouseDeltaPos=cc.v2(0,0);let a=e.hitPoint,s=t.clone(this._axisDir[e.axisName]),o=cc.v3(),r=cc.v3();this._indicatorStartDir=cc.v3(),this.is2D?(this.isHitOnAxisArrow(e.node,e.axisName)?t.transformQuat(o,cc.v3(1,0,0),this._rotation):t.sub(o,a,this._position),t.transformQuat(this._indicatorStartDir,cc.v3(1,0,0),this._rotation),this._zDeltaAngle=0):(t.sub(o,a,this._position),this._indicatorStartDir=o),t.normalize(o,o),t.transformQuat(s,s,this._rotation),t.cross(r,o,s),t.cross(o,s,r),this._rotateAlignDir=r,this._transformAxisDir=s,this.updateRotationIndicator(this._transformAxisDir,this._indicatorStartDir,0),this._indicator.sectorNode.active=!0,this._axisDataMap[e.axisName].indicatorCircle.active=!0,this._circleBorderNode.active=!1,Object.keys(this._axisDataMap).forEach(t=>{t===e.axisName?(this._axisDataMap[t].normalTorusNode.active=!1,this._axisDataMap[t].arrowNode.active=!0):this._axisDataMap[t].topNode.active=!1}),u.requestPointerLock(),null!=this.onControllerMouseDown&&this.onControllerMouseDown()}onMouseMove(t){let e,a=x.clamp(t.moveDeltaX,-10,10),s=x.clamp(t.moveDeltaY,-10,10);if(this._mouseDeltaPos.x+=a,this._mouseDeltaPos.y+=s,i.identity(this._deltaRotation),1===t.axisName.length){let a=this.getAlignAxisMoveDistance(this._rotateAlignDir,this._mouseDeltaPos);e=-a/this._rotFactor*this._degreeToRadianFactor,i.fromAxisAngle(this._deltaRotation,this._axisDir[t.axisName],e),this.is2D&&(this._zDeltaAngle=-a/this._rotFactor)}this.updateRotationIndicator(this._transformAxisDir,this._indicatorStartDir,e),i.mul(this._rotation,this._mouseDownRot,this._deltaRotation),null!=this.onControllerMouseMove&&this.onControllerMouseMove(t),this.updateController()}onMouseUp(){u.exitPointerLock(),this._indicator.sectorNode.active=!1,this._deltaRotation=cc.quat(0,0,0,1),this._circleBorderNode.active=!0,this.is2D?(this._axisDataMap.w.indicatorCircle.active=!1,this._axisDataMap.w.normalTorusNode.active=!0,this._axisDataMap.w.topNode.active=!0):Object.keys(this._axisDataMap).forEach(t=>{"w"!==t&&(this._axisDataMap[t].normalTorusNode.active=!0,this._axisDataMap[t].topNode.active=!0,this._axisDataMap[t].indicatorCircle.active=!1,this._axisDataMap[t].arrowNode.active=!1)}),null!=this.onControllerMouseUp&&this.onControllerMouseUp()}onMouseLeave(){this.onMouseUp()}onHoverIn(t){!this.is2D&&this.isInCutoffBack(t.axisName,t.x,t.y)||(this.setAxisColor(t.axisName,a.YELLOW),Object.keys(this._axisDataMap).forEach(i=>{i!==t.axisName&&this.setNodesOpacity(this._axisDataMap[i].rendererNodes,50)}))}onHoverOut(){this.resetAxisColor(),Object.keys(this._axisDataMap).forEach(t=>{this.setNodesOpacity(this._axisDataMap[t].rendererNodes,255)})}setNodesOpacity(t,i){t.forEach(t=>{r(t,i)})}getDeltaRotation(){return this._deltaRotation}getZDeltaAngle(){return this._zDeltaAngle}onShow(){this.is2D?(this._axisDataMap.x.topNode.active=!1,this._axisDataMap.y.topNode.active=!1,this._axisDataMap.z.topNode.active=!1,this._axisDataMap.w.topNode.active=!0,this._axisDataMap.w.arrowNode.active=!0,this._circleBorderNode.active=!1,this._cutoffNode.active=!1,this.updateController()):(this._axisDataMap.x.topNode.active=!0,this._axisDataMap.y.topNode.active=!0,this._axisDataMap.z.topNode.active=!0,this._axisDataMap.w.topNode.active=!1,this._axisDataMap.w.arrowNode.active=!1,this._circleBorderNode.active=!0,this._cutoffNode.active=!0)}onHide(){this._circleBorderNode.active=!1,this._cutoffNode.active=!1}updateRotationIndicator(t,i,e){let a=s.calcSectorPoints(this._position,t,i,e,this._baseRadius*this.getDistScalar(),60);h(this._indicator.meshRenderer.mesh,o.ATTR_POSITION,a)}adjustControllerSize(){let i=this.getDistScalar(),e=this._scale.mul(i);this.shape.setScale(e),this._circleBorderNode.setScale(e),this._circleBorderNode.setWorldPosition(this._position);let a=N._camera.node.getWorldRotation(v),r=cc.v3();t.transformQuat(r,cc.v3(0,0,1),a);let c=s.calcCirclePoints(cc.v3(),r,this._baseRadius);h(this._circleBorderMR.mesh,o.ATTR_POSITION,c),this._cutoffNode.setScale(e),this._cutoffNode.setWorldPosition(this._position),this._cutoffNode.setWorldRotation(a);let n=cc.v3(),l=cc.mat4();this.shape.getWorldMatrix(l),cc.Mat4.invert(l,l),t.transformMat4Normal(n,r,l),this.is2D||Object.keys(this._axisDataMap).forEach(i=>{if("w"!==i){let e=cc.v3(),a=this._axisDir[i];t.cross(e,a,n),t.normalize(e,e),c=s.calcArcPoints(cc.v3(),a,e,-Math.PI,this._baseRadius);let r=this._axisDataMap[i];h(r.normalTorusMR.mesh,o.ATTR_POSITION,c)}})}};