const e=require("fire-path"),t=require("util");require("async");cc.EffectAsset.prototype.onLoad=function(){let e=cc.renderer._forward._programLib;for(let t=0;t<this.shaders.length;t++){let s=this.shaders[t];delete e._templates[s.name],e._cache={},e.define(s)}cc.assetManager.builtins.getBuiltin("effect").add(this.name,this),_Scene.MaterialUtils.onEffectReload(this)},module.exports={assetChanged(e){"effect"===e.type&&cc.assetManager.loadAny(e.uuid,e=>{if(e)return Editor.error(e);clearTimeout(this._softReloadTimerID),this._softReloadTimerID=setTimeout(()=>{console.log("scene:soft-reload"),Editor.Ipc.sendToWins("scene:soft-reload",!0)},250)})},async assetsCreated(e){let s=!1,a=t.promisify(cc.assetManager.loadAny.bind(cc.assetManager));await Promise.all(e.map(async e=>{if("effect"===e.type)return s=!0,a(e.uuid)})),s&&Editor.Ipc.sendToWins("scene:soft-reload",!0)},assetsMoved(t){let s=cc.assetManager.builtins.getBuiltin("effect"),a=!1;t.forEach(t=>{if(".effect"!==e.extname(t.destPath))return;a=!0;let r=e.basenameNoExt(t.srcPath),o=s.get(r);s.remove(r),r=e.basenameNoExt(t.destPath),s.add(r,o)}),a&&Editor.Ipc.sendToWins("scene:soft-reload",!0)},assetsDeleted(t){let s=!1;t.forEach(t=>{if(".effect"!==e.extname(t.path))return;s=!0;let a=e.basenameNoExt(t.path);cc.assetManager.builtins.getBuiltin("effect").remove(a)}),s&&Editor.Ipc.sendToWins("scene:soft-reload",!0)}};