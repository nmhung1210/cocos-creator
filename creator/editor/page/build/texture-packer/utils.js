const e=require("fire-path"),t=require("fire-fs"),r=require("lodash"),a=require("globby"),i=require("del"),s=require("./packer"),n=Editor.require("app://editor/page/build/texture-compress");async function o(a,i,s){let n=e.join(a,"info.json"),o={};t.existsSync(n)&&(o=t.readJSONSync(n))&&o.projectPath!==Editor.remote.Project.path&&(o={});let u={projectPath:Editor.remote.Project.path,mtimes:{}},m=[i.meta.uuid];return s.forEach(e=>{m.push(e._uuid),m.push(e.getTexture()._uuid)}),m=r.uniq(m),await Promise.all(m.map(async e=>{let t=await new Promise((t,r)=>{Editor.assetdb.queryMetaInfoByUuid(e,(e,a)=>{if(e)return r(e);t({assetMtime:a.assetMtime,metaMtime:a.metaMtime})})});u.mtimes[e]=t})),{storedPacInfoPath:n,newStoredPacInfo:u,storedPacInfo:o}}exports.queryAtlases=async function(i){let s={textureUuids:[],spriteFrames:[],pacInfos:[],texture2pac:{}};return i=Array.isArray(i)?i:[i],await Promise.all(i.map(async i=>{let n=await(new class{async init(i){let s,n=i.path,o=n+".meta",u=t.readJSONSync(o),m=e.dirname(i.url)+"/**/*",l=await new Promise((e,t)=>{Editor.assetdb.queryAssets(m,["sprite-frame"],(r,a)=>{if(r)return t(r);e(a)})}),c=e.dirname(n),p=[e.join(c,"**/*.pac"),"!"+e.join(c,"*.pac")],d=await new Promise((t,r)=>{a(p,(a,i)=>{if(a)return r(a);t(i.map(t=>e.dirname(t)))})});0===(l=l.filter(t=>{for(let r=0;r<d.length;r++)if(e.contains(d[r],t.path))return!1;return!0})).length?(s=[],Editor.warn(`No SpriteFrame find in folder [${e.dirname(i.url)}]. Please check the AutoAtlas [${n}].`)):(s=await Promise.all(l.map(async e=>new Promise((t,r)=>{cc.assetManager.loadAny(e.uuid,(e,a)=>{if(e)return r(e);a.pacInfo=this,t(a)})}))),s=r.sortBy(s,"_uuid"));let f=Editor.url("db://assets");return this.meta=u,this.info=i,this.spriteFrames=s,this.relativePath=e.relative(f,n),this.relativeDir=e.relative(f,e.dirname(n)),this}}).init(i);n.spriteFrames.forEach(e=>{let t=e.getTexture()._uuid;s.textureUuids.push(t),s.texture2pac[t]=n}),s.spriteFrames=s.spriteFrames.concat(n.spriteFrames),s.pacInfos.push(n)})),s.textureUuids=r.uniq(s.textureUuids),s.spriteFrames=r.uniq(s.spriteFrames),s},exports.pack=async function(a){let{pacInfos:u,buildAssets:m,dest:l,needCompress:c,platform:p,actualPlatform:d}=a,f=[];for(let a=0;a<u.length;a++){let m,h=u[a],P=h.meta,y=cc.js.mixin({name:e.basenameNoExt(h.info.path),width:P.maxWidth,height:P.maxHeight},P),w=e.join(l,h.relativePath),g=h.spriteFrames,{storedPacInfoPath:x,newStoredPacInfo:E,storedPacInfo:q}=await o(w,h,g);!r.isEqual(E.mtimes,q.mtimes)?(i.sync(w,{force:!0}),m=await new Promise((e,t)=>{s(g,y,(r,a)=>{if(r)return t(r);e(a)})}),await Promise.all(m.atlases.map(async r=>{let a=e.join(w,r.name+".png");return t.ensureDirSync(e.dirname(a)),r.imagePath=a,new Promise((e,t)=>{r.sharp.toFile(a,r=>{if(r)return t(r);e()})})})),global.gc&&global.gc(),c&&await Promise.all(m.atlases.map(async r=>{let a=e.join(w,"compressed",r.name+".png");t.ensureDirSync(e.dirname(a));let i=await new Promise((e,t)=>{n({src:r.imagePath,dst:a,platform:p,actualPlatform:d,compressOption:h.meta.platformSettings},(r,a)=>{if(r)return t(r);e(a)})});0===i.length&&(i=[".png"]),r.compressd={suffix:i,imagePathNoExt:e.join(e.dirname(a),e.basenameNoExt(a))}})),E.result=m,t.ensureDirSync(w),t.writeFileSync(x,JSON.stringify(E,null,2))):(m=q.result).atlases.forEach(e=>{e.files.forEach(e=>{e.spriteFrame=g.find(t=>t._uuid===e.uuid)})}),m.pacInfo=h,f.push(m)}return f};