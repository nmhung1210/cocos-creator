"use strict";const t=require("fire-fs"),e=require("fire-path"),a=require("plist");Vue.component("cc-particle-system",{dependencies:["packages://inspector/share/blend.js"],template:'\n    <ui-prop\n      v-prop="target.preview"\n      :multi-values="multi"\n    ></ui-prop>\n    <ui-prop\n      v-prop="target.playOnLoad"\n      :multi-values="multi"\n      tooltip="{{T(\'COMPONENT.particle_system.playOnLoad\')}}"\n    ></ui-prop>\n    <ui-prop\n      v-prop="target.autoRemoveOnFinish"\n      :multi-values="multi"\n    ></ui-prop>\n    <ui-prop\n      v-prop="target.file"\n      :multi-values="multi"\n    ></ui-prop>\n\n    <ui-prop name="Custom" tooltip="{{T(\'COMPONENT.particle_system.custom\')}}">\n        <ui-checkbox class="flex-1"\n          v-value="target.custom.value"\n          v-values="target.custom.values"\n          :multi-values="_checkCustomMulti(target.custom, multi)"\n          @change="onCustomChange"\n        >\n        </ui-checkbox>\n        <ui-button v-show="target.custom.value && target.file.value.uuid"\n          :title="T(\'COMPONENT.particle.sync_tips\')"\n          v-disabled="multi"\n          @confirm="applyPlistData"\n        >\n          {{T(\'COMPONENT.particle.sync\')}}\n        </ui-button>\n        <ui-button v-show="target.custom.value"\n          :title="T(\'COMPONENT.particle.export_title\')"\n          v-disabled="multi"\n          @confirm="saveCustomData"\n        >\n          {{T(\'COMPONENT.particle.export\')}}\n        </ui-button>\n    </ui-prop>\n\n    <template v-if="_checkCustomShow(target.custom, multi)">\n      <ui-prop\n        v-prop="target.spriteFrame"\n        :multi-values="multi"\n        tooltip="{{T(\'COMPONENT.particle_system.spriteFrame\')}}"\n      ></ui-prop>\n      <ui-prop\n        v-prop="target.duration"\n        :multi-values="multi"\n        tooltip="{{T(\'COMPONENT.particle_system.duration\')}}"\n      ></ui-prop>\n      <ui-prop\n        v-prop="target.emissionRate"\n        :multi-values="multi"\n        tooltip="{{T(\'COMPONENT.particle_system.emissionRate\')}}"\n      ></ui-prop>\n      <ui-prop\n        :name="target.life.name"\n        tooltip="{{T(\'COMPONENT.particle_system.life\')}}"\n      >\n        <ui-num-input class="flex-1"\n          v-value="target.life.value"\n          v-values="target.life.values"\n          :multi-values="_updateMultiValues(target.life, multi)"\n        ></ui-num-input>\n        <ui-num-input class="flex-1"\n          v-value="target.lifeVar.value"\n          v-values="target.lifeVar.values"\n          :multi-values="_updateMultiValues(target.lifeVar, multi)"\n        ></ui-num-input>\n      </ui-prop>\n      <ui-prop\n        v-prop="target.totalParticles"\n        :multi-values="multi"\n        tooltip="{{T(\'COMPONENT.particle_system.totalParticles\')}}"\n      ></ui-prop>\n      <ui-prop\n        v-prop="target.startColor"\n        :multi-values="multi"\n        tooltip="{{T(\'COMPONENT.particle_system.startColor\')}}"\n      ></ui-prop>\n      <ui-prop indent=1\n        v-prop="target.startColorVar"\n        :multi-values="multi"\n        tooltip="{{T(\'COMPONENT.particle_system.startColorVar\')}}"\n      ></ui-prop>\n      <ui-prop\n        v-prop="target.endColor"\n        :multi-values="multi"\n        tooltip="{{T(\'COMPONENT.particle_system.endColor\')}}"\n      ></ui-prop>\n      <ui-prop indent=1\n        v-prop="target.endColorVar"\n        :multi-values="multi"\n        tooltip="{{T(\'COMPONENT.particle_system.endColorVar\')}}"\n      ></ui-prop>\n\n      <ui-prop\n        :name="target.angle.name"\n        tooltip="{{T(\'COMPONENT.particle_system.angle\')}}"\n      >\n        <ui-num-input class="flex-1"\n          v-value="target.angle.value"\n          v-values="target.angle.values"\n          :multi-values="_updateMultiValues(target.angle, multi)"\n        ></ui-num-input>\n        <ui-num-input class="flex-1"\n          v-value="target.angleVar.value"\n          v-values="target.angleVar.values"\n          :multi-values="_updateMultiValues(target.angleVar, multi)"\n        ></ui-num-input>\n      </ui-prop>\n\n      <ui-prop\n        :name="target.startSize.name"\n        tooltip="{{T(\'COMPONENT.particle_system.startSize\')}}"\n      >\n        <ui-num-input class="flex-1"\n          v-value="target.startSize.value"\n          v-values="target.startSize.values"\n          :multi-values="_updateMultiValues(target.startSize, multi)"\n        ></ui-num-input>\n        <ui-num-input class="flex-1"\n          v-value="target.startSizeVar.value"\n          v-values="target.startSizeVar.values"\n          :multi-values="_updateMultiValues(target.startSizeVar, multi)"\n        ></ui-num-input>\n      </ui-prop>\n\n      <ui-prop :name="target.endSize.name" tooltip="{{T(\'COMPONENT.particle_system.endSize\')}}">\n        <ui-num-input class="flex-1"\n          v-value="target.endSize.value"\n          v-values="target.endSize.values"\n          :multi-values="_updateMultiValues(target.endSize, multi)"\n        ></ui-num-input>\n        <ui-num-input class="flex-1"\n          v-value="target.endSizeVar.value"\n          v-values="target.endSizeVar.values"\n          :multi-values="_updateMultiValues(target.endSizeVar, multi)"\n        ></ui-num-input>\n      </ui-prop>\n\n      <ui-prop :name="target.startSpin.name" tooltip="{{T(\'COMPONENT.particle_system.startSpin\')}}">\n        <ui-num-input class="flex-1"\n          v-value="target.startSpin.value"\n          v-values="target.startSpin.values"\n          :multi-values="_updateMultiValues(target.startSpin, multi)"\n        ></ui-num-input>\n        <ui-num-input class="flex-1"\n          v-value="target.startSpinVar.value"\n          v-values="target.startSpinVar.values"\n          :multi-values="_updateMultiValues(target.startSpinVar, multi)"\n        ></ui-num-input>\n      </ui-prop>\n\n      <ui-prop :name="target.endSpin.name" tooltip="{{T(\'COMPONENT.particle_system.endSpin\')}}">\n        <ui-num-input class="flex-1"\n          v-value="target.endSpin.value"\n          v-values="target.endSpin.values"\n          :multi-values="_updateMultiValues(target.endSpin, multi)"\n        ></ui-num-input>\n        <ui-num-input class="flex-1"\n          v-value="target.endSpinVar.value"\n          v-values="target.endSpinVar.values"\n          :multi-values="_updateMultiValues(target.endSpinVar, multi)"\n        ></ui-num-input>\n      </ui-prop>\n\n      <ui-prop\n        v-prop="target.posVar"\n        :multi-values="multi"\n        tooltip="{{T(\'COMPONENT.particle_system.posVar\')}}"\n      ></ui-prop>\n\n      <ui-prop\n        v-prop="target.positionType"\n        :multi-values="multi"\n        tooltip="{{T(\'COMPONENT.particle_system.positionType\')}}"\n      ></ui-prop>\n      <ui-prop\n        v-prop="target.emitterMode"\n        :multi-values="multi"\n        tooltip="{{T(\'COMPONENT.particle_system.emitterMode\')}}"\n      ></ui-prop>\n\n      <div v-if="isGravityMode(target.emitterMode, multi)">\n        <ui-prop indent=1\n          v-prop="target.gravity"\n          tooltip="{{T(\'COMPONENT.particle_system.gravity\')}}"\n        ></ui-prop>\n\n        <ui-prop indent=1\n          :name="target.speed.name"\n          tooltip="{{T(\'COMPONENT.particle_system.speed\')}}"\n        >\n          <ui-num-input class="flex-1"\n            v-value="target.speed.value"\n            v-values="target.speed.values"\n            :multi-values="_updateMultiValues(target.speed, multi)"\n          ></ui-num-input>\n          <ui-num-input class="flex-1"\n            v-value="target.speedVar.value"\n            v-values="target.speedVar.values"\n            :multi-values="_updateMultiValues(target.speedVar, multi)"\n          ></ui-num-input>\n        </ui-prop>\n\n        <ui-prop indent=1\n          :name="target.tangentialAccel.name"\n          tooltip="{{T(\'COMPONENT.particle_system.tangentialAccel\')}}"\n        >\n          <ui-num-input class="flex-1"\n            v-value="target.tangentialAccel.value"\n            v-values="target.tangentialAccel.values"\n            :multi-values="_updateMultiValues(target.tangentialAccel, multi)"\n          ></ui-num-input>\n          <ui-num-input class="flex-1"\n            v-value="target.tangentialAccelVar.value"\n            v-values="target.tangentialAccelVar.values"\n            :multi-values="_updateMultiValues(target.tangentialAccelVar, multi)"\n          ></ui-num-input>\n        </ui-prop>\n\n        <ui-prop indent=1\n          :name="target.radialAccel.name"\n          tooltip="{{T(\'COMPONENT.particle_system.radialAccel\')}}"\n        >\n          <ui-num-input class="flex-1"\n            v-value="target.radialAccel.value"\n            v-values="target.radialAccel.values"\n            :multi-values="_updateMultiValues(target.radialAccel, multi)"\n          ></ui-num-input>\n          <ui-num-input class="flex-1"\n            v-value="target.radialAccelVar.value"\n            v-values="target.radialAccelVar.values"\n            :multi-values="_updateMultiValues(target.radialAccelVar, multi)"\n          ></ui-num-input>\n        </ui-prop>\n\n        <ui-prop indent=1\n          v-prop="target.rotationIsDir"\n          :multi-values="multi"\n          tooltip="{{T(\'COMPONENT.particle_system.rotationIsDir\')}}"\n        ></ui-prop>\n      </div>\n      <div v-if="isRadiusMode(target.emitterMode, multi)">\n        <ui-prop indent=1\n          :name="target.startRadius.name"\n          tooltip="{{T(\'COMPONENT.particle_system.startRadius\')}}"\n        >\n          <ui-num-input class="flex-1"\n            v-value="target.startRadius.value"\n            v-values="target.startRadius.values"\n            :multi-values="_updateMultiValues(target.startRadius, multi)"\n          ></ui-num-input>\n          <ui-num-input class="flex-1"\n            v-value="target.startRadiusVar.value"\n            v-values="target.startRadiusVar.values"\n            :multi-values="_updateMultiValues(target.startRadiusVar, multi)"\n          ></ui-num-input>\n        </ui-prop>\n\n        <ui-prop indent=1\n          :name="target.endRadius.name"\n          tooltip="{{T(\'COMPONENT.particle_system.endRadius\')}}"\n        >\n          <ui-num-input class="flex-1"\n            v-value="target.endRadius.value"\n            v-values="target.endRadius.values"\n            :multi-values="_updateMultiValues(target.ednRadius, multi)"\n          ></ui-num-input>\n          <ui-num-input class="flex-1"\n            v-value="target.endRadiusVar.value"\n            v-values="target.endRadiusVar.values"\n            :multi-values="_updateMultiValues(target.endRadiusVar, multi)"\n          ></ui-num-input>\n        </ui-prop>\n\n        <ui-prop indent=1\n          :name="target.rotatePerS.name"\n          tooltip="{{T(\'COMPONENT.particle_system.rotatePerS\')}}"\n        >\n          <ui-num-input class="flex-1"\n            v-value="target.rotatePerS.value"\n            v-values="target.rotatePerS.values"\n            :multi-values="_updateMultiValues(target.rotatePerS, multi)"\n          ></ui-num-input>\n          <ui-num-input class="flex-1"\n            v-value="target.rotatePerSVar.value"\n            v-values="target.rotatePerSVar.values"\n            :multi-values="_updateMultiValues(target.rotatePerSVar, multi)"\n          ></ui-num-input>\n        </ui-prop>\n      </div>\n\n      <cc-blend-section :target.sync="target"></cc-blend-section>\n    </template>\n  ',props:{target:{twoWay:!0,type:Object},multi:{type:Boolean}},methods:{T:Editor.T,isGravityMode:(t,e)=>e?t.values.every(t=>0===t):0===t.value,isRadiusMode:(t,e)=>e?t.values.every(t=>1===t):1===t.value,onCustomChange(t){Editor.Ipc.sendToPanel("scene","scene:set-property",{id:this.target.uuid.value,path:"spriteFrame",type:"cc.SpriteFrame",value:{uuid:this.target.spriteFrame.value.uuid},isSubProp:!1})},saveCustomData(){Editor.Ipc.sendToPanel("scene","scene:export-particle-plist",this.target.uuid.value)},applyPlistData(){let e=this.target;e.custom.value&&cc.assetManager.loadAny(e.file.value.uuid,(n,i)=>{if(n)return Editor.error(n),void 0;try{let n=a.parse(t.readFileSync(i.nativeUrl,"utf8"));this._applyPlistData(n,e.uuid.value)}catch(t){Editor.error(t)}})},_applyPlistData(t,a){let n={};n.totalParticles=t.maxParticles,n.angle=t.angle,n.angleVar=t.angleVariance,n.duration=t.duration,n.srcBlendFactor=t.blendFuncSource,n.dstBlendFactor=t.blendFuncDestination;let i,u=255*t.startColorRed,l=255*t.startColorGreen,r=255*t.startColorBlue,s=255*t.startColorAlpha;if(n.startColor=new cc.Color(u,l,r,s),u=255*t.startColorVarianceRed,l=255*t.startColorVarianceGreen,r=255*t.startColorVarianceBlue,s=255*t.startColorVarianceAlpha,n.startColorVar=new cc.Color(u,l,r,s),u=255*t.finishColorRed,l=255*t.finishColorGreen,r=255*t.finishColorBlue,s=255*t.finishColorAlpha,n.endColor=new cc.Color(u,l,r,s),u=255*t.finishColorVarianceRed,l=255*t.finishColorVarianceGreen,r=255*t.finishColorVarianceBlue,s=255*t.finishColorVarianceAlpha,n.endColorVar=new cc.Color(u,l,r,s),n.startSize=t.startParticleSize,n.startSizeVar=t.startParticleSizeVariance,n.endSize=t.finishParticleSize,n.endSizeVar=t.finishParticleSizeVariance,n.posVar={x:t.sourcePositionVariancex,y:t.sourcePositionVariancey},n.startSpin=t.rotationStart,n.startSpinVar=t.rotationStartVariance,n.endSpin=t.rotationEnd,n.endSpinVar=t.rotationEndVariance,n.emitterMode=t.emitterType,n.gravity={x:t.gravityx,y:t.gravityy},n.speed=t.speed,n.speedVar=t.speedVariance,n.radialAccel=t.radialAcceleration,n.radialAccelVar=t.radialAccelVariance,n.tangentialAccel=t.tangentialAcceleration,n.tangentialAccelVar=t.tangentialAccelVariance,n.startRadius=t.maxRadius,n.startRadiusVar=t.maxRadiusVariance,n.endRadius=t.minRadius,n.endRadiusVar=t.minRadiusVariance,n.rotatePerS=t.rotatePerSecond,n.rotatePerSVar=t.rotatePerSecondVariance,n.rotationIsDir=t.rotationIsDir,n.life=t.particleLifespan,n.lifeVar=t.particleLifespanVariance,t.emissionRate?n.emissionRate=t.emissionRate:n.emissionRate=Math.min(n.totalParticles/n.life,Number.MAX_VALUE),t.spriteFrameUuid)i=t.spriteFrameUuid;else if(t.textureFileName){let a=this.target.file.value.uuid,n=Editor.assetdb.remote.uuidToFspath(a),u=e.parse(t.textureFileName),l=e.join(e.dirname(n),u.name);e.extname(l)||(l+=".png");let r=e.join(l,u.name);(i=Editor.assetdb.remote.fspathToUuid(r))||Editor.warn('Apply Plist Data Warn: Can not find texture "%s"',l)}i&&Editor.Ipc.sendToPanel("scene","scene:set-property",{id:a,path:"spriteFrame",type:"cc.SpriteFrame",value:{uuid:i},isSubProp:!1}),Editor.Ipc.sendToPanel("scene","scene:set-property",{id:this.target.uuid.value,path:"",type:"cc.ParticleSystem",value:n,isSubProp:!1})},_checkCustomMulti:(t,e)=>!!e&&!t.values.every(t=>!!t),_checkCustomShow:(t,e)=>e?t.values.every(t=>!!t):!!t.value,_updateMultiValues(t,e){if(!e)return!1;var a=t.values,n=a[0];return!a.every(t=>t===n)}}});