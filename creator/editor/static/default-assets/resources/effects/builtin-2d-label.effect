// Copyright (c) 2017-2018 Xiamen Yaji Software Co., Ltd.  

CCEffect %{
  techniques:
  - passes:
    - vert: vs
      frag: fs
      blendState:
        targets:
        - blend: true
      rasterizerState:
        cullMode: none
      properties:
        texture: { value: white }
        alphaThreshold: { value: 0.5 }
        outlineSize: {value: 0.0}
        outlineColor: {value: [1,1,1,1]}
}%


CCProgram vs %{
  precision highp float;

  #include <cc-global>
  #include <cc-local>

  in vec3 a_position;
  in vec4 a_color;
  out vec4 v_color;

  #if USE_TEXTURE
  in vec2 a_uv0;
  out vec2 v_uv0;
  #endif

  void main () {
    vec4 pos = vec4(a_position, 1);

    #if CC_USE_MODEL
    pos = cc_matViewProj * cc_matWorld * pos;
    #else
    pos = cc_matViewProj * pos;
    #endif

    #if USE_TEXTURE
    v_uv0 = a_uv0;
    #endif

    v_color = a_color;

    gl_Position = pos;
  }
}%


CCProgram fs %{
  #if CC_SUPPORT_standard_derivatives
    #extension GL_OES_standard_derivatives : enable
  #endif

  precision highp float;
  
  #include <alpha-test>

  in vec4 v_color;

  #if USE_TEXTURE
  in vec2 v_uv0;
  uniform sampler2D texture;
  #endif
  
  #if USE_SDF
  uniform Outline {
    vec4 outlineColor;
    float outlineSize;
  };
  #endif


  void main () {
  #if USE_SDF
    #if USE_TEXTURE_ALPHAONLY
      float dist = texture(texture, v_uv0).a;
    #else
      float dist = texture(texture, v_uv0).r;
    #endif

    #if USE_SDF_EXTEND
      const float EDGE_VALUE = 0.45;
    #else
      const float EDGE_VALUE = 0.5;
    #endif

    #if CC_SUPPORT_standard_derivatives
      float smoothing = fwidth(dist);
    #else
      float smoothing = 0.05;
    #endif

    float outEdge = EDGE_VALUE - outlineSize;
    float bg = smoothstep(outEdge - smoothing, outEdge, dist);
    float fg = smoothstep(EDGE_VALUE - smoothing, EDGE_VALUE, dist);
    vec4 fgColor = outlineColor * (1.0 - fg) + v_color * fg;
    gl_FragColor = vec4(fgColor.rgb, fgColor.a * bg);

  #else
    vec4 o = vec4(1, 1, 1, 1);
    #if USE_TEXTURE
      #if USE_TEXTURE_ALPHAONLY
        o.a *= texture(texture, v_uv0).a;
      #else
        o *= texture(texture, v_uv0);
      #endif
      #if CC_USE_ALPHA_ATLAS_TEXTURE
      o.a *= texture2D(texture, v_uv0 + vec2(0, 0.5)).r;
      #endif
    #endif

    o *= v_color;

    ALPHA_TEST(o);

    gl_FragColor = o;
  #endif
  }
}%
