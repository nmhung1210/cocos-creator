
                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'engine-dev/cocos2d/renderer/types.js';
                    var __require = nodeEnv ? function (request) {
                        return require(request);
                    } : function (request) {
                        return __quick_compile_engine__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_engine__.registerModule(__filename, module);}"use strict";

exports.__esModule = true;
exports.getInspectorProps = getInspectorProps;
exports.getClassName = exports.getInstanceCtor = exports.getInstanceType = exports.enums2default = exports.ctor2enums = void 0;

var _enums = _interopRequireDefault(require("./enums"));

var _valueTypes = require("../core/value-types");

var _CCTexture2D = _interopRequireDefault(require("../core/assets/CCTexture2D"));

var _ctor2default, _enums2ctor, _ctor2enums, _enums2default;

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

var gfxTexture2D = null,
    gfxTextureCube = null;

if (CC_JSB && CC_NATIVERENDERER) {
  gfxTexture2D = gfx.Texture2D;
} else {
  gfxTexture2D = require('./gfx/texture-2d');
}

var CCObject = cc.Object;
var ctor2default = (_ctor2default = {}, _ctor2default[Boolean] = function (v) {
  return v || false;
}, _ctor2default[Number] = function (v) {
  return v ? ArrayBuffer.isView(v) ? v[0] : v : 0;
}, _ctor2default[_valueTypes.Vec2] = function (v) {
  return v ? cc.v2(v[0], v[1]) : cc.v2();
}, _ctor2default[_valueTypes.Vec3] = function (v) {
  return v ? cc.v3(v[0], v[1], v[2]) : cc.v3();
}, _ctor2default[_valueTypes.Vec4] = function (v) {
  return v ? cc.v4(v[0], v[1], v[2], v[3]) : cc.v4();
}, _ctor2default[_valueTypes.Color] = function (v) {
  return v ? cc.color(v[0] * 255, v[1] * 255, v[2] * 255, (v[3] || 1) * 255) : cc.color();
}, _ctor2default[_valueTypes.Mat4] = function (v) {
  return v ? cc.mat4(v[0], v[1], v[2], v[3], v[4], v[5], v[6], v[7], v[8], v[9], v[10], v[11], v[12], v[13], v[14], v[15]) : cc.mat4();
}, _ctor2default[_CCTexture2D["default"]] = function () {
  return null;
}, _ctor2default[CCObject] = function () {
  return null;
}, _ctor2default);
var enums2ctor = (_enums2ctor = {}, _enums2ctor[_enums["default"].PARAM_INT] = Number, _enums2ctor[_enums["default"].PARAM_INT2] = _valueTypes.Vec2, _enums2ctor[_enums["default"].PARAM_INT3] = _valueTypes.Vec3, _enums2ctor[_enums["default"].PARAM_INT4] = _valueTypes.Vec4, _enums2ctor[_enums["default"].PARAM_FLOAT] = Number, _enums2ctor[_enums["default"].PARAM_FLOAT2] = _valueTypes.Vec2, _enums2ctor[_enums["default"].PARAM_FLOAT3] = _valueTypes.Vec3, _enums2ctor[_enums["default"].PARAM_FLOAT4] = _valueTypes.Vec4, _enums2ctor[_enums["default"].PARAM_MAT4] = _valueTypes.Mat4, _enums2ctor[_enums["default"].PARAM_TEXTURE_2D] = _CCTexture2D["default"], _enums2ctor.color = _valueTypes.Color, _enums2ctor.number = Number, _enums2ctor["boolean"] = Boolean, _enums2ctor["default"] = CCObject, _enums2ctor);
var ctor2enums = (_ctor2enums = {}, _ctor2enums[Number] = _enums["default"].PARAM_FLOAT, _ctor2enums[_valueTypes.Vec2] = _enums["default"].PARAM_FLOAT2, _ctor2enums[_valueTypes.Vec3] = _enums["default"].PARAM_FLOAT3, _ctor2enums[_valueTypes.Vec4] = _enums["default"].PARAM_FLOAT4, _ctor2enums[_valueTypes.Color] = _enums["default"].PARAM_COLOR3, _ctor2enums[_valueTypes.Color] = _enums["default"].PARAM_COLOR4, _ctor2enums[_valueTypes.Mat4] = _enums["default"].PARAM_MAT4, _ctor2enums[_CCTexture2D["default"]] = _enums["default"].PARAM_TEXTURE_2D, _ctor2enums[gfxTexture2D] = _enums["default"].PARAM_TEXTURE_2D, _ctor2enums);
exports.ctor2enums = ctor2enums;
var enums2default = (_enums2default = {}, _enums2default[_enums["default"].PARAM_INT] = new Uint32Array([0]), _enums2default[_enums["default"].PARAM_INT2] = new Uint32Array([0, 0]), _enums2default[_enums["default"].PARAM_INT3] = new Uint32Array([0, 0, 0]), _enums2default[_enums["default"].PARAM_INT4] = new Uint32Array([0, 0, 0, 0]), _enums2default[_enums["default"].PARAM_FLOAT] = new Float32Array([0]), _enums2default[_enums["default"].PARAM_FLOAT2] = new Float32Array([0, 0]), _enums2default[_enums["default"].PARAM_FLOAT3] = new Float32Array([0, 0, 0]), _enums2default[_enums["default"].PARAM_FLOAT4] = new Float32Array([0, 0, 0, 0]), _enums2default[_enums["default"].PARAM_MAT4] = cc.mat4().m, _enums2default[_enums["default"].PARAM_TEXTURE_2D] = null, _enums2default.number = 0, _enums2default["boolean"] = false, _enums2default);
exports.enums2default = enums2default;

var getInstanceType = function getInstanceType(t) {
  return enums2ctor[t] || enums2ctor["default"];
};

exports.getInstanceType = getInstanceType;

var getInstanceCtor = function getInstanceCtor(t) {
  return ctor2default[getInstanceType(t)];
};

exports.getInstanceCtor = getInstanceCtor;

var getClassName = function getClassName(t) {
  return cc.js.getClassName(getInstanceType(t));
};

exports.getClassName = getClassName;
var className2InspectorName = {
  Number: 'number',
  Boolean: 'boolean'
};

function getInspectorProps(prop) {
  var editor = {
    type: prop.type
  };
  Object.assign(editor, prop.editor || prop.inspector);
  editor.defines = prop.defines;
  editor.value = getInstanceCtor(editor.type)(prop.value);

  if (prop.range) {
    editor.range = prop.range;
  }

  var className = getClassName(editor.type);
  editor.typeName = className2InspectorName[className] || className;
  editor.valueCtor = enums2ctor[editor.type];

  if (editor.typeName == 'cc.Texture2D') {
    editor.typeName = 'cc.Asset';
    editor.assetType = 'cc.Texture2D';
  }

  return editor;
}

;
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_engine__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,