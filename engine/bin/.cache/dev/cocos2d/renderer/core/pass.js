
                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'engine-dev/cocos2d/renderer/core/pass.js';
                    var __require = nodeEnv ? function (request) {
                        return require(request);
                    } : function (request) {
                        return __quick_compile_engine__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_engine__.registerModule(__filename, module);}"use strict";

exports.__esModule = true;
exports["default"] = void 0;

var _gfx = _interopRequireDefault(require("../gfx"));

var _enums = _interopRequireDefault(require("../enums"));

var _valueType = _interopRequireDefault(require("../../core/value-types/value-type"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

// Copyright (c) 2017-2018 Xiamen Yaji Software Co., Ltd.
var Pass = /*#__PURE__*/function () {
  function Pass(name, detailName, programName, stage, properties, defines) {
    if (properties === void 0) {
      properties = {};
    }

    if (defines === void 0) {
      defines = {};
    }

    this._name = name;
    this._detailName = detailName;
    this._programName = programName;
    this._stage = stage;
    this._properties = properties;
    this._defines = defines; // cullmode

    this._cullMode = _gfx["default"].CULL_BACK; // blending

    this._blend = false;
    this._blendEq = _gfx["default"].BLEND_FUNC_ADD;
    this._blendAlphaEq = _gfx["default"].BLEND_FUNC_ADD;
    this._blendSrc = _gfx["default"].BLEND_SRC_ALPHA;
    this._blendDst = _gfx["default"].BLEND_ONE_MINUS_SRC_ALPHA;
    this._blendSrcAlpha = _gfx["default"].BLEND_SRC_ALPHA;
    this._blendDstAlpha = _gfx["default"].BLEND_ONE_MINUS_SRC_ALPHA;
    this._blendColor = 0xffffffff; // depth

    this._depthTest = false;
    this._depthWrite = false;
    this._depthFunc = _gfx["default"].DS_FUNC_LESS, // stencil
    this._stencilTest = _gfx["default"].STENCIL_INHERIT; // front

    this._stencilFuncFront = _gfx["default"].DS_FUNC_ALWAYS;
    this._stencilRefFront = 0;
    this._stencilMaskFront = 0xff;
    this._stencilFailOpFront = _gfx["default"].STENCIL_OP_KEEP;
    this._stencilZFailOpFront = _gfx["default"].STENCIL_OP_KEEP;
    this._stencilZPassOpFront = _gfx["default"].STENCIL_OP_KEEP;
    this._stencilWriteMaskFront = 0xff; // back

    this._stencilFuncBack = _gfx["default"].DS_FUNC_ALWAYS;
    this._stencilRefBack = 0;
    this._stencilMaskBack = 0xff;
    this._stencilFailOpBack = _gfx["default"].STENCIL_OP_KEEP;
    this._stencilZFailOpBack = _gfx["default"].STENCIL_OP_KEEP;
    this._stencilZPassOpBack = _gfx["default"].STENCIL_OP_KEEP;
    this._stencilWriteMaskBack = 0xff;
  }

  var _proto = Pass.prototype;

  _proto.setCullMode = function setCullMode(cullMode) {
    if (cullMode === void 0) {
      cullMode = _gfx["default"].CULL_BACK;
    }

    this._cullMode = cullMode;
  };

  _proto.setBlend = function setBlend(enabled, blendEq, blendSrc, blendDst, blendAlphaEq, blendSrcAlpha, blendDstAlpha, blendColor) {
    if (enabled === void 0) {
      enabled = false;
    }

    if (blendEq === void 0) {
      blendEq = _gfx["default"].BLEND_FUNC_ADD;
    }

    if (blendSrc === void 0) {
      blendSrc = _gfx["default"].BLEND_SRC_ALPHA;
    }

    if (blendDst === void 0) {
      blendDst = _gfx["default"].BLEND_ONE_MINUS_SRC_ALPHA;
    }

    if (blendAlphaEq === void 0) {
      blendAlphaEq = _gfx["default"].BLEND_FUNC_ADD;
    }

    if (blendSrcAlpha === void 0) {
      blendSrcAlpha = _gfx["default"].BLEND_SRC_ALPHA;
    }

    if (blendDstAlpha === void 0) {
      blendDstAlpha = _gfx["default"].BLEND_ONE_MINUS_SRC_ALPHA;
    }

    if (blendColor === void 0) {
      blendColor = 0xffffffff;
    }

    this._blend = enabled;
    this._blendEq = blendEq;
    this._blendSrc = blendSrc;
    this._blendDst = blendDst;
    this._blendAlphaEq = blendAlphaEq;
    this._blendSrcAlpha = blendSrcAlpha;
    this._blendDstAlpha = blendDstAlpha;
    this._blendColor = blendColor;
  };

  _proto.setDepth = function setDepth(depthTest, depthWrite, depthFunc) {
    if (depthTest === void 0) {
      depthTest = false;
    }

    if (depthWrite === void 0) {
      depthWrite = false;
    }

    if (depthFunc === void 0) {
      depthFunc = _gfx["default"].DS_FUNC_LESS;
    }

    this._depthTest = depthTest;
    this._depthWrite = depthWrite;
    this._depthFunc = depthFunc;
  };

  _proto.setStencilFront = function setStencilFront(enabled, stencilFunc, stencilRef, stencilMask, stencilFailOp, stencilZFailOp, stencilZPassOp, stencilWriteMask) {
    if (enabled === void 0) {
      enabled = _gfx["default"].STENCIL_INHERIT;
    }

    if (stencilFunc === void 0) {
      stencilFunc = _gfx["default"].DS_FUNC_ALWAYS;
    }

    if (stencilRef === void 0) {
      stencilRef = 0;
    }

    if (stencilMask === void 0) {
      stencilMask = 0xff;
    }

    if (stencilFailOp === void 0) {
      stencilFailOp = _gfx["default"].STENCIL_OP_KEEP;
    }

    if (stencilZFailOp === void 0) {
      stencilZFailOp = _gfx["default"].STENCIL_OP_KEEP;
    }

    if (stencilZPassOp === void 0) {
      stencilZPassOp = _gfx["default"].STENCIL_OP_KEEP;
    }

    if (stencilWriteMask === void 0) {
      stencilWriteMask = 0xff;
    }

    this._stencilTest = enabled;
    this._stencilFuncFront = stencilFunc;
    this._stencilRefFront = stencilRef;
    this._stencilMaskFront = stencilMask;
    this._stencilFailOpFront = stencilFailOp;
    this._stencilZFailOpFront = stencilZFailOp;
    this._stencilZPassOpFront = stencilZPassOp;
    this._stencilWriteMaskFront = stencilWriteMask;
  };

  _proto.setStencilEnabled = function setStencilEnabled(stencilTest) {
    if (stencilTest === void 0) {
      stencilTest = _gfx["default"].STENCIL_INHERIT;
    }

    this._stencilTest = stencilTest;
  };

  _proto.setStencilBack = function setStencilBack(stencilTest, stencilFunc, stencilRef, stencilMask, stencilFailOp, stencilZFailOp, stencilZPassOp, stencilWriteMask) {
    if (stencilTest === void 0) {
      stencilTest = _gfx["default"].STENCIL_INHERIT;
    }

    if (stencilFunc === void 0) {
      stencilFunc = _gfx["default"].DS_FUNC_ALWAYS;
    }

    if (stencilRef === void 0) {
      stencilRef = 0;
    }

    if (stencilMask === void 0) {
      stencilMask = 0xff;
    }

    if (stencilFailOp === void 0) {
      stencilFailOp = _gfx["default"].STENCIL_OP_KEEP;
    }

    if (stencilZFailOp === void 0) {
      stencilZFailOp = _gfx["default"].STENCIL_OP_KEEP;
    }

    if (stencilZPassOp === void 0) {
      stencilZPassOp = _gfx["default"].STENCIL_OP_KEEP;
    }

    if (stencilWriteMask === void 0) {
      stencilWriteMask = 0xff;
    }

    this._stencilTest = stencilTest;
    this._stencilFuncBack = stencilFunc;
    this._stencilRefBack = stencilRef;
    this._stencilMaskBack = stencilMask;
    this._stencilFailOpBack = stencilFailOp;
    this._stencilZFailOpBack = stencilZFailOp;
    this._stencilZPassOpBack = stencilZPassOp;
    this._stencilWriteMaskBack = stencilWriteMask;
  };

  _proto.setStage = function setStage(stage) {
    this._stage = stage;
  };

  _proto.setProperties = function setProperties(properties) {
    this._properties = properties;
  };

  _proto.getProperty = function getProperty(name) {
    if (!this._properties[name]) {
      return;
    }

    return this._properties[name].value;
  };

  _proto.setProperty = function setProperty(name, value, directly) {
    var prop = this._properties[name];

    if (!prop) {
      return false;
    }

    prop.directly = directly;

    if (Array.isArray(value)) {
      var array = prop.value;

      if (array.length !== value.length) {
        cc.warnID(9105, this._name, name);
        return;
      }

      for (var i = 0; i < value.length; i++) {
        array[i] = value[i];
      }
    } else {
      if (value && !ArrayBuffer.isView(value)) {
        if (prop.type === _enums["default"].PARAM_TEXTURE_2D) {
          prop.value = value.getImpl();
        } else if (value instanceof _valueType["default"]) {
          value.constructor.toArray(prop.value, value);
        } else {
          if (typeof value === 'object') {
            cc.warnID(9106, this._name, name);
          }

          prop.value = value;
        }
      } else {
        prop.value = value;
      }
    }

    return true;
  };

  _proto.getDefine = function getDefine(name) {
    return this._defines[name];
  };

  _proto.define = function define(name, value, force) {
    if (!force) {
      var def = this._defines[name];

      if (def === undefined) {
        return false;
      }
    }

    this._defines[name] = value;
    return true;
  };

  _proto.clone = function clone() {
    var pass = new Pass(this._programName);
    Object.assign(pass, this);
    var newProperties = {};
    var properties = this._properties;

    for (var name in properties) {
      var prop = properties[name];
      var newProp = newProperties[name] = {};
      var value = prop.value;

      if (Array.isArray(value)) {
        newProp.value = value.concat();
      } else if (ArrayBuffer.isView(value)) {
        newProp.value = new value.__proto__.constructor(value);
      } else {
        newProp.value = value;
      }

      for (var _name in prop) {
        if (_name === 'value') continue;
        newProp[_name] = prop[_name];
      }
    }

    pass._properties = newProperties;
    pass._defines = Object.assign({}, this._defines);
    return pass;
  };

  return Pass;
}();

exports["default"] = Pass;
module.exports = exports["default"];
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_engine__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,