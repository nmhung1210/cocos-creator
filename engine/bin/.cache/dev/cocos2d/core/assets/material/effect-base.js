
                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'engine-dev/cocos2d/core/assets/material/effect-base.js';
                    var __require = nodeEnv ? function (request) {
                        return require(request);
                    } : function (request) {
                        return __quick_compile_engine__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_engine__.registerModule(__filename, module);}"use strict";

exports.__esModule = true;
exports["default"] = void 0;

var _pass = _interopRequireDefault(require("../../../renderer/core/pass"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var gfx = cc.gfx;

var EffectBase = /*#__PURE__*/function () {
  function EffectBase() {
    this._dirty = true;
    this._name = '';
    this._technique = null;
  }

  var _proto = EffectBase.prototype;

  _proto._createPassProp = function _createPassProp(name, pass) {
    var prop = pass._properties[name];

    if (!prop) {
      return;
    }

    var uniform = Object.create(null);
    uniform.name = name;
    uniform.type = prop.type;

    if (prop.value instanceof Float32Array) {
      uniform.value = new Float32Array(prop.value);
    } else {
      uniform.value = prop.value;
    }

    pass._properties[name] = uniform;
    return uniform;
  };

  _proto._setPassProperty = function _setPassProperty(name, value, pass, directly) {
    var properties = pass._properties;
    var uniform = properties.hasOwnProperty(name);

    if (!uniform) {
      uniform = this._createPassProp(name, pass);
    } else if (uniform.value === value) return;

    this._dirty = true;
    return _pass["default"].prototype.setProperty.call(pass, name, value, directly);
  };

  _proto.setProperty = function setProperty(name, value, passIdx, directly) {
    var success = false;
    var passes = this.passes;
    var start = 0,
        end = passes.length;

    if (passIdx !== undefined) {
      start = passIdx, end = passIdx + 1;
    }

    for (var i = start; i < end; i++) {
      if (this._setPassProperty(name, value, passes[i], directly)) {
        success = true;
      }
    }

    if (!success) {
      cc.warnID(9103, this.name, name);
    }
  };

  _proto.getProperty = function getProperty(name, passIdx) {
    var passes = this.passes;
    if (passIdx >= passes.length) return;
    var start = 0,
        end = passes.length;

    if (passIdx !== undefined) {
      start = passIdx, end = passIdx + 1;
    }

    for (var i = start; i < end; i++) {
      var value = passes[i].getProperty(name);

      if (value !== undefined) {
        return value;
      }
    }
  };

  _proto.define = function define(name, value, passIdx, force) {
    var success = false;
    var passes = this.passes;
    var start = 0,
        end = passes.length;

    if (passIdx !== undefined) {
      start = passIdx, end = passIdx + 1;
    }

    for (var i = start; i < end; i++) {
      if (passes[i].define(name, value, force)) {
        success = true;
      }
    }

    if (!success) {
      cc.warnID(9104, this.name, name);
    }
  };

  _proto.getDefine = function getDefine(name, passIdx) {
    var passes = this.passes;
    if (passIdx >= passes.length) return;
    var start = 0,
        end = passes.length;

    if (passIdx !== undefined) {
      start = passIdx, end = passIdx + 1;
    }

    for (var i = start; i < end; i++) {
      var value = passes[i].getDefine(name);

      if (value !== undefined) {
        return value;
      }
    }
  };

  _proto.setCullMode = function setCullMode(cullMode, passIdx) {
    if (cullMode === void 0) {
      cullMode = gfx.CULL_BACK;
    }

    var passes = this.passes;
    var start = 0,
        end = passes.length;

    if (passIdx !== undefined) {
      start = passIdx, end = passIdx + 1;
    }

    for (var i = start; i < end; i++) {
      passes[i].setCullMode(cullMode);
    }

    this._dirty = true;
  };

  _proto.setDepth = function setDepth(depthTest, depthWrite, depthFunc, passIdx) {
    var passes = this.passes;
    var start = 0,
        end = passes.length;

    if (passIdx !== undefined) {
      start = passIdx, end = passIdx + 1;
    }

    for (var i = start; i < end; i++) {
      passes[i].setDepth(depthTest, depthWrite, depthFunc);
    }

    this._dirty = true;
  };

  _proto.setBlend = function setBlend(enabled, blendEq, blendSrc, blendDst, blendAlphaEq, blendSrcAlpha, blendDstAlpha, blendColor, passIdx) {
    var passes = this.passes;
    var start = 0,
        end = passes.length;

    if (passIdx !== undefined) {
      start = passIdx, end = passIdx + 1;
    }

    for (var i = start; i < end; i++) {
      passes[i].setBlend(enabled, blendEq, blendSrc, blendDst, blendAlphaEq, blendSrcAlpha, blendDstAlpha, blendColor);
    }

    this._dirty = true;
  };

  _proto.setStencilEnabled = function setStencilEnabled(stencilTest, passIdx) {
    if (stencilTest === void 0) {
      stencilTest = gfx.STENCIL_INHERIT;
    }

    var passes = this.passes;
    var start = 0,
        end = passes.length;

    if (passIdx !== undefined) {
      start = passIdx, end = passIdx + 1;
    }

    for (var i = start; i < end; i++) {
      passes[i].setStencilEnabled(stencilTest);
    }

    this._dirty = true;
  };

  _proto.setStencil = function setStencil(enabled, stencilFunc, stencilRef, stencilMask, stencilFailOp, stencilZFailOp, stencilZPassOp, stencilWriteMask, passIdx) {
    var passes = this.passes;
    var start = 0,
        end = passes.length;

    if (passIdx !== undefined) {
      start = passIdx, end = passIdx + 1;
    }

    for (var i = start; i < end; i++) {
      var pass = passes[i];
      pass.setStencilFront(enabled, stencilFunc, stencilRef, stencilMask, stencilFailOp, stencilZFailOp, stencilZPassOp, stencilWriteMask);
      pass.setStencilBack(enabled, stencilFunc, stencilRef, stencilMask, stencilFailOp, stencilZFailOp, stencilZPassOp, stencilWriteMask);
    }

    this._dirty = true;
  };

  _createClass(EffectBase, [{
    key: "name",
    get: function get() {
      return this._name;
    }
  }, {
    key: "technique",
    get: function get() {
      return this._technique;
    }
  }, {
    key: "passes",
    get: function get() {
      return [];
    }
  }]);

  return EffectBase;
}();

exports["default"] = EffectBase;
cc.EffectBase = EffectBase;
module.exports = exports["default"];
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_engine__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,