
                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'engine-dev/cocos2d/core/renderer/webgl/assemblers/label/2d/bmfont.js';
                    var __require = nodeEnv ? function (request) {
                        return require(request);
                    } : function (request) {
                        return __quick_compile_engine__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_engine__.registerModule(__filename, module);}"use strict";

exports.__esModule = true;
exports["default"] = void 0;

var _bmfont = _interopRequireDefault(require("../../../../utils/label/bmfont"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }

var _dataOffset = 0;

var WebglBmfontAssembler = /*#__PURE__*/function (_BmfontAssembler) {
  _inheritsLoose(WebglBmfontAssembler, _BmfontAssembler);

  function WebglBmfontAssembler() {
    return _BmfontAssembler.apply(this, arguments) || this;
  }

  var _proto = WebglBmfontAssembler.prototype;

  _proto.initData = function initData() {
    this._renderData.createFlexData(0, 4, 6, this.getVfmt());
  };

  _proto._reserveQuads = function _reserveQuads(comp, count) {
    var verticesCount = count * 4;
    var indicesCount = count * 6;
    var flexBuffer = this._renderData._flexBuffer;
    flexBuffer.reserve(verticesCount, indicesCount);
    flexBuffer.used(verticesCount, indicesCount);
    var iData = this._renderData.iDatas[0];

    for (var i = 0, vid = 0, l = indicesCount; i < l; i += 6, vid += 4) {
      iData[i] = vid;
      iData[i + 1] = vid + 1;
      iData[i + 2] = vid + 2;
      iData[i + 3] = vid + 1;
      iData[i + 4] = vid + 3;
      iData[i + 5] = vid + 2;
    }

    _dataOffset = 0;
  };

  _proto._quadsUpdated = function _quadsUpdated(comp) {
    _dataOffset = 0;
    var flexBuffer = this._renderData._flexBuffer;
    flexBuffer.used(this.verticesCount, this.indicesCount);
  };

  _proto._getColor = function _getColor(comp) {
    return comp.node._color._val;
  };

  _proto.appendQuad = function appendQuad(comp, texture, rect, rotated, x, y, scale) {
    var renderData = this._renderData;
    var verts = renderData.vDatas[0],
        uintVerts = renderData.uintVDatas[0];
    this.verticesCount += 4;
    this.indicesCount = this.verticesCount / 2 * 3;

    var texw = texture.width,
        texh = texture.height,
        rectWidth = rect.width,
        rectHeight = rect.height,
        color = this._getColor(comp);

    var l, b, r, t;
    var floatsPerVert = this.floatsPerVert; // uvs

    var uvDataOffset = _dataOffset + this.uvOffset;

    if (!rotated) {
      l = rect.x / texw;
      r = (rect.x + rectWidth) / texw;
      b = (rect.y + rectHeight) / texh;
      t = rect.y / texh;
      verts[uvDataOffset] = l;
      verts[uvDataOffset + 1] = b;
      uvDataOffset += floatsPerVert;
      verts[uvDataOffset] = r;
      verts[uvDataOffset + 1] = b;
      uvDataOffset += floatsPerVert;
      verts[uvDataOffset] = l;
      verts[uvDataOffset + 1] = t;
      uvDataOffset += floatsPerVert;
      verts[uvDataOffset] = r;
      verts[uvDataOffset + 1] = t;
    } else {
      l = rect.x / texw;
      r = (rect.x + rectHeight) / texw;
      b = (rect.y + rectWidth) / texh;
      t = rect.y / texh;
      verts[uvDataOffset] = l;
      verts[uvDataOffset + 1] = t;
      uvDataOffset += floatsPerVert;
      verts[uvDataOffset] = l;
      verts[uvDataOffset + 1] = b;
      uvDataOffset += floatsPerVert;
      verts[uvDataOffset] = r;
      verts[uvDataOffset + 1] = t;
      uvDataOffset += floatsPerVert;
      verts[uvDataOffset] = r;
      verts[uvDataOffset + 1] = b;
    } // positions


    l = x;
    r = x + rectWidth * scale;
    b = y - rectHeight * scale;
    t = y;
    this.appendVerts(comp, _dataOffset, l, r, b, t); // colors

    var colorOffset = _dataOffset + this.colorOffset;

    for (var i = 0; i < 4; i++) {
      uintVerts[colorOffset] = color;
      colorOffset += floatsPerVert;
    }

    _dataOffset += this.floatsPerVert * 4;
  };

  _proto.appendVerts = function appendVerts(comp, offset, l, r, b, t) {
    var local = this._local;
    var floatsPerVert = this.floatsPerVert;
    local[offset] = l;
    local[offset + 1] = b;
    offset += floatsPerVert;
    local[offset] = r;
    local[offset + 1] = b;
    offset += floatsPerVert;
    local[offset] = l;
    local[offset + 1] = t;
    offset += floatsPerVert;
    local[offset] = r;
    local[offset + 1] = t;
  };

  _proto.updateWorldVerts = function updateWorldVerts(comp) {
    var node = comp.node;
    var matrix = node._worldMatrix;
    var matrixm = matrix.m,
        a = matrixm[0],
        b = matrixm[1],
        c = matrixm[4],
        d = matrixm[5],
        tx = matrixm[12],
        ty = matrixm[13];
    var local = this._local;
    var world = this._renderData.vDatas[0];
    var floatsPerVert = this.floatsPerVert;

    for (var offset = 0; offset < local.length; offset += floatsPerVert) {
      var x = local[offset];
      var y = local[offset + 1];
      world[offset] = x * a + y * c + tx;
      world[offset + 1] = x * b + y * d + ty;
    }
  };

  return WebglBmfontAssembler;
}(_bmfont["default"]);

exports["default"] = WebglBmfontAssembler;
module.exports = exports["default"];
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_engine__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,