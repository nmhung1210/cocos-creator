
                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'engine-dev/cocos2d/core/renderer/webgl/assemblers/sprite/2d/tiled.js';
                    var __require = nodeEnv ? function (request) {
                        return require(request);
                    } : function (request) {
                        return __quick_compile_engine__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_engine__.registerModule(__filename, module);}"use strict";

exports.__esModule = true;
exports["default"] = void 0;

var _assembler2d = _interopRequireDefault(require("../../../../assembler-2d"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }

var TiledAssembler = /*#__PURE__*/function (_Assembler2D) {
  _inheritsLoose(TiledAssembler, _Assembler2D);

  function TiledAssembler() {
    return _Assembler2D.apply(this, arguments) || this;
  }

  var _proto = TiledAssembler.prototype;

  _proto.initData = function initData(sprite) {
    this.verticesCount = 0;
    this.contentWidth = 0;
    this.contentHeight = 0;
    this.rectWidth = 0;
    this.rectHeight = 0;
    this.hRepeat = 0;
    this.vRepeat = 0;
    this.row = 0;
    this.col = 0;

    this._renderData.createFlexData(0, 4, 6, this.getVfmt());

    this._updateIndices();
  };

  _proto.initLocal = function initLocal() {
    this._local = {
      x: [],
      y: []
    };
  };

  _proto._updateIndices = function _updateIndices() {
    var iData = this._renderData.iDatas[0];

    for (var i = 0, vid = 0, l = iData.length; i < l; i += 6, vid += 4) {
      iData[i] = vid;
      iData[i + 1] = vid + 1;
      iData[i + 2] = vid + 2;
      iData[i + 3] = vid + 1;
      iData[i + 4] = vid + 3;
      iData[i + 5] = vid + 2;
    }
  };

  _proto.updateRenderData = function updateRenderData(sprite) {
    var frame = sprite._spriteFrame;
    this.packToDynamicAtlas(sprite, frame);
    var node = sprite.node;
    var contentWidth = this.contentWidth = Math.abs(node.width);
    var contentHeight = this.contentHeight = Math.abs(node.height);
    var rect = frame._rect;
    var leftWidth = frame.insetLeft,
        rightWidth = frame.insetRight,
        centerWidth = rect.width - leftWidth - rightWidth,
        topHeight = frame.insetTop,
        bottomHeight = frame.insetBottom,
        centerHeight = rect.height - topHeight - bottomHeight;
    this.sizableWidth = contentWidth - leftWidth - rightWidth;
    this.sizableHeight = contentHeight - topHeight - bottomHeight;
    this.sizableWidth = this.sizableWidth > 0 ? this.sizableWidth : 0;
    this.sizableHeight = this.sizableHeight > 0 ? this.sizableHeight : 0;
    var hRepeat = this.hRepeat = centerWidth === 0 ? this.sizableWidth : this.sizableWidth / centerWidth;
    var vRepeat = this.vRepeat = centerHeight === 0 ? this.sizableHeight : this.sizableHeight / centerHeight;
    var row = this.row = Math.ceil(vRepeat + 2);
    var col = this.col = Math.ceil(hRepeat + 2); // update data property

    var count = row * col;
    this.verticesCount = count * 4;
    this.indicesCount = count * 6;
    var renderData = this._renderData;
    var flexBuffer = renderData._flexBuffer;

    if (flexBuffer.reserve(this.verticesCount, this.indicesCount)) {
      this._updateIndices();

      this.updateColor(sprite);
    }

    flexBuffer.used(this.verticesCount, this.indicesCount);

    if (sprite._vertsDirty) {
      this.updateUVs(sprite);
      this.updateVerts(sprite);
      sprite._vertsDirty = false;
    }
  };

  _proto.updateVerts = function updateVerts(sprite) {
    var frame = sprite._spriteFrame;
    var rect = frame._rect;
    var node = sprite.node,
        appx = node.anchorX * node.width,
        appy = node.anchorY * node.height;
    var row = this.row,
        col = this.col,
        contentWidth = this.contentWidth,
        contentHeight = this.contentHeight;
    var _this$_local = this._local,
        x = _this$_local.x,
        y = _this$_local.y;
    x.length = y.length = 0;
    var leftWidth = frame.insetLeft,
        rightWidth = frame.insetRight,
        centerWidth = rect.width - leftWidth - rightWidth,
        topHeight = frame.insetTop,
        bottomHeight = frame.insetBottom,
        centerHeight = rect.height - topHeight - bottomHeight;
    var xScale = node.width / (leftWidth + rightWidth) > 1 ? 1 : node.width / (leftWidth + rightWidth);
    var yScale = node.height / (topHeight + bottomHeight) > 1 ? 1 : node.height / (topHeight + bottomHeight);
    var offsetWidth = 0,
        offsetHeight = 0;

    if (centerWidth > 0) {
      /*
       * Because the float numerical calculation in javascript is not accurate enough, 
       * there is an expected result of 1.0, but the actual result is 1.000001.
       */
      offsetWidth = Math.floor(this.sizableWidth * 1000) / 1000 % centerWidth === 0 ? centerWidth : this.sizableWidth % centerWidth;
    } else {
      offsetWidth = this.sizableWidth;
    }

    if (centerHeight > 0) {
      offsetHeight = Math.floor(this.sizableHeight * 1000) / 1000 % centerHeight === 0 ? centerHeight : this.sizableHeight % centerHeight;
    } else {
      offsetHeight = this.sizableHeight;
    }

    for (var i = 0; i <= col; i++) {
      if (i === 0) {
        x[i] = -appx;
      } else if (i > 0 && i < col) {
        if (i === 1) {
          x[i] = leftWidth * xScale + Math.min(centerWidth, this.sizableWidth) - appx;
        } else {
          if (centerWidth > 0) {
            if (i === col - 1) {
              x[i] = leftWidth + offsetWidth + centerWidth * (i - 2) - appx;
            } else {
              x[i] = leftWidth + Math.min(centerWidth, this.sizableWidth) + centerWidth * (i - 2) - appx;
            }
          } else {
            x[i] = leftWidth + this.sizableWidth - appx;
          }
        }
      } else if (i === col) {
        x[i] = Math.min(leftWidth + this.sizableWidth + rightWidth, contentWidth) - appx;
      }
    }

    for (var _i = 0; _i <= row; _i++) {
      if (_i === 0) {
        y[_i] = -appy;
      } else if (_i > 0 && _i < row) {
        if (_i === 1) {
          y[_i] = bottomHeight * yScale + Math.min(centerHeight, this.sizableHeight) - appy;
        } else {
          if (centerHeight > 0) {
            if (_i === row - 1) {
              y[_i] = bottomHeight + offsetHeight + (_i - 2) * centerHeight - appy;
            } else {
              y[_i] = bottomHeight + Math.min(centerHeight, this.sizableHeight) + (_i - 2) * centerHeight - appy;
            }
          } else {
            y[_i] = bottomHeight + this.sizableHeight - appy;
          }
        }
      } else if (_i === row) {
        y[_i] = Math.min(bottomHeight + this.sizableHeight + topHeight, contentHeight) - appy;
      }
    }

    this.updateWorldVerts(sprite);
  };

  _proto.updateWorldVerts = function updateWorldVerts(sprite) {
    var renderData = this._renderData;
    var local = this._local;
    var localX = local.x,
        localY = local.y;
    var world = renderData.vDatas[0];
    var row = this.row,
        col = this.col;
    var matrix = sprite.node._worldMatrix;
    var matrixm = matrix.m;
    var a = matrixm[0],
        b = matrixm[1],
        c = matrixm[4],
        d = matrixm[5],
        tx = matrixm[12],
        ty = matrixm[13];
    var x, x1, y, y1;
    var floatsPerVert = this.floatsPerVert;
    var vertexOffset = 0;

    for (var yindex = 0, ylength = row; yindex < ylength; ++yindex) {
      y = localY[yindex];
      y1 = localY[yindex + 1];

      for (var xindex = 0, xlength = col; xindex < xlength; ++xindex) {
        x = localX[xindex];
        x1 = localX[xindex + 1]; // lb

        world[vertexOffset] = x * a + y * c + tx;
        world[vertexOffset + 1] = x * b + y * d + ty;
        vertexOffset += floatsPerVert; // rb

        world[vertexOffset] = x1 * a + y * c + tx;
        world[vertexOffset + 1] = x1 * b + y * d + ty;
        vertexOffset += floatsPerVert; // lt

        world[vertexOffset] = x * a + y1 * c + tx;
        world[vertexOffset + 1] = x * b + y1 * d + ty;
        vertexOffset += floatsPerVert; // rt

        world[vertexOffset] = x1 * a + y1 * c + tx;
        world[vertexOffset + 1] = x1 * b + y1 * d + ty;
        vertexOffset += floatsPerVert;
      }
    }
  };

  _proto.updateUVs = function updateUVs(sprite) {
    var verts = this._renderData.vDatas[0];
    if (!verts) return;
    var frame = sprite._spriteFrame;
    var rect = frame._rect;
    var leftWidth = frame.insetLeft,
        rightWidth = frame.insetRight,
        centerWidth = rect.width - leftWidth - rightWidth,
        topHeight = frame.insetTop,
        bottomHeight = frame.insetBottom,
        centerHeight = rect.height - topHeight - bottomHeight;
    var row = this.row,
        col = this.col,
        hRepeat = this.hRepeat,
        vRepeat = this.vRepeat;
    var coefu = 0,
        coefv = 0;
    var uv = sprite.spriteFrame.uv;
    var uvSliced = sprite.spriteFrame.uvSliced;
    var rotated = sprite.spriteFrame._rotated;
    var floatsPerVert = this.floatsPerVert,
        uvOffset = this.uvOffset;

    for (var yindex = 0, ylength = row; yindex < ylength; ++yindex) {
      if (this.sizableHeight > centerHeight) {
        if (this.sizableHeight >= yindex * centerHeight) {
          coefv = 1;
        } else {
          coefv = vRepeat % 1;
        }
      } else {
        coefv = vRepeat;
      }

      for (var xindex = 0, xlength = col; xindex < xlength; ++xindex) {
        if (this.sizableWidth > centerWidth) {
          if (this.sizableWidth >= xindex * centerWidth) {
            coefu = 1;
          } else {
            coefu = hRepeat % 1;
          }
        } else {
          coefu = hRepeat;
        } // UV


        if (rotated) {
          // lb
          verts[uvOffset] = uv[0];
          verts[uvOffset + 1] = uv[1];
          uvOffset += floatsPerVert; // rb

          verts[uvOffset] = uv[0];
          verts[uvOffset + 1] = uv[1] + (uv[7] - uv[1]) * coefu;
          uvOffset += floatsPerVert; // lt

          verts[uvOffset] = uv[0] + (uv[6] - uv[0]) * coefv;
          verts[uvOffset + 1] = uv[1];
          uvOffset += floatsPerVert; // rt

          verts[uvOffset] = verts[uvOffset - floatsPerVert];
          verts[uvOffset + 1] = verts[uvOffset + 1 - floatsPerVert * 2];
          uvOffset += floatsPerVert;
        } else {
          // lb
          if (xindex === 0) {
            verts[uvOffset] = uv[0];
          } else if (xindex > 0 && xindex < col - 1) {
            verts[uvOffset] = uvSliced[1].u;
          } else if (xindex === col - 1) {
            verts[uvOffset] = uvSliced[2].u;
          }

          if (yindex === 0) {
            verts[uvOffset + 1] = uvSliced[0].v;
          } else if (yindex > 0 && yindex < row - 1) {
            verts[uvOffset + 1] = uvSliced[4].v;
          } else if (yindex === row - 1) {
            verts[uvOffset + 1] = uvSliced[8].v;
          }

          uvOffset += floatsPerVert; // rb

          if (xindex === 0) {
            verts[uvOffset] = uvSliced[1].u + (uvSliced[2].u - uvSliced[1].u) * coefu;
          } else if (xindex > 0 && xindex < col - 1) {
            verts[uvOffset] = uvSliced[1].u + (uvSliced[2].u - uvSliced[1].u) * coefu;
          } else if (xindex === col - 1) {
            verts[uvOffset] = uvSliced[3].u;
          }

          if (yindex === 0) {
            verts[uvOffset + 1] = uvSliced[0].v;
          } else if (yindex > 0 && yindex < row - 1) {
            verts[uvOffset + 1] = uvSliced[4].v;
          } else if (yindex === row - 1) {
            verts[uvOffset + 1] = uvSliced[8].v;
          }

          uvOffset += floatsPerVert; // lt

          if (xindex === 0) {
            verts[uvOffset] = uv[0];
          } else if (xindex > 0 && xindex < col - 1) {
            verts[uvOffset] = uvSliced[1].u;
          } else if (xindex === col - 1) {
            verts[uvOffset] = uvSliced[2].u;
          }

          if (yindex === 0) {
            verts[uvOffset + 1] = uvSliced[4].v + (uvSliced[8].v - uvSliced[4].v) * coefv;
          } else if (yindex > 0 && yindex < row - 1) {
            verts[uvOffset + 1] = uvSliced[4].v + (uvSliced[8].v - uvSliced[4].v) * coefv;
          } else if (yindex === row - 1) {
            verts[uvOffset + 1] = uvSliced[12].v;
          }

          uvOffset += floatsPerVert; // rt

          verts[uvOffset] = verts[uvOffset - floatsPerVert * 2];
          verts[uvOffset + 1] = verts[uvOffset + 1 - floatsPerVert];
          uvOffset += floatsPerVert;
        }
      }
    }
  };

  return TiledAssembler;
}(_assembler2d["default"]);

exports["default"] = TiledAssembler;
module.exports = exports["default"];
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_engine__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,