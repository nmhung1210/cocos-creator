
                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'engine-dev/cocos2d/core/renderer/webgl/assemblers/motion-streak.js';
                    var __require = nodeEnv ? function (request) {
                        return require(request);
                    } : function (request) {
                        return __quick_compile_engine__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_engine__.registerModule(__filename, module);}"use strict";

exports.__esModule = true;
exports["default"] = void 0;

var _assembler2d = _interopRequireDefault(require("../../assembler-2d"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }

var MotionStreak = require('../../../components/CCMotionStreak');

var RenderFlow = require('../../render-flow');

function Point(point, dir) {
  this.point = point || cc.v2();
  this.dir = dir || cc.v2();
  this.distance = 0;
  this.time = 0;
}

Point.prototype.setPoint = function (x, y) {
  this.point.x = x;
  this.point.y = y;
};

Point.prototype.setDir = function (x, y) {
  this.dir.x = x;
  this.dir.y = y;
};

var _tangent = cc.v2();

var _miter = cc.v2();

var _normal = cc.v2();

var _vec2 = cc.v2();

function normal(out, dir) {
  //get perpendicular
  out.x = -dir.y;
  out.y = dir.x;
  return out;
}

function computeMiter(miter, lineA, lineB, halfThick, maxMultiple) {
  //get tangent line
  lineA.add(lineB, _tangent);

  _tangent.normalizeSelf(); //get miter as a unit vector


  miter.x = -_tangent.y;
  miter.y = _tangent.x;
  _vec2.x = -lineA.y;
  _vec2.y = lineA.x; //get the necessary length of our miter

  var multiple = 1 / miter.dot(_vec2);

  if (maxMultiple) {
    multiple = Math.min(multiple, maxMultiple);
  }

  return halfThick * multiple;
}

var MotionStreakAssembler = /*#__PURE__*/function (_Assembler2D) {
  _inheritsLoose(MotionStreakAssembler, _Assembler2D);

  function MotionStreakAssembler() {
    return _Assembler2D.apply(this, arguments) || this;
  }

  var _proto = MotionStreakAssembler.prototype;

  _proto.initData = function initData() {
    this._renderData.createFlexData(0, 16, (16 - 2) * 3);
  };

  _proto.update = function update(comp, dt) {
    if (CC_EDITOR && !comp.preview) return;
    var stroke = comp._stroke / 2;
    var node = comp.node;
    var matrix = node._worldMatrix.m;
    var tx = matrix[12],
        ty = matrix[13];
    var points = comp._points;
    var cur;

    if (points.length > 1) {
      var difx = points[0].point.x - tx;
      var dify = points[0].point.y - ty;

      if (difx * difx + dify * dify < comp.minSeg) {
        cur = points[0];
      }
    }

    if (!cur) {
      cur = new Point();
      points.splice(0, 0, cur);
    }

    cur.setPoint(tx, ty);
    cur.time = comp._fadeTime + dt;
    var verticesCount = 0;
    var indicesCount = 0;

    if (points.length < 2) {
      return;
    }

    var color = comp._color,
        cr = color.r,
        cg = color.g,
        cb = color.b,
        ca = color.a;
    var prev = points[1];
    prev.distance = cur.point.sub(prev.point, _vec2).mag();

    _vec2.normalizeSelf();

    prev.setDir(_vec2.x, _vec2.y);
    cur.setDir(_vec2.x, _vec2.y);
    var flexBuffer = this._renderData._flexBuffer;
    flexBuffer.reserve(points.length * 2, (points.length - 1) * 6);
    var vData = flexBuffer.vData;
    var uintVData = flexBuffer.uintVData;
    var vertsOffset = 5;
    var fadeTime = comp._fadeTime;
    var findLast = false;

    for (var i = points.length - 1; i >= 0; i--) {
      var p = points[i];
      var point = p.point;
      var dir = p.dir;
      p.time -= dt;

      if (p.time < 0) {
        points.splice(i, 1);
        continue;
      }

      var progress = p.time / fadeTime;
      var next = points[i - 1];

      if (!findLast) {
        if (!next) {
          points.splice(i, 1);
          continue;
        }

        point.x = next.point.x - dir.x * progress;
        point.y = next.point.y - dir.y * progress;
      }

      findLast = true;
      normal(_normal, dir);
      var da = progress * ca;
      var c = (da << 24 >>> 0) + (cb << 16) + (cg << 8) + cr;
      var offset = verticesCount * vertsOffset;
      vData[offset] = point.x + _normal.x * stroke;
      vData[offset + 1] = point.y + _normal.y * stroke;
      vData[offset + 2] = 1;
      vData[offset + 3] = progress;
      uintVData[offset + 4] = c;
      offset += vertsOffset;
      vData[offset] = point.x - _normal.x * stroke;
      vData[offset + 1] = point.y - _normal.y * stroke;
      vData[offset + 2] = 0;
      vData[offset + 3] = progress;
      uintVData[offset + 4] = c;
      verticesCount += 2;
    }

    indicesCount = verticesCount <= 2 ? 0 : (verticesCount - 2) * 3;
    flexBuffer.used(verticesCount, indicesCount);
  };

  _proto.fillBuffers = function fillBuffers(comp, renderer) {
    var _this$_renderData$_fl = this._renderData._flexBuffer,
        vData = _this$_renderData$_fl.vData,
        usedVertices = _this$_renderData$_fl.usedVertices,
        usedIndices = _this$_renderData$_fl.usedIndices,
        usedVerticesFloats = _this$_renderData$_fl.usedVerticesFloats;
    var buffer = renderer._meshBuffer;
    var offsetInfo = buffer.request(usedVertices, usedIndices); // buffer data may be realloc, need get reference after request.
    // fill vertices

    var vertexOffset = offsetInfo.byteOffset >> 2,
        vbuf = buffer._vData;

    if (vData.length + vertexOffset > vbuf.length) {
      vbuf.set(vData.subarray(0, usedVerticesFloats), vertexOffset);
    } else {
      vbuf.set(vData, vertexOffset);
    } // fill indices


    var ibuf = buffer._iData,
        indiceOffset = offsetInfo.indiceOffset,
        vertexId = offsetInfo.vertexOffset; // index buffer

    for (var i = 0, l = usedVertices; i < l; i += 2) {
      var start = vertexId + i;
      ibuf[indiceOffset++] = start;
      ibuf[indiceOffset++] = start + 2;
      ibuf[indiceOffset++] = start + 1;
      ibuf[indiceOffset++] = start + 1;
      ibuf[indiceOffset++] = start + 2;
      ibuf[indiceOffset++] = start + 3;
    }

    comp.node._renderFlag |= RenderFlow.FLAG_UPDATE_RENDER_DATA;
  };

  return MotionStreakAssembler;
}(_assembler2d["default"]);

exports["default"] = MotionStreakAssembler;
MotionStreakAssembler.register(MotionStreak, MotionStreakAssembler);
module.exports = exports["default"];
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_engine__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,