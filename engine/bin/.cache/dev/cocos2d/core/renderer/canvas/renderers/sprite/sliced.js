
                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'engine-dev/cocos2d/core/renderer/canvas/renderers/sprite/sliced.js';
                    var __require = nodeEnv ? function (request) {
                        return require(request);
                    } : function (request) {
                        return __quick_compile_engine__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_engine__.registerModule(__filename, module);}"use strict";

exports.__esModule = true;
exports["default"] = void 0;

var _assembler = _interopRequireDefault(require("../../../assembler"));

var _renderData = _interopRequireDefault(require("../render-data"));

var _simple = _interopRequireDefault(require("./simple"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }

var utils = require('../utils');

var CanvasSlicedSprite = /*#__PURE__*/function (_CanvasSimpleSprite) {
  _inheritsLoose(CanvasSlicedSprite, _CanvasSimpleSprite);

  function CanvasSlicedSprite() {
    return _CanvasSimpleSprite.apply(this, arguments) || this;
  }

  var _proto = CanvasSlicedSprite.prototype;

  _proto.init = function init() {
    this._renderData = new _renderData["default"]();
    this._renderData.dataLength = 4;
  };

  _proto.updateUVs = function updateUVs(sprite) {
    var frame = sprite.spriteFrame;
    var renderData = this._renderData;
    var rect = frame._rect; // caculate texture coordinate

    var leftWidth = frame.insetLeft;
    var rightWidth = frame.insetRight;
    var centerWidth = rect.width - leftWidth - rightWidth;
    var topHeight = frame.insetTop;
    var bottomHeight = frame.insetBottom;
    var centerHeight = rect.height - topHeight - bottomHeight; // uv computation should take spritesheet into account.

    var verts = renderData.vertices;

    if (frame._rotated) {
      verts[0].u = rect.x;
      verts[1].u = bottomHeight + rect.x;
      verts[2].u = bottomHeight + centerHeight + rect.x;
      verts[3].u = rect.x + rect.height;
      verts[3].v = rect.y;
      verts[2].v = leftWidth + rect.y;
      verts[1].v = leftWidth + centerWidth + rect.y;
      verts[0].v = rect.y + rect.width;
    } else {
      verts[0].u = rect.x;
      verts[1].u = leftWidth + rect.x;
      verts[2].u = leftWidth + centerWidth + rect.x;
      verts[3].u = rect.x + rect.width;
      verts[3].v = rect.y;
      verts[2].v = topHeight + rect.y;
      verts[1].v = topHeight + centerHeight + rect.y;
      verts[0].v = rect.y + rect.height;
    }
  };

  _proto.updateVerts = function updateVerts(sprite) {
    var renderData = this._renderData,
        verts = renderData.vertices,
        node = sprite.node,
        width = node.width,
        height = node.height,
        appx = node.anchorX * width,
        appy = node.anchorY * height;
    var frame = sprite.spriteFrame;
    var leftWidth = frame.insetLeft;
    var rightWidth = frame.insetRight;
    var topHeight = frame.insetTop;
    var bottomHeight = frame.insetBottom;
    var sizableWidth = width - leftWidth - rightWidth;
    var sizableHeight = height - topHeight - bottomHeight;
    var xScale = width / (leftWidth + rightWidth);
    var yScale = height / (topHeight + bottomHeight);
    xScale = isNaN(xScale) || xScale > 1 ? 1 : xScale;
    yScale = isNaN(yScale) || yScale > 1 ? 1 : yScale;
    sizableWidth = sizableWidth < 0 ? 0 : sizableWidth;
    sizableHeight = sizableHeight < 0 ? 0 : sizableHeight;

    if (frame._rotated) {
      verts[0].y = -appx;
      verts[0].x = -appy;
      verts[1].y = rightWidth * xScale - appx;
      verts[1].x = bottomHeight * yScale - appy;
      verts[2].y = verts[1].y + sizableWidth;
      verts[2].x = verts[1].x + sizableHeight;
      verts[3].y = width - appx;
      verts[3].x = height - appy;
    } else {
      verts[0].x = -appx;
      verts[0].y = -appy;
      verts[1].x = leftWidth * xScale - appx;
      verts[1].y = bottomHeight * yScale - appy;
      verts[2].x = verts[1].x + sizableWidth;
      verts[2].y = verts[1].y + sizableHeight;
      verts[3].x = width - appx;
      verts[3].y = height - appy;
    }

    sprite._vertsDirty = false;
  };

  _proto.draw = function draw(ctx, comp) {
    var node = comp.node;
    var frame = comp._spriteFrame; // Transform

    var matrix = node._worldMatrix;
    var matrixm = matrix.m;
    var a = matrixm[0],
        b = matrixm[1],
        c = matrixm[4],
        d = matrixm[5],
        tx = matrixm[12],
        ty = matrixm[13];
    ctx.transform(a, b, c, d, tx, ty);
    ctx.scale(1, -1);

    if (frame._rotated) {
      ctx.rotate(-Math.PI / 2);
    } // TODO: handle blend function
    // opacity


    utils.context.setGlobalAlpha(ctx, node.opacity / 255);
    var tex = frame._texture,
        verts = this._renderData.vertices;
    var image = utils.getColorizedImage(tex, node._color);
    var drawCall = 0;
    var off, ld, rd, td, bd, x, y, w, h, sx, sy, sw, sh;

    for (var r = 0; r < 3; ++r) {
      bd = verts[r];
      td = verts[r + 1];

      for (var _c = 0; _c < 3; ++_c) {
        ld = verts[_c];
        rd = verts[_c + 1];
        x = ld.x;
        y = bd.y;
        w = rd.x - x;
        h = td.y - y;
        y = -y - h;
        sx = ld.u; // invert texture because texture uv is in UI coordinates (origin at top left)

        sy = td.v;
        sw = rd.u - sx;
        sh = bd.v - sy;

        if (sw > 0 && sh > 0 && w > 0 && h > 0) {
          ctx.drawImage(image, sx, sy, sw, sh, x, y, w, h);
          drawCall++;
        }
      }
    }

    return drawCall;
  };

  return CanvasSlicedSprite;
}(_simple["default"]);

exports["default"] = CanvasSlicedSprite;
module.exports = exports["default"];
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_engine__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,