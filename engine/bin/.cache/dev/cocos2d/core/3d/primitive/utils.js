
                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'engine-dev/cocos2d/core/3d/primitive/utils.js';
                    var __require = nodeEnv ? function (request) {
                        return require(request);
                    } : function (request) {
                        return __quick_compile_engine__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_engine__.registerModule(__filename, module);}"use strict";

exports.__esModule = true;
exports.wireframe = wireframe;
exports.invWinding = invWinding;
exports.toWavefrontOBJ = toWavefrontOBJ;
exports.normals = normals;
exports.calcNormals = calcNormals;

var _vec = _interopRequireDefault(require("../../value-types/vec3"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function wireframe(indices) {
  var offsets = [[0, 1], [1, 2], [2, 0]];
  var lines = [];
  var lineIDs = {};

  for (var i = 0; i < indices.length; i += 3) {
    for (var k = 0; k < 3; ++k) {
      var i1 = indices[i + offsets[k][0]];
      var i2 = indices[i + offsets[k][1]]; // check if we already have the line in our lines

      var id = i1 > i2 ? i2 << 16 | i1 : i1 << 16 | i2;

      if (lineIDs[id] === undefined) {
        lineIDs[id] = 0;
        lines.push(i1, i2);
      }
    }
  }

  return lines;
}

function invWinding(indices) {
  var newIB = [];

  for (var i = 0; i < indices.length; i += 3) {
    newIB.push(indices[i], indices[i + 2], indices[i + 1]);
  }

  return newIB;
}

function toWavefrontOBJ(primitive, scale) {
  if (scale === void 0) {
    scale = 1;
  }

  var v = primitive.positions,
      t = primitive.uvs,
      n = primitive.normals,
      IB = primitive.indices;

  var V = function V(i) {
    return IB[i] + 1 + "/" + (IB[i] + 1) + "/" + (IB[i] + 1);
  };

  var content = '';

  for (var i = 0; i < v.length; i += 3) {
    content += "v " + v[i] * scale + " " + v[i + 1] * scale + " " + v[i + 2] * scale + "\n";
  }

  for (var _i = 0; _i < t.length; _i += 2) {
    content += "vt " + t[_i] + " " + t[_i + 1] + "\n";
  }

  for (var _i2 = 0; _i2 < n.length; _i2 += 3) {
    content += "vn " + n[_i2] + " " + n[_i2 + 1] + " " + n[_i2 + 2] + "\n";
  }

  for (var _i3 = 0; _i3 < IB.length; _i3 += 3) {
    content += "f " + V(_i3) + " " + V(_i3 + 1) + " " + V(_i3 + 2) + "\n";
  }

  return content;
}

function normals(positions, normals, length) {
  if (length === void 0) {
    length = 1;
  }

  var verts = new Array(2 * positions.length);

  for (var i = 0; i < positions.length / 3; ++i) {
    var i3 = 3 * i;
    var i6 = 6 * i; // line start

    verts[i6 + 0] = positions[i3 + 0];
    verts[i6 + 1] = positions[i3 + 1];
    verts[i6 + 2] = positions[i3 + 2]; // line end

    verts[i6 + 3] = positions[i3 + 0] + normals[i3 + 0] * length;
    verts[i6 + 4] = positions[i3 + 1] + normals[i3 + 1] * length;
    verts[i6 + 5] = positions[i3 + 2] + normals[i3 + 2] * length;
  }

  return verts;
}

function fromArray(out, a, offset) {
  out.x = a[offset];
  out.y = a[offset + 1];
  out.z = a[offset + 2];
}

function calcNormals(positions, indices, normals) {
  normals = normals || new Array(positions.length);

  for (var i = 0, l = normals.length; i < l; i++) {
    normals[i] = 0;
  }

  var vA, vB, vC;
  var pA = cc.v3(),
      pB = cc.v3(),
      pC = cc.v3();
  var cb = cc.v3(),
      ab = cc.v3();

  for (var _i4 = 0, il = indices.length; _i4 < il; _i4 += 3) {
    vA = indices[_i4 + 0] * 3;
    vB = indices[_i4 + 1] * 3;
    vC = indices[_i4 + 2] * 3;
    fromArray(pA, positions, vA);
    fromArray(pB, positions, vB);
    fromArray(pC, positions, vC);

    _vec["default"].subtract(cb, pC, pB);

    _vec["default"].subtract(ab, pA, pB);

    _vec["default"].cross(cb, cb, ab);

    normals[vA] += cb.x;
    normals[vA + 1] += cb.y;
    normals[vA + 2] += cb.z;
    normals[vB] += cb.x;
    normals[vB + 1] += cb.y;
    normals[vB + 2] += cb.z;
    normals[vC] += cb.x;
    normals[vC + 1] += cb.y;
    normals[vC + 2] += cb.z;
  }

  var tempNormal = cc.v3();

  for (var _i5 = 0, _l = normals.length; _i5 < _l; _i5 += 3) {
    tempNormal.x = normals[_i5];
    tempNormal.y = normals[_i5 + 1];
    tempNormal.z = normals[_i5 + 2];
    tempNormal.normalizeSelf();
    normals[_i5] = tempNormal.x;
    normals[_i5 + 1] = tempNormal.y;
    normals[_i5 + 2] = tempNormal.z;
  }

  return normals;
}
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_engine__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,