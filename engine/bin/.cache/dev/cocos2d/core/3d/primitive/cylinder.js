
                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'engine-dev/cocos2d/core/3d/primitive/cylinder.js';
                    var __require = nodeEnv ? function (request) {
                        return require(request);
                    } : function (request) {
                        return __quick_compile_engine__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_engine__.registerModule(__filename, module);}'use strict';

exports.__esModule = true;
exports["default"] = _default;

var _vec = _interopRequireDefault(require("../../value-types/vec3"));

var _vertexData = _interopRequireDefault(require("./vertex-data"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

var temp1 = new _vec["default"]();
var temp2 = new _vec["default"]();
/**
 * @param {Number} radiusTop
 * @param {Number} radiusBottom
 * @param {Number} height
 * @param {Object} opts
 * @param {Number} opts.radialSegments
 * @param {Number} opts.heightSegments
 * @param {Boolean} opts.capped
 * @param {Number} opts.arc
 */

function _default(radiusTop, radiusBottom, height, opts) {
  if (radiusTop === void 0) {
    radiusTop = 0.5;
  }

  if (radiusBottom === void 0) {
    radiusBottom = 0.5;
  }

  if (height === void 0) {
    height = 2;
  }

  if (opts === void 0) {
    opts = {
      radialSegments: 32,
      heightSegments: 1,
      capped: true,
      arc: 2.0 * Math.PI
    };
  }

  var halfHeight = height * 0.5;
  var radialSegments = opts.radialSegments;
  var heightSegments = opts.heightSegments;
  var capped = opts.capped;
  var arc = opts.arc;
  var cntCap = 0;

  if (!capped) {
    if (radiusTop > 0) {
      cntCap++;
    }

    if (radiusBottom > 0) {
      cntCap++;
    }
  } // calculate vertex count


  var vertCount = (radialSegments + 1) * (heightSegments + 1);

  if (capped) {
    vertCount += (radialSegments + 1) * cntCap + radialSegments * cntCap;
  } // calculate index count


  var indexCount = radialSegments * heightSegments * 2 * 3;

  if (capped) {
    indexCount += radialSegments * cntCap * 3;
  }

  var indices = new Array(indexCount);
  var positions = new Array(vertCount * 3);
  var normals = new Array(vertCount * 3);
  var uvs = new Array(vertCount * 2);
  var maxRadius = Math.max(radiusTop, radiusBottom);
  var minPos = new _vec["default"](-maxRadius, -halfHeight, -maxRadius);
  var maxPos = new _vec["default"](maxRadius, halfHeight, maxRadius);
  var boundingRadius = Math.sqrt(maxRadius * maxRadius + halfHeight * halfHeight);
  var index = 0;
  var indexOffset = 0;
  generateTorso();

  if (capped) {
    if (radiusBottom > 0) {
      generateCap(false);
    }

    if (radiusTop > 0) {
      generateCap(true);
    }
  }

  return new _vertexData["default"](positions, normals, uvs, indices, minPos, maxPos, boundingRadius); // =======================
  // internal fucntions
  // =======================

  function generateTorso() {
    var indexArray = []; // this will be used to calculate the normal

    var r = radiusTop - radiusBottom;
    var slope = r * r / height * Math.sign(r); // generate positions, normals and uvs

    for (var y = 0; y <= heightSegments; y++) {
      var indexRow = [];
      var v = y / heightSegments; // calculate the radius of the current row

      var radius = v * r + radiusBottom;

      for (var x = 0; x <= radialSegments; ++x) {
        var u = x / radialSegments;
        var theta = u * arc;
        var sinTheta = Math.sin(theta);
        var cosTheta = Math.cos(theta); // vertex

        positions[3 * index] = radius * sinTheta;
        positions[3 * index + 1] = v * height - halfHeight;
        positions[3 * index + 2] = radius * cosTheta; // normal

        _vec["default"].normalize(temp1, _vec["default"].set(temp2, sinTheta, -slope, cosTheta));

        normals[3 * index] = temp1.x;
        normals[3 * index + 1] = temp1.y;
        normals[3 * index + 2] = temp1.z; // uv

        uvs[2 * index] = (1 - u) * 2 % 1;
        uvs[2 * index + 1] = v; // save index of vertex in respective row

        indexRow.push(index); // increase index

        ++index;
      } // now save positions of the row in our index array


      indexArray.push(indexRow);
    } // generate indices


    for (var _y = 0; _y < heightSegments; ++_y) {
      for (var _x = 0; _x < radialSegments; ++_x) {
        // we use the index array to access the correct indices
        var i1 = indexArray[_y][_x];
        var i2 = indexArray[_y + 1][_x];
        var i3 = indexArray[_y + 1][_x + 1];
        var i4 = indexArray[_y][_x + 1]; // face one

        indices[indexOffset] = i1;
        ++indexOffset;
        indices[indexOffset] = i4;
        ++indexOffset;
        indices[indexOffset] = i2;
        ++indexOffset; // face two

        indices[indexOffset] = i4;
        ++indexOffset;
        indices[indexOffset] = i3;
        ++indexOffset;
        indices[indexOffset] = i2;
        ++indexOffset;
      }
    }
  }

  function generateCap(top) {
    var centerIndexStart, centerIndexEnd;
    var radius = top ? radiusTop : radiusBottom;
    var sign = top ? 1 : -1; // save the index of the first center vertex

    centerIndexStart = index; // first we generate the center vertex data of the cap.
    // because the geometry needs one set of uvs per face,
    // we must generate a center vertex per face/segment

    for (var x = 1; x <= radialSegments; ++x) {
      // vertex
      positions[3 * index] = 0;
      positions[3 * index + 1] = halfHeight * sign;
      positions[3 * index + 2] = 0; // normal

      normals[3 * index] = 0;
      normals[3 * index + 1] = sign;
      normals[3 * index + 2] = 0; // uv

      uvs[2 * index] = 0.5;
      uvs[2 * index + 1] = 0.5; // increase index

      ++index;
    } // save the index of the last center vertex


    centerIndexEnd = index; // now we generate the surrounding positions, normals and uvs

    for (var _x2 = 0; _x2 <= radialSegments; ++_x2) {
      var u = _x2 / radialSegments;
      var theta = u * arc;
      var cosTheta = Math.cos(theta);
      var sinTheta = Math.sin(theta); // vertex

      positions[3 * index] = radius * sinTheta;
      positions[3 * index + 1] = halfHeight * sign;
      positions[3 * index + 2] = radius * cosTheta; // normal

      normals[3 * index] = 0;
      normals[3 * index + 1] = sign;
      normals[3 * index + 2] = 0; // uv

      uvs[2 * index] = 0.5 - sinTheta * 0.5 * sign;
      uvs[2 * index + 1] = 0.5 + cosTheta * 0.5; // increase index

      ++index;
    } // generate indices


    for (var _x3 = 0; _x3 < radialSegments; ++_x3) {
      var c = centerIndexStart + _x3;
      var i = centerIndexEnd + _x3;

      if (top) {
        // face top
        indices[indexOffset] = i + 1;
        ++indexOffset;
        indices[indexOffset] = c;
        ++indexOffset;
        indices[indexOffset] = i;
        ++indexOffset;
      } else {
        // face bottom
        indices[indexOffset] = c;
        ++indexOffset;
        indices[indexOffset] = i + 1;
        ++indexOffset;
        indices[indexOffset] = i;
        ++indexOffset;
      }
    }
  }
}

module.exports = exports["default"];
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_engine__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,