
                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'engine-dev/cocos2d/core/components/CCStudioComponent.js';
                    var __require = nodeEnv ? function (request) {
                        return require(request);
                    } : function (request) {
                        return __quick_compile_engine__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_engine__.registerModule(__filename, module);}"use strict";

/****************************************************************************
 Copyright (c) 2017-2018 Xiamen Yaji Software Co., Ltd.

 https://www.cocos.com/

 Permission is hereby granted, free of charge, to any person obtaining a copy
 of this software and associated engine source code (the "Software"), a limited,
 worldwide, royalty-free, non-assignable, revocable and non-exclusive license
 to use Cocos Creator solely to develop games on your target platforms. You shall
 not use Cocos Creator software for developing other software or tools that's
 used for developing games. You are not granted to publish, distribute,
 sublicense, and/or sell copies of Cocos Creator.

 The software or tools in this License Agreement are licensed, not sold.
 Xiamen Yaji Software Co., Ltd. reserves all rights not expressly granted to you.

 THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 THE SOFTWARE.
 ****************************************************************************/
var ComponentType = cc.Enum({
  NONE: 0,
  CHECKBOX: 1,
  TEXT_ATLAS: 2,
  SLIDER_BAR: 3,
  LIST_VIEW: 4,
  PAGE_VIEW: 5
});
var ListDirection = cc.Enum({
  VERTICAL: 0,
  HORIZONTAL: 1
});
var VerticalAlign = cc.Enum({
  TOP: 0,
  CENTER: 1,
  BOTTOM: 2
});
var HorizontalAlign = cc.Enum({
  LEFT: 0,
  CENTER: 1,
  RIGHT: 2
});
var StudioComponent = cc.Class({
  name: 'cc.StudioComponent',
  "extends": cc.Component,
  editor: CC_EDITOR && {
    inspector: 'unpack://engine-dev/extensions/cocostudio/editor/studio-component.js'
  },
  properties: CC_EDITOR && {
    _type: ComponentType.NONE,
    type: {
      get: function get() {
        return this._type;
      },
      set: function set(value) {
        this._type = value;
      },
      readonly: true,
      type: ComponentType
    },
    // props for checkbox
    _checkNormalBackFrame: null,
    checkNormalBackFrame: {
      get: function get() {
        return this._checkNormalBackFrame;
      },
      set: function set(value) {
        this._checkNormalBackFrame = value;
      },
      readonly: true,
      type: cc.SpriteFrame
    },
    _checkPressedBackFrame: null,
    checkPressedBackFrame: {
      get: function get() {
        return this._checkPressedBackFrame;
      },
      set: function set(value) {
        this._checkPressedBackFrame = value;
      },
      readonly: true,
      type: cc.SpriteFrame
    },
    _checkDisableBackFrame: null,
    checkDisableBackFrame: {
      get: function get() {
        return this._checkDisableBackFrame;
      },
      set: function set(value) {
        this._checkDisableBackFrame = value;
      },
      readonly: true,
      type: cc.SpriteFrame
    },
    _checkNormalFrame: null,
    checkNormalFrame: {
      get: function get() {
        return this._checkNormalFrame;
      },
      set: function set(value) {
        this._checkNormalFrame = value;
      },
      readonly: true,
      type: cc.SpriteFrame
    },
    _checkDisableFrame: null,
    checkDisableFrame: {
      get: function get() {
        return this._checkDisableFrame;
      },
      set: function set(value) {
        this._checkDisableFrame = value;
      },
      readonly: true,
      type: cc.SpriteFrame
    },
    checkInteractable: {
      readonly: true,
      "default": true
    },
    isChecked: {
      readonly: true,
      "default": true
    },
    // props for TextAtlas
    _atlasFrame: null,
    atlasFrame: {
      get: function get() {
        return this._atlasFrame;
      },
      set: function set(value) {
        this._atlasFrame = value;
      },
      readonly: true,
      type: cc.SpriteFrame
    },
    firstChar: {
      readonly: true,
      "default": '.'
    },
    charWidth: {
      readonly: true,
      "default": 0
    },
    charHeight: {
      readonly: true,
      "default": 0
    },
    string: {
      readonly: true,
      "default": ''
    },
    // props for SliderBar
    _sliderBackFrame: null,
    sliderBackFrame: {
      get: function get() {
        return this._sliderBackFrame;
      },
      set: function set(value) {
        this._sliderBackFrame = value;
      },
      readonly: true,
      type: cc.SpriteFrame
    },
    _sliderBarFrame: null,
    sliderBarFrame: {
      get: function get() {
        return this._sliderBarFrame;
      },
      set: function set(value) {
        this._sliderBarFrame = value;
      },
      readonly: true,
      type: cc.SpriteFrame
    },
    _sliderBtnNormalFrame: null,
    sliderBtnNormalFrame: {
      get: function get() {
        return this._sliderBtnNormalFrame;
      },
      set: function set(value) {
        this._sliderBtnNormalFrame = value;
      },
      readonly: true,
      type: cc.SpriteFrame
    },
    _sliderBtnPressedFrame: null,
    sliderBtnPressedFrame: {
      get: function get() {
        return this._sliderBtnPressedFrame;
      },
      set: function set(value) {
        this._sliderBtnPressedFrame = value;
      },
      readonly: true,
      type: cc.SpriteFrame
    },
    _sliderBtnDisabledFrame: null,
    sliderBtnDisabledFrame: {
      get: function get() {
        return this._sliderBtnDisabledFrame;
      },
      set: function set(value) {
        this._sliderBtnDisabledFrame = value;
      },
      readonly: true,
      type: cc.SpriteFrame
    },
    sliderInteractable: {
      readonly: true,
      "default": true
    },
    sliderProgress: {
      "default": 0.5,
      readonly: true,
      type: cc.Float,
      range: [0, 1, 0.1]
    },
    // props for ListView
    listInertia: {
      readonly: true,
      "default": true,
      animatable: false,
      tooltip: CC_DEV && 'i18n:COMPONENT.scrollview.inertia'
    },
    listDirection: {
      readonly: true,
      "default": ListDirection.VERTICAL,
      type: ListDirection
    },
    listHorizontalAlign: {
      readonly: true,
      "default": HorizontalAlign.LEFT,
      type: HorizontalAlign
    },
    listVerticalAlign: {
      readonly: true,
      "default": VerticalAlign.TOP,
      type: VerticalAlign
    },
    listPadding: {
      readonly: true,
      "default": 0
    }
  },
  statics: {
    ComponentType: ComponentType,
    ListDirection: ListDirection,
    VerticalAlign: VerticalAlign,
    HorizontalAlign: HorizontalAlign
  }
}); // TODO: nest by the built-in manner

var PrefabHelper = require('../utils/prefab-helper');

StudioComponent.PlaceHolder = cc.Class({
  name: 'cc.StudioComponent.PlaceHolder',
  "extends": cc.Component,
  properties: {
    _baseUrl: '',
    nestedPrefab: cc.Prefab
  },
  onLoad: function onLoad() {
    if (!this.nestedPrefab) {
      if (CC_DEV) {
        cc.warn('Unable to find %s resource.', this._baseUrl);
      }

      return;
    }

    this._replaceWithNestedPrefab();
  },
  _replaceWithNestedPrefab: function _replaceWithNestedPrefab() {
    var node = this.node;
    var _prefab = node._prefab;
    _prefab.root = node;
    _prefab.asset = this.nestedPrefab;
    PrefabHelper.syncWithPrefab(node);
  }
});
cc.StudioComponent = module.exports = StudioComponent;
var StudioWidget = cc.Class({
  name: 'cc.StudioWidget',
  "extends": cc.Widget,
  editor: CC_EDITOR && {
    inspector: 'packages://inspector/inspectors/comps/ccwidget.js'
  },
  _validateTargetInDEV: function _validateTargetInDEV() {}
});
cc.StudioWidget = module.exports = StudioWidget;
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_engine__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImVuZ2luZS1kZXYvY29jb3MyZC9jb3JlL2NvbXBvbmVudHMvQ0NTdHVkaW9Db21wb25lbnQuanMiXSwibmFtZXMiOlsiQ29tcG9uZW50VHlwZSIsImNjIiwiRW51bSIsIk5PTkUiLCJDSEVDS0JPWCIsIlRFWFRfQVRMQVMiLCJTTElERVJfQkFSIiwiTElTVF9WSUVXIiwiUEFHRV9WSUVXIiwiTGlzdERpcmVjdGlvbiIsIlZFUlRJQ0FMIiwiSE9SSVpPTlRBTCIsIlZlcnRpY2FsQWxpZ24iLCJUT1AiLCJDRU5URVIiLCJCT1RUT00iLCJIb3Jpem9udGFsQWxpZ24iLCJMRUZUIiwiUklHSFQiLCJTdHVkaW9Db21wb25lbnQiLCJDbGFzcyIsIm5hbWUiLCJDb21wb25lbnQiLCJlZGl0b3IiLCJDQ19FRElUT1IiLCJpbnNwZWN0b3IiLCJwcm9wZXJ0aWVzIiwiX3R5cGUiLCJ0eXBlIiwiZ2V0Iiwic2V0IiwidmFsdWUiLCJyZWFkb25seSIsIl9jaGVja05vcm1hbEJhY2tGcmFtZSIsImNoZWNrTm9ybWFsQmFja0ZyYW1lIiwiU3ByaXRlRnJhbWUiLCJfY2hlY2tQcmVzc2VkQmFja0ZyYW1lIiwiY2hlY2tQcmVzc2VkQmFja0ZyYW1lIiwiX2NoZWNrRGlzYWJsZUJhY2tGcmFtZSIsImNoZWNrRGlzYWJsZUJhY2tGcmFtZSIsIl9jaGVja05vcm1hbEZyYW1lIiwiY2hlY2tOb3JtYWxGcmFtZSIsIl9jaGVja0Rpc2FibGVGcmFtZSIsImNoZWNrRGlzYWJsZUZyYW1lIiwiY2hlY2tJbnRlcmFjdGFibGUiLCJpc0NoZWNrZWQiLCJfYXRsYXNGcmFtZSIsImF0bGFzRnJhbWUiLCJmaXJzdENoYXIiLCJjaGFyV2lkdGgiLCJjaGFySGVpZ2h0Iiwic3RyaW5nIiwiX3NsaWRlckJhY2tGcmFtZSIsInNsaWRlckJhY2tGcmFtZSIsIl9zbGlkZXJCYXJGcmFtZSIsInNsaWRlckJhckZyYW1lIiwiX3NsaWRlckJ0bk5vcm1hbEZyYW1lIiwic2xpZGVyQnRuTm9ybWFsRnJhbWUiLCJfc2xpZGVyQnRuUHJlc3NlZEZyYW1lIiwic2xpZGVyQnRuUHJlc3NlZEZyYW1lIiwiX3NsaWRlckJ0bkRpc2FibGVkRnJhbWUiLCJzbGlkZXJCdG5EaXNhYmxlZEZyYW1lIiwic2xpZGVySW50ZXJhY3RhYmxlIiwic2xpZGVyUHJvZ3Jlc3MiLCJGbG9hdCIsInJhbmdlIiwibGlzdEluZXJ0aWEiLCJhbmltYXRhYmxlIiwidG9vbHRpcCIsIkNDX0RFViIsImxpc3REaXJlY3Rpb24iLCJsaXN0SG9yaXpvbnRhbEFsaWduIiwibGlzdFZlcnRpY2FsQWxpZ24iLCJsaXN0UGFkZGluZyIsInN0YXRpY3MiLCJQcmVmYWJIZWxwZXIiLCJyZXF1aXJlIiwiUGxhY2VIb2xkZXIiLCJfYmFzZVVybCIsIm5lc3RlZFByZWZhYiIsIlByZWZhYiIsIm9uTG9hZCIsIndhcm4iLCJfcmVwbGFjZVdpdGhOZXN0ZWRQcmVmYWIiLCJub2RlIiwiX3ByZWZhYiIsInJvb3QiLCJhc3NldCIsInN5bmNXaXRoUHJlZmFiIiwibW9kdWxlIiwiZXhwb3J0cyIsIlN0dWRpb1dpZGdldCIsIldpZGdldCIsIl92YWxpZGF0ZVRhcmdldEluREVWIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7O0FBQUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQTBCQSxJQUFJQSxhQUFhLEdBQUdDLEVBQUUsQ0FBQ0MsSUFBSCxDQUFRO0FBQ3hCQyxFQUFBQSxJQUFJLEVBQUcsQ0FEaUI7QUFFeEJDLEVBQUFBLFFBQVEsRUFBRyxDQUZhO0FBR3hCQyxFQUFBQSxVQUFVLEVBQUcsQ0FIVztBQUl4QkMsRUFBQUEsVUFBVSxFQUFHLENBSlc7QUFLeEJDLEVBQUFBLFNBQVMsRUFBRyxDQUxZO0FBTXhCQyxFQUFBQSxTQUFTLEVBQUc7QUFOWSxDQUFSLENBQXBCO0FBU0EsSUFBSUMsYUFBYSxHQUFHUixFQUFFLENBQUNDLElBQUgsQ0FBUTtBQUN4QlEsRUFBQUEsUUFBUSxFQUFHLENBRGE7QUFFeEJDLEVBQUFBLFVBQVUsRUFBRTtBQUZZLENBQVIsQ0FB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ZXNDb250ZW50IjpbIi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXG4gQ29weXJpZ2h0IChjKSAyMDE3LTIwMTggWGlhbWVuIFlhamkgU29mdHdhcmUgQ28uLCBMdGQuXG5cbiBodHRwczovL3d3dy5jb2Nvcy5jb20vXG5cbiBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYSBjb3B5XG4gb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBlbmdpbmUgc291cmNlIGNvZGUgKHRoZSBcIlNvZnR3YXJlXCIpLCBhIGxpbWl0ZWQsXG4gd29ybGR3aWRlLCByb3lhbHR5LWZyZWUsIG5vbi1hc3NpZ25hYmxlLCByZXZvY2FibGUgYW5kIG5vbi1leGNsdXNpdmUgbGljZW5zZVxuIHRvIHVzZSBDb2NvcyBDcmVhdG9yIHNvbGVseSB0byBkZXZlbG9wIGdhbWVzIG9uIHlvdXIgdGFyZ2V0IHBsYXRmb3Jtcy4gWW91IHNoYWxsXG4gbm90IHVzZSBDb2NvcyBDcmVhdG9yIHNvZnR3YXJlIGZvciBkZXZlbG9waW5nIG90aGVyIHNvZnR3YXJlIG9yIHRvb2xzIHRoYXQnc1xuIHVzZWQgZm9yIGRldmVsb3BpbmcgZ2FtZXMuIFlvdSBhcmUgbm90IGdyYW50ZWQgdG8gcHVibGlzaCwgZGlzdHJpYnV0ZSxcbiBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbCBjb3BpZXMgb2YgQ29jb3MgQ3JlYXRvci5cblxuIFRoZSBzb2Z0d2FyZSBvciB0b29scyBpbiB0aGlzIExpY2Vuc2UgQWdyZWVtZW50IGFyZSBsaWNlbnNlZCwgbm90IHNvbGQuXG4gWGlhbWVuIFlhamkgU29mdHdhcmUgQ28uLCBMdGQuIHJlc2VydmVzIGFsbCByaWdodHMgbm90IGV4cHJlc3NseSBncmFudGVkIHRvIHlvdS5cblxuIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1MgT1JcbiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSxcbiBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTiBOTyBFVkVOVCBTSEFMTCBUSEVcbiBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSXG4gTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSxcbiBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOXG4gVEhFIFNPRlRXQVJFLlxuICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG5cblxudmFyIENvbXBvbmVudFR5cGUgPSBjYy5FbnVtKHtcbiAgICBOT05FIDogMCxcbiAgICBDSEVDS0JPWCA6IDEsXG4gICAgVEVYVF9BVExBUyA6IDIsXG4gICAgU0xJREVSX0JBUiA6IDMsXG4gICAgTElTVF9WSUVXIDogNCxcbiAgICBQQUdFX1ZJRVcgOiA1XG59KTtcblxudmFyIExpc3REaXJlY3Rpb24gPSBjYy5FbnVtKHtcbiAgICBWRVJUSUNBTCA6IDAsXG4gICAgSE9SSVpPTlRBTDogMVxufSk7XG5cbnZhciBWZXJ0aWNhbEFsaWduID0gY2MuRW51bSh7XG4gICAgVE9QIDogMCxcbiAgICBDRU5URVI6IDEsXG4gICAgQk9UVE9NOiAyXG59KTtcblxudmFyIEhvcml6b250YWxBbGlnbiA9IGNjLkVudW0oe1xuICAgIExFRlQgOiAwLFxuICAgIENFTlRFUjogMSxcbiAgICBSSUdIVDogMlxufSk7XG5cbnZhciBTdHVkaW9Db21wb25lbnQgPSBjYy5DbGFzcyh7XG4gICAgbmFtZTogJ2NjLlN0dWRpb0NvbXBvbmVudCcsXG4gICAgZXh0ZW5kczogY2MuQ29tcG9uZW50LFxuXG4gICAgZWRpdG9yOiBDQ19FRElUT1IgJiYge1xuICAgICAgICBpbnNwZWN0b3I6ICd1bnBhY2s6Ly9lbmdpbmUtZGV2L2V4dGVuc2lvbnMvY29jb3N0dWRpby9lZGl0b3Ivc3R1ZGlvLWNvbXBvbmVudC5qcydcbiAgICB9LFxuXG4gICAgcHJvcGVydGllczogQ0NfRURJVE9SICYmIHtcbiAgICAgICAgX3R5cGUgOiBDb21wb25lbnRUeXBlLk5PTkUsXG4gICAgICAgIHR5cGUgOiB7XG4gICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fdHlwZTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBzZXQ6IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICAgICAgICAgIHRoaXMuX3R5cGUgPSB2YWx1ZTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICByZWFkb25seTogdHJ1ZSxcbiAgICAgICAgICAgIHR5cGU6IENvbXBvbmVudFR5cGVcbiAgICAgICAgfSxcblxuICAgICAgICAvLyBwcm9wcyBmb3IgY2hlY2tib3hcbiAgICAgICAgX2NoZWNrTm9ybWFsQmFja0ZyYW1lOiBudWxsLFxuICAgICAgICBjaGVja05vcm1hbEJhY2tGcmFtZToge1xuICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2NoZWNrTm9ybWFsQmFja0ZyYW1lO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHNldDogZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fY2hlY2tOb3JtYWxCYWNrRnJhbWUgPSB2YWx1ZTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICByZWFkb25seTogdHJ1ZSxcbiAgICAgICAgICAgIHR5cGU6IGNjLlNwcml0ZUZyYW1lXG4gICAgICAgIH0sXG5cbiAgICAgICAgX2NoZWNrUHJlc3NlZEJhY2tGcmFtZTogbnVsbCxcbiAgICAgICAgY2hlY2tQcmVzc2VkQmFja0ZyYW1lOiB7XG4gICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fY2hlY2tQcmVzc2VkQmFja0ZyYW1lO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHNldDogZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fY2hlY2tQcmVzc2VkQmFja0ZyYW1lID0gdmFsdWU7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgcmVhZG9ubHk6IHRydWUsXG4gICAgICAgICAgICB0eXBlOiBjYy5TcHJpdGVGcmFtZVxuICAgICAgICB9LFxuXG4gICAgICAgIF9jaGVja0Rpc2FibGVCYWNrRnJhbWU6IG51bGwsXG4gICAgICAgIGNoZWNrRGlzYWJsZUJhY2tGcmFtZToge1xuICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2NoZWNrRGlzYWJsZUJhY2tGcmFtZTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBzZXQ6IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICAgICAgICAgIHRoaXMuX2NoZWNrRGlzYWJsZUJhY2tGcmFtZSA9IHZhbHVlO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHJlYWRvbmx5OiB0cnVlLFxuICAgICAgICAgICAgdHlwZTogY2MuU3ByaXRlRnJhbWVcbiAgICAgICAgfSxcblxuICAgICAgICBfY2hlY2tOb3JtYWxGcmFtZTogbnVsbCxcbiAgICAgICAgY2hlY2tOb3JtYWxGcmFtZToge1xuICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2NoZWNrTm9ybWFsRnJhbWU7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgc2V0OiBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9jaGVja05vcm1hbEZyYW1lID0gdmFsdWU7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgcmVhZG9ubHk6IHRydWUsXG4gICAgICAgICAgICB0eXBlOiBjYy5TcHJpdGVGcmFtZVxuICAgICAgICB9LFxuXG4gICAgICAgIF9jaGVja0Rpc2FibGVGcmFtZTogbnVsbCxcbiAgICAgICAgY2hlY2tEaXNhYmxlRnJhbWU6IHtcbiAgICAgICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9jaGVja0Rpc2FibGVGcmFtZTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBzZXQ6IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICAgICAgICAgIHRoaXMuX2NoZWNrRGlzYWJsZUZyYW1lID0gdmFsdWU7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgcmVhZG9ubHk6IHRydWUsXG4gICAgICAgICAgICB0eXBlOiBjYy5TcHJpdGVGcmFtZVxuICAgICAgICB9LFxuXG4gICAgICAgIGNoZWNrSW50ZXJhY3RhYmxlIDoge1xuICAgICAgICAgICAgcmVhZG9ubHk6IHRydWUsXG4gICAgICAgICAgICBkZWZhdWx0OiB0cnVlXG4gICAgICAgIH0sXG5cbiAgICAgICAgaXNDaGVja2VkIDoge1xuICAgICAgICAgICAgcmVhZG9ubHk6IHRydWUsXG4gICAgICAgICAgICBkZWZhdWx0OiB0cnVlXG4gICAgICAgIH0sXG5cbiAgICAgICAgLy8gcHJvcHMgZm9yIFRleHRBdGxhc1xuICAgICAgICBfYXRsYXNGcmFtZTogbnVsbCxcbiAgICAgICAgYXRsYXNGcmFtZToge1xuICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2F0bGFzRnJhbWU7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgc2V0OiBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9hdGxhc0ZyYW1lID0gdmFsdWU7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgcmVhZG9ubHk6IHRydWUsXG4gICAgICAgICAgICB0eXBlOiBjYy5TcHJpdGVGcmFtZVxuICAgICAgICB9LFxuXG4gICAgICAgIGZpcnN0Q2hhcjoge1xuICAgICAgICAgICAgcmVhZG9ubHk6IHRydWUsXG4gICAgICAgICAgICBkZWZhdWx0OiAnLidcbiAgICAgICAgfSxcblxuICAgICAgICBjaGFyV2lkdGg6IHtcbiAgICAgICAgICAgIHJlYWRvbmx5OiB0cnVlLFxuICAgICAgICAgICAgZGVmYXVsdDogMFxuICAgICAgICB9LFxuXG4gICAgICAgIGNoYXJIZWlnaHQ6IHtcbiAgICAgICAgICAgIHJlYWRvbmx5OiB0cnVlLFxuICAgICAgICAgICAgZGVmYXVsdDogMFxuICAgICAgICB9LFxuXG4gICAgICAgIHN0cmluZzoge1xuICAgICAgICAgICAgcmVhZG9ubHk6IHRydWUsXG4gICAgICAgICAgICBkZWZhdWx0OiAnJ1xuICAgICAgICB9LFxuXG4gICAgICAgIC8vIHByb3BzIGZvciBTbGlkZXJCYXJcbiAgICAgICAgX3NsaWRlckJhY2tGcmFtZTogbnVsbCxcbiAgICAgICAgc2xpZGVyQmFja0ZyYW1lIDoge1xuICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3NsaWRlckJhY2tGcmFtZTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBzZXQ6IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICAgICAgICAgIHRoaXMuX3NsaWRlckJhY2tGcmFtZSA9IHZhbHVlO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHJlYWRvbmx5OiB0cnVlLFxuICAgICAgICAgICAgdHlwZTogY2MuU3ByaXRlRnJhbWVcbiAgICAgICAgfSxcblxuICAgICAgICBfc2xpZGVyQmFyRnJhbWU6IG51bGwsXG4gICAgICAgIHNsaWRlckJhckZyYW1lIDoge1xuICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3NsaWRlckJhckZyYW1lO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHNldDogZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fc2xpZGVyQmFyRnJhbWUgPSB2YWx1ZTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICByZWFkb25seTogdHJ1ZSxcbiAgICAgICAgICAgIHR5cGU6IGNjLlNwcml0ZUZyYW1lXG4gICAgICAgIH0sXG5cbiAgICAgICAgX3NsaWRlckJ0bk5vcm1hbEZyYW1lOiBudWxsLFxuICAgICAgICBzbGlkZXJCdG5Ob3JtYWxGcmFtZSA6IHtcbiAgICAgICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9zbGlkZXJCdG5Ob3JtYWxGcmFtZTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBzZXQ6IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICAgICAgICAgIHRoaXMuX3NsaWRlckJ0bk5vcm1hbEZyYW1lID0gdmFsdWU7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgcmVhZG9ubHk6IHRydWUsXG4gICAgICAgICAgICB0eXBlOiBjYy5TcHJpdGVGcmFtZVxuICAgICAgICB9LFxuXG4gICAgICAgIF9zbGlkZXJCdG5QcmVzc2VkRnJhbWU6IG51bGwsXG4gICAgICAgIHNsaWRlckJ0blByZXNzZWRGcmFtZSA6IHtcbiAgICAgICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9zbGlkZXJCdG5QcmVzc2VkRnJhbWU7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgc2V0OiBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9zbGlkZXJCdG5QcmVzc2VkRnJhbWUgPSB2YWx1ZTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICByZWFkb25seTogdHJ1ZSxcbiAgICAgICAgICAgIHR5cGU6IGNjLlNwcml0ZUZyYW1lXG4gICAgICAgIH0sXG5cbiAgICAgICAgX3NsaWRlckJ0bkRpc2FibGVkRnJhbWU6IG51bGwsXG4gICAgICAgIHNsaWRlckJ0bkRpc2FibGVkRnJhbWUgOiB7XG4gICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fc2xpZGVyQnRuRGlzYWJsZWRGcmFtZTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBzZXQ6IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICAgICAgICAgIHRoaXMuX3NsaWRlckJ0bkRpc2FibGVkRnJhbWUgPSB2YWx1ZTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICByZWFkb25seTogdHJ1ZSxcbiAgICAgICAgICAgIHR5cGU6IGNjLlNwcml0ZUZyYW1lXG4gICAgICAgIH0sXG5cbiAgICAgICAgc2xpZGVySW50ZXJhY3RhYmxlIDoge1xuICAgICAgICAgICAgcmVhZG9ubHk6IHRydWUsXG4gICAgICAgICAgICBkZWZhdWx0OiB0cnVlXG4gICAgICAgIH0sXG5cbiAgICAgICAgc2xpZGVyUHJvZ3Jlc3M6IHtcbiAgICAgICAgICAgIGRlZmF1bHQ6IDAuNSxcbiAgICAgICAgICAgIHJlYWRvbmx5OiB0cnVlLFxuICAgICAgICAgICAgdHlwZTogY2MuRmxvYXQsXG4gICAgICAgICAgICByYW5nZTogWzAsIDEsIDAuMV1cbiAgICAgICAgfSxcblxuICAgICAgICAvLyBwcm9wcyBmb3IgTGlzdFZpZXdcbiAgICAgICAgbGlzdEluZXJ0aWE6ICB7XG4gICAgICAgICAgICByZWFkb25seTogdHJ1ZSxcbiAgICAgICAgICAgIGRlZmF1bHQ6IHRydWUsXG4gICAgICAgICAgICBhbmltYXRhYmxlOiBmYWxzZSxcbiAgICAgICAgICAgIHRvb2x0aXA6IENDX0RFViAmJiAnaTE4bjpDT01QT05FTlQuc2Nyb2xsdmlldy5pbmVydGlhJyxcbiAgICAgICAgfSxcblxuICAgICAgICBsaXN0RGlyZWN0aW9uOiB7XG4gICAgICAgICAgICByZWFkb25seTogdHJ1ZSxcbiAgICAgICAgICAgIGRlZmF1bHQ6IExpc3REaXJlY3Rpb24uVkVSVElDQUwsXG4gICAgICAgICAgICB0eXBlOiBMaXN0RGlyZWN0aW9uXG4gICAgICAgIH0sXG5cbiAgICAgICAgbGlzdEhvcml6b250YWxBbGlnbjoge1xuICAgICAgICAgICAgcmVhZG9ubHk6IHRydWUsXG4gICAgICAgICAgICBkZWZhdWx0OiBIb3Jpem9udGFsQWxpZ24uTEVGVCxcbiAgICAgICAgICAgIHR5cGU6IEhvcml6b250YWxBbGlnblxuICAgICAgICB9LFxuXG4gICAgICAgIGxpc3RWZXJ0aWNhbEFsaWduOiB7XG4gICAgICAgICAgICByZWFkb25seTogdHJ1ZSxcbiAgICAgICAgICAgIGRlZmF1bHQ6IFZlcnRpY2FsQWxpZ24uVE9QLFxuICAgICAgICAgICAgdHlwZTogVmVydGljYWxBbGlnblxuICAgICAgICB9LFxuXG4gICAgICAgIGxpc3RQYWRkaW5nOiB7XG4gICAgICAgICAgICByZWFkb25seTogdHJ1ZSxcbiAgICAgICAgICAgIGRlZmF1bHQ6IDBcbiAgICAgICAgfVxuICAgIH0sXG5cbiAgICBzdGF0aWNzIDoge1xuICAgICAgICBDb21wb25lbnRUeXBlIDogQ29tcG9uZW50VHlwZSxcbiAgICAgICAgTGlzdERpcmVjdGlvbiA6IExpc3REaXJlY3Rpb24sXG4gICAgICAgIFZlcnRpY2FsQWxpZ24gOiBWZXJ0aWNhbEFsaWduLFxuICAgICAgICBIb3Jpem9udGFsQWxpZ24gOiBIb3Jpem9udGFsQWxpZ25cbiAgICB9LFxufSk7XG5cbi8vIFRPRE86IG5lc3QgYnkgdGhlIGJ1aWx0LWluIG1hbm5lclxudmFyIFByZWZhYkhlbHBlciA9IHJlcXVpcmUoJy4uL3V0aWxzL3ByZWZhYi1oZWxwZXInKTtcblN0dWRpb0NvbXBvbmVudC5QbGFjZUhvbGRlciA9IGNjLkNsYXNzKHtcbiAgICBuYW1lOiAnY2MuU3R1ZGlvQ29tcG9uZW50LlBsYWNlSG9sZGVyJyxcbiAgICBleHRlbmRzOiBjYy5Db21wb25lbnQsXG4gICAgcHJvcGVydGllczoge1xuICAgICAgICBfYmFzZVVybDogJycsXG4gICAgICAgIG5lc3RlZFByZWZhYjogY2MuUHJlZmFiLFxuICAgIH0sXG4gICAgb25Mb2FkOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICghdGhpcy5uZXN0ZWRQcmVmYWIpIHtcbiAgICAgICAgICAgIGlmIChDQ19ERVYpIHtcbiAgICAgICAgICAgICAgICBjYy53YXJuKCdVbmFibGUgdG8gZmluZCAlcyByZXNvdXJjZS4nLCB0aGlzLl9iYXNlVXJsKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9yZXBsYWNlV2l0aE5lc3RlZFByZWZhYigpO1xuICAgIH0sXG4gICAgX3JlcGxhY2VXaXRoTmVzdGVkUHJlZmFiOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBub2RlID0gdGhpcy5ub2RlO1xuICAgICAgICB2YXIgX3ByZWZhYiA9IG5vZGUuX3ByZWZhYjtcbiAgICAgICAgX3ByZWZhYi5yb290ID0gbm9kZTtcbiAgICAgICAgX3ByZWZhYi5hc3NldCA9IHRoaXMubmVzdGVkUHJlZmFiO1xuICAgICAgICBQcmVmYWJIZWxwZXIuc3luY1dpdGhQcmVmYWIobm9kZSk7XG4gICAgfVxufSk7XG5cbmNjLlN0dWRpb0NvbXBvbmVudCA9IG1vZHVsZS5leHBvcnRzID0gU3R1ZGlvQ29tcG9uZW50O1xuXG5cbnZhciBTdHVkaW9XaWRnZXQgPSBjYy5DbGFzcyh7XG4gICAgbmFtZTogJ2NjLlN0dWRpb1dpZGdldCcsXG4gICAgZXh0ZW5kczogY2MuV2lkZ2V0LFxuICAgIGVkaXRvcjogQ0NfRURJVE9SICYmIHtcbiAgICAgICAgaW5zcGVjdG9yOiAncGFja2FnZXM6Ly9pbnNwZWN0b3IvaW5zcGVjdG9ycy9jb21wcy9jY3dpZGdldC5qcycsXG4gICAgfSxcbiAgICBfdmFsaWRhdGVUYXJnZXRJbkRFViAoKSB7fVxufSk7XG5cbmNjLlN0dWRpb1dpZGdldCA9IG1vZHVsZS5leHBvcnRzID0gU3R1ZGlvV2lkZ2V0O1xuXG5cbiJdLCJzb3VyY2VSb290IjoiLyJ9