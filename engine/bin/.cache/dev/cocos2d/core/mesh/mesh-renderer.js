
                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'engine-dev/cocos2d/core/mesh/mesh-renderer.js';
                    var __require = nodeEnv ? function (request) {
                        return require(request);
                    } : function (request) {
                        return __quick_compile_engine__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_engine__.registerModule(__filename, module);}"use strict";

exports.__esModule = true;
exports["default"] = void 0;

var _assembler = _interopRequireDefault(require("../renderer/assembler"));

var _gfx = _interopRequireDefault(require("../../renderer/gfx"));

var _vec = _interopRequireDefault(require("../value-types/vec3"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }

var MeshRenderer = require('./CCMeshRenderer');

var _tmp_vec3 = new _vec["default"]();

var MeshRendererAssembler = /*#__PURE__*/function (_Assembler) {
  _inheritsLoose(MeshRendererAssembler, _Assembler);

  function MeshRendererAssembler() {
    return _Assembler.apply(this, arguments) || this;
  }

  var _proto = MeshRendererAssembler.prototype;

  _proto.init = function init(renderComp) {
    _Assembler.prototype.init.call(this, renderComp);

    this._worldDatas = {};
    this._renderNode = null;
  };

  _proto.setRenderNode = function setRenderNode(node) {
    this._renderNode = node;
  };

  _proto.fillBuffers = function fillBuffers(comp, renderer) {
    if (!comp.mesh) return;

    comp.mesh._uploadData(); // update culling mask


    var isCullingMaskSame = renderer.cullingMask === comp.node._cullingMask;
    var enableAutoBatch = comp.enableAutoBatch;
    var materials = comp._materials;
    var submeshes = comp.mesh._subMeshes;
    var subDatas = comp.mesh.subDatas;

    for (var i = 0; i < submeshes.length; i++) {
      var ia = submeshes[i];
      var meshData = subDatas[i];
      var material = materials[i] || materials[0];

      if (!enableAutoBatch || !meshData.canBatch || ia._primitiveType !== _gfx["default"].PT_TRIANGLES) {
        renderer._flush();

        renderer.material = material;
        renderer.cullingMask = comp.node._cullingMask;
        renderer.node = this._renderNode;

        renderer._flushIA(ia);

        continue;
      }

      if (!isCullingMaskSame || material.getHash() !== renderer.material.getHash()) {
        renderer._flush();
      }

      renderer.material = material;
      renderer.cullingMask = comp.node._cullingMask;
      renderer.node = renderer._dummyNode;

      this._fillBuffer(comp, meshData, renderer, i);
    }

    if (CC_DEBUG && (cc.macro.SHOW_MESH_WIREFRAME || cc.macro.SHOW_MESH_NORMAL) && !(comp.node._cullingMask & 1 << cc.Node.BuiltinGroupIndex.DEBUG)) {
      renderer._flush();

      renderer.node = this._renderNode;

      comp._updateDebugDatas();

      if (cc.macro.SHOW_MESH_WIREFRAME) {
        this._drawDebugDatas(comp, renderer, 'wireFrame');
      }

      if (cc.macro.SHOW_MESH_NORMAL) {
        this._drawDebugDatas(comp, renderer, 'normal');
      }
    }
  };

  _proto._fillBuffer = function _fillBuffer(comp, meshData, renderer, dataIndex) {
    var vData = meshData.getVData(Float32Array);
    var vtxFormat = meshData.vfm;
    var vertexCount = vData.byteLength / vtxFormat._bytes | 0;
    var indices = meshData.getIData(Uint16Array);
    var indicesCount = indices.length;
    var buffer = renderer.getBuffer('mesh', vtxFormat);
    var offsetInfo = buffer.request(vertexCount, indicesCount); // buffer data may be realloc, need get reference after request.

    var indiceOffset = offsetInfo.indiceOffset,
        vertexOffset = offsetInfo.byteOffset >> 2,
        vertexId = offsetInfo.vertexOffset,
        vbuf = buffer._vData,
        ibuf = buffer._iData;

    if (renderer.worldMatDirty || !this._worldDatas[dataIndex]) {
      this._updateWorldVertices(dataIndex, vertexCount, vData, vtxFormat, comp.node._worldMatrix);
    }

    vbuf.set(this._worldDatas[dataIndex], vertexOffset);

    for (var i = 0; i < indicesCount; i++) {
      ibuf[indiceOffset + i] = vertexId + indices[i];
    }
  };

  _proto._updateWorldVertices = function _updateWorldVertices(dataIndex, vertexCount, local, vtxFormat, wolrdMatrix) {
    var world = this._worldDatas[dataIndex];

    if (!world) {
      world = this._worldDatas[dataIndex] = new Float32Array(local.length);
      world.set(local);
    }

    var floatCount = vtxFormat._bytes / 4;
    var elements = vtxFormat._elements;

    for (var i = 0, n = elements.length; i < n; i++) {
      var element = elements[i];
      var attrOffset = element.offset / 4;

      if (element.name === _gfx["default"].ATTR_POSITION || element.name === _gfx["default"].ATTR_NORMAL) {
        var transformMat4 = element.name === _gfx["default"].ATTR_NORMAL ? _vec["default"].transformMat4Normal : _vec["default"].transformMat4;

        for (var j = 0; j < vertexCount; j++) {
          var offset = j * floatCount + attrOffset;
          _tmp_vec3.x = local[offset];
          _tmp_vec3.y = local[offset + 1];
          _tmp_vec3.z = local[offset + 2];
          transformMat4(_tmp_vec3, _tmp_vec3, wolrdMatrix);
          world[offset] = _tmp_vec3.x;
          world[offset + 1] = _tmp_vec3.y;
          world[offset + 2] = _tmp_vec3.z;
        }
      }
    }
  };

  _proto._drawDebugDatas = function _drawDebugDatas(comp, renderer, name) {
    var debugDatas = comp._debugDatas[name];
    if (!debugDatas) return;

    for (var i = 0; i < debugDatas.length; i++) {
      var debugData = debugDatas[i];
      if (!debugData) continue;
      var material = debugData.material;
      renderer.material = material;

      renderer._flushIA(debugData.ia);
    }
  };

  return MeshRendererAssembler;
}(_assembler["default"]);

exports["default"] = MeshRendererAssembler;

_assembler["default"].register(MeshRenderer, MeshRendererAssembler);

module.exports = exports["default"];
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_engine__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,