
                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'engine-dev/cocos2d/core/value-types/trs.js';
                    var __require = nodeEnv ? function (request) {
                        return require(request);
                    } : function (request) {
                        return __quick_compile_engine__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_engine__.registerModule(__filename, module);}"use strict";

exports.__esModule = true;
exports["default"] = void 0;

var _quat = _interopRequireDefault(require("./quat"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

var tmp_quat = new _quat["default"]();

var Trs = /*#__PURE__*/function () {
  function Trs() {}

  Trs.toRotation = function toRotation(out, a) {
    out.x = a[3];
    out.y = a[4];
    out.z = a[5];
    out.w = a[6];
    return out;
  };

  Trs.fromRotation = function fromRotation(out, a) {
    out[3] = a.x;
    out[4] = a.y;
    out[5] = a.z;
    out[6] = a.w;
    return out;
  };

  Trs.toEuler = function toEuler(out, a) {
    Trs.toRotation(tmp_quat, a);

    _quat["default"].toEuler(out, tmp_quat);

    return out;
  };

  Trs.fromEuler = function fromEuler(out, a) {
    _quat["default"].fromEuler(tmp_quat, a.x, a.y, a.z);

    Trs.fromRotation(out, tmp_quat);
    return out;
  };

  Trs.fromEulerNumber = function fromEulerNumber(out, x, y, z) {
    _quat["default"].fromEuler(tmp_quat, x, y, z);

    Trs.fromRotation(out, tmp_quat);
    return out;
  };

  Trs.toScale = function toScale(out, a) {
    out.x = a[7];
    out.y = a[8];
    out.z = a[9];
    return out;
  };

  Trs.fromScale = function fromScale(out, a) {
    out[7] = a.x;
    out[8] = a.y;
    out[9] = a.z;
    return out;
  };

  Trs.toPosition = function toPosition(out, a) {
    out.x = a[0];
    out.y = a[1];
    out.z = a[2];
    return out;
  };

  Trs.fromPosition = function fromPosition(out, a) {
    out[0] = a.x;
    out[1] = a.y;
    out[2] = a.z;
    return out;
  };

  Trs.fromAngleZ = function fromAngleZ(out, a) {
    _quat["default"].fromAngleZ(tmp_quat, a);

    Trs.fromRotation(out, tmp_quat);
    return out;
  };

  Trs.toMat4 = function toMat4(out, trs) {
    var x = trs[3],
        y = trs[4],
        z = trs[5],
        w = trs[6];
    var x2 = x + x;
    var y2 = y + y;
    var z2 = z + z;
    var xx = x * x2;
    var xy = x * y2;
    var xz = x * z2;
    var yy = y * y2;
    var yz = y * z2;
    var zz = z * z2;
    var wx = w * x2;
    var wy = w * y2;
    var wz = w * z2;
    var sx = trs[7];
    var sy = trs[8];
    var sz = trs[9];
    var m = out.m;
    m[0] = (1 - (yy + zz)) * sx;
    m[1] = (xy + wz) * sx;
    m[2] = (xz - wy) * sx;
    m[3] = 0;
    m[4] = (xy - wz) * sy;
    m[5] = (1 - (xx + zz)) * sy;
    m[6] = (yz + wx) * sy;
    m[7] = 0;
    m[8] = (xz + wy) * sz;
    m[9] = (yz - wx) * sz;
    m[10] = (1 - (xx + yy)) * sz;
    m[11] = 0;
    m[12] = trs[0];
    m[13] = trs[1];
    m[14] = trs[2];
    m[15] = 1;
    return out;
  };

  return Trs;
}();

exports["default"] = Trs;
cc.Trs = Trs;
module.exports = exports["default"];
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_engine__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImVuZ2luZS1kZXYvY29jb3MyZC9jb3JlL3ZhbHVlLXR5cGVzL3Rycy50cyJdLCJuYW1lcyI6WyJ0bXBfcXVhdCIsIlF1YXQiLCJUcnMiLCJ0b1JvdGF0aW9uIiwib3V0IiwiYSIsIngiLCJ5IiwieiIsInciLCJmcm9tUm90YXRpb24iLCJ0b0V1bGVyIiwiZnJvbUV1bGVyIiwiZnJvbUV1bGVyTnVtYmVyIiwidG9TY2FsZSIsImZyb21TY2FsZSIsInRvUG9zaXRpb24iLCJmcm9tUG9zaXRpb24iLCJmcm9tQW5nbGVaIiwidG9NYXQ0IiwidHJzIiwieDIiLCJ5MiIsInoyIiwieHgiLCJ4eSIsInh6IiwieXkiLCJ5eiIsInp6Iiwid3giLCJ3eSIsInd6Iiwic3giLCJzeSIsInN6IiwibSIsImNjIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7O0FBQ0E7Ozs7QUFJQSxJQUFJQSxRQUFRLEdBQUcsSUFBSUMsZ0JBQUosRUFBZjs7SUFFcUJDOzs7TUFDVkMsYUFBUCxvQkFBbUJDLEdBQW5CLEVBQThCQyxDQUE5QixFQUFtRDtBQUMvQ0QsSUFBQUEsR0FBRyxDQUFDRSxDQUFKLEdBQVFELENBQUMsQ0FBQyxDQUFELENBQVQ7QUFDQUQsSUFBQUEsR0FBRyxDQUFDRyxDQUFKLEdBQVFGLENBQUMsQ0FBQyxDQUFELENBQVQ7QUFDQUQsSUFBQUEsR0FBRyxDQUFDSSxDQUFKLEdBQVFILENBQUMsQ0FBQyxDQUFELENBQVQ7QUFDQUQsSUFBQUEsR0FBRyxDQUFDSyxDQUFKLEdBQVFKLENBQUMsQ0FBQyxDQUFELENBQVQ7QUFDQSxXQUFPRCxHQUFQO0FBQ0g7O01BRU1NLGVBQVAsc0JBQXFCTixHQUFyQixFQUFzQ0MsQ0FBdEMsRUFBMkQ7QUFDdkRELElBQUFBLEdBQUcsQ0FBQyxDQUFELENBQUgsR0FBU0MsQ0FBQyxDQUFDQyxDQUFYO0FBQ0FGLElBQUFBLEdBQUcsQ0FBQyxDQUFELENBQUgsR0FBU0MsQ0FBQyxDQUFDRSxDQUFYO0FBQ0FILElBQUFBLEdBQUcsQ0FB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QUQsR0FBUWhCLEdBQUcsQ0FBQyxDQUFELENBQVg7QUFDQWdCLElBQUFBLENBQUMsQ0FBQyxFQUFELENBQUQsR0FBUSxDQUFSO0FBRUEsV0FBT2hDLEdBQVA7QUFDSDs7Ozs7O0FBR0xpQyxFQUFFLENBQUNuQyxHQUFILEdBQVNBLEdBQVQiLCJzb3VyY2VzQ29udGVudCI6WyJcbmltcG9ydCBRdWF0IGZyb20gJy4vcXVhdCc7XG5pbXBvcnQgVmVjMyBmcm9tICcuL3ZlYzMnO1xuaW1wb3J0IE1hdDQgZnJvbSAnLi9NYXQ0JztcblxubGV0IHRtcF9xdWF0ID0gbmV3IFF1YXQoKTtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgVHJzIHtcbiAgICBzdGF0aWMgdG9Sb3RhdGlvbiAob3V0OiBRdWF0LCBhOiBGbG9hdEFycmF5KTogUXVhdCB7XG4gICAgICAgIG91dC54ID0gYVszXTtcbiAgICAgICAgb3V0LnkgPSBhWzRdO1xuICAgICAgICBvdXQueiA9IGFbNV07XG4gICAgICAgIG91dC53ID0gYVs2XTtcbiAgICAgICAgcmV0dXJuIG91dDtcbiAgICB9XG5cbiAgICBzdGF0aWMgZnJvbVJvdGF0aW9uIChvdXQ6IEZsb2F0QXJyYXksIGE6IFF1YXQpOiBGbG9hdEFycmF5IHtcbiAgICAgICAgb3V0WzNdID0gYS54O1xuICAgICAgICBvdXRbNF0gPSBhLnk7XG4gICAgICAgIG91dFs1XSA9IGEuejtcbiAgICAgICAgb3V0WzZdID0gYS53O1xuICAgICAgICByZXR1cm4gb3V0O1xuICAgIH1cblxuICAgIHN0YXRpYyB0b0V1bGVyIChvdXQ6IFZlYzMsIGE6IEZsb2F0QXJyYXkpOiBWZWMzIHtcbiAgICAgICAgVHJzLnRvUm90YXRpb24odG1wX3F1YXQsIGEpO1xuICAgICAgICBRdWF0LnRvRXVsZXIob3V0LCB0bXBfcXVhdCk7XG4gICAgICAgIHJldHVybiBvdXQ7XG4gICAgfVxuXG4gICAgc3RhdGljIGZyb21FdWxlciAob3V0OiBGbG9hdEFycmF5LCBhOiBWZWMzKTogRmxvYXRBcnJheSB7XG4gICAgICAgIFF1YXQuZnJvbUV1bGVyKHRtcF9xdWF0LCBhLngsIGEueSwgYS56KTtcbiAgICAgICAgVHJzLmZyb21Sb3RhdGlvbihvdXQsIHRtcF9xdWF0KTtcbiAgICAgICAgcmV0dXJuIG91dDtcbiAgICB9XG5cbiAgICBzdGF0aWMgZnJvbUV1bGVyTnVtYmVyIChvdXQ6IEZsb2F0QXJyYXksIHg6IG51bWJlciwgeTogbnVtYmVyLCB6OiBudW1iZXIpOiBGbG9hdEFycmF5IHtcbiAgICAgICAgUXVhdC5mcm9tRXVsZXIodG1wX3F1YXQsIHgsIHksIHopO1xuICAgICAgICBUcnMuZnJvbVJvdGF0aW9uKG91dCwgdG1wX3F1YXQpO1xuICAgICAgICByZXR1cm4gb3V0O1xuICAgIH1cblxuICAgIHN0YXRpYyB0b1NjYWxlIChvdXQ6IFZlYzMsIGE6IEZsb2F0QXJyYXkpOiBWZWMzIHtcbiAgICAgICAgb3V0LnggPSBhWzddO1xuICAgICAgICBvdXQueSA9IGFbOF07XG4gICAgICAgIG91dC56ID0gYVs5XTtcbiAgICAgICAgcmV0dXJuIG91dDtcbiAgICB9XG5cbiAgICBzdGF0aWMgZnJvbVNjYWxlIChvdXQ6IEZsb2F0QXJyYXksIGE6IFZlYzMpOiBGbG9hdEFycmF5IHtcbiAgICAgICAgb3V0WzddID0gYS54O1xuICAgICAgICBvdXRbOF0gPSBhLnk7XG4gICAgICAgIG91dFs5XSA9IGEuejtcbiAgICAgICAgcmV0dXJuIG91dDtcbiAgICB9XG5cbiAgICBzdGF0aWMgdG9Qb3NpdGlvbiAob3V0OiBWZWMzLCBhOiBGbG9hdEFycmF5KTogVmVjMyB7XG4gICAgICAgIG91dC54ID0gYVswXTtcbiAgICAgICAgb3V0LnkgPSBhWzFdO1xuICAgICAgICBvdXQueiA9IGFbMl07XG4gICAgICAgIHJldHVybiBvdXQ7XG4gICAgfVxuXG4gICAgc3RhdGljIGZyb21Qb3NpdGlvbiAob3V0OiBGbG9hdEFycmF5LCBhOiBWZWMzKTogRmxvYXRBcnJheSB7XG4gICAgICAgIG91dFswXSA9IGEueDtcbiAgICAgICAgb3V0WzFdID0gYS55O1xuICAgICAgICBvdXRbMl0gPSBhLno7XG4gICAgICAgIHJldHVybiBvdXQ7XG4gICAgfVxuXG4gICAgc3RhdGljIGZyb21BbmdsZVogKG91dDogRmxvYXRBcnJheSwgYTogbnVtYmVyKTogRmxvYXRBcnJheSB7XG4gICAgICAgIFF1YXQuZnJvbUFuZ2xlWih0bXBfcXVhdCwgYSk7XG4gICAgICAgIFRycy5mcm9tUm90YXRpb24ob3V0LCB0bXBfcXVhdCk7XG4gICAgICAgIHJldHVybiBvdXQ7XG4gICAgfVxuXG4gICAgc3RhdGljIHRvTWF0NCAob3V0OiBNYXQ0LCB0cnM6IEZsb2F0QXJyYXkpOiBNYXQ0IHtcbiAgICAgICAgbGV0IHggPSB0cnNbM10sIHkgPSB0cnNbNF0sIHogPSB0cnNbNV0sIHcgPSB0cnNbNl07XG4gICAgICAgIGxldCB4MiA9IHggKyB4O1xuICAgICAgICBsZXQgeTIgPSB5ICsgeTtcbiAgICAgICAgbGV0IHoyID0geiArIHo7XG5cbiAgICAgICAgbGV0IHh4ID0geCAqIHgyO1xuICAgICAgICBsZXQgeHkgPSB4ICogeTI7XG4gICAgICAgIGxldCB4eiA9IHggKiB6MjtcbiAgICAgICAgbGV0IHl5ID0geSAqIHkyO1xuICAgICAgICBsZXQgeXogPSB5ICogejI7XG4gICAgICAgIGxldCB6eiA9IHogKiB6MjtcbiAgICAgICAgbGV0IHd4ID0gdyAqIHgyO1xuICAgICAgICBsZXQgd3kgPSB3ICogeTI7XG4gICAgICAgIGxldCB3eiA9IHcgKiB6MjtcbiAgICAgICAgbGV0IHN4ID0gdHJzWzddO1xuICAgICAgICBsZXQgc3kgPSB0cnNbOF07XG4gICAgICAgIGxldCBzeiA9IHRyc1s5XTtcblxuICAgICAgICBsZXQgbSA9IG91dC5tO1xuICAgICAgICBtWzBdID0gKDEgLSAoeXkgKyB6eikpICogc3g7XG4gICAgICAgIG1bMV0gPSAoeHkgKyB3eikgKiBzeDtcbiAgICAgICAgbVsyXSA9ICh4eiAtIHd5KSAqIHN4O1xuICAgICAgICBtWzNdID0gMDtcbiAgICAgICAgbVs0XSA9ICh4eSAtIHd6KSAqIHN5O1xuICAgICAgICBtWzVdID0gKDEgLSAoeHggKyB6eikpICogc3k7XG4gICAgICAgIG1bNl0gPSAoeXogKyB3eCkgKiBzeTtcbiAgICAgICAgbVs3XSA9IDA7XG4gICAgICAgIG1bOF0gPSAoeHogKyB3eSkgKiBzejtcbiAgICAgICAgbVs5XSA9ICh5eiAtIHd4KSAqIHN6O1xuICAgICAgICBtWzEwXSA9ICgxIC0gKHh4ICsgeXkpKSAqIHN6O1xuICAgICAgICBtWzExXSA9IDA7XG4gICAgICAgIG1bMTJdID0gdHJzWzBdO1xuICAgICAgICBtWzEzXSA9IHRyc1sxXTtcbiAgICAgICAgbVsxNF0gPSB0cnNbMl07XG4gICAgICAgIG1bMTVdID0gMTtcblxuICAgICAgICByZXR1cm4gb3V0O1xuICAgIH1cbn1cblxuY2MuVHJzID0gVHJzOyJdLCJzb3VyY2VSb290IjoiLyJ9