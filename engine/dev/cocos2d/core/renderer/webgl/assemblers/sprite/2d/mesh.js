
                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'engine-dev/cocos2d/core/renderer/webgl/assemblers/sprite/2d/mesh.js';
                    var __require = nodeEnv ? function (request) {
                        return require(request);
                    } : function (request) {
                        return __quick_compile_engine__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_engine__.registerModule(__filename, module);}"use strict";

exports.__esModule = true;
exports["default"] = void 0;

var _assembler2d = _interopRequireDefault(require("../../../../assembler-2d"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }

var MeshSpriteAssembler = /*#__PURE__*/function (_Assembler2D) {
  _inheritsLoose(MeshSpriteAssembler, _Assembler2D);

  function MeshSpriteAssembler() {
    return _Assembler2D.apply(this, arguments) || this;
  }

  var _proto = MeshSpriteAssembler.prototype;

  _proto.initData = function initData(sprite) {
    this._renderData.createFlexData(0, 4, 6, this.getVfmt());
  };

  _proto.updateRenderData = function updateRenderData(sprite) {
    this.packToDynamicAtlas(sprite, sprite._spriteFrame);
    var frame = sprite.spriteFrame;

    if (frame) {
      var vertices = frame.vertices;

      if (vertices) {
        this.verticesCount = vertices.x.length;
        this.indicesCount = vertices.triangles.length;
        var renderData = this._renderData;
        var flexBuffer = renderData._flexBuffer;

        if (flexBuffer.reserve(this.verticesCount, this.indicesCount)) {
          this.updateColor(sprite);
          sprite._vertsDirty = true;
        }

        flexBuffer.used(this.verticesCount, this.indicesCount);
        this.updateIndices(vertices.triangles);

        if (sprite._vertsDirty) {
          this.updateUVs(sprite);
          this.updateVerts(sprite);
          this.updateWorldVerts(sprite);
          sprite._vertsDirty = false;
        }
      }
    }
  };

  _proto.updateIndices = function updateIndices(triangles) {
    this._renderData.iDatas[0].set(triangles);
  };

  _proto.updateUVs = function updateUVs(sprite) {
    var vertices = sprite.spriteFrame.vertices,
        u = vertices.nu,
        v = vertices.nv;
    var uvOffset = this.uvOffset;
    var floatsPerVert = this.floatsPerVert;
    var verts = this._renderData.vDatas[0];

    for (var i = 0; i < u.length; i++) {
      var dstOffset = floatsPerVert * i + uvOffset;
      verts[dstOffset] = u[i];
      verts[dstOffset + 1] = v[i];
    }
  };

  _proto.updateVerts = function updateVerts(sprite) {
    var node = sprite.node,
        contentWidth = Math.abs(node.width),
        contentHeight = Math.abs(node.height),
        appx = node.anchorX * contentWidth,
        appy = node.anchorY * contentHeight;
    var frame = sprite.spriteFrame,
        vertices = frame.vertices,
        x = vertices.x,
        y = vertices.y,
        originalWidth = frame._originalSize.width,
        originalHeight = frame._originalSize.height,
        rectWidth = frame._rect.width,
        rectHeight = frame._rect.height,
        offsetX = frame._offset.x,
        offsetY = frame._offset.y,
        trimX = offsetX + (originalWidth - rectWidth) / 2,
        trimY = offsetY + (originalHeight - rectHeight) / 2;
    var scaleX = contentWidth / (sprite.trim ? rectWidth : originalWidth),
        scaleY = contentHeight / (sprite.trim ? rectHeight : originalHeight);
    var local = this._local;

    if (!sprite.trim) {
      for (var i = 0, l = x.length; i < l; i++) {
        var offset = i * 2;
        local[offset] = x[i] * scaleX - appx;
        local[offset + 1] = (originalHeight - y[i]) * scaleY - appy;
      }
    } else {
      for (var _i = 0, _l = x.length; _i < _l; _i++) {
        var _offset = _i * 2;

        local[_offset] = (x[_i] - trimX) * scaleX - appx;
        local[_offset + 1] = (originalHeight - y[_i] - trimY) * scaleY - appy;
      }
    }
  };

  _proto.updateWorldVerts = function updateWorldVerts(sprite) {
    var node = sprite.node;
    var matrix = node._worldMatrix;
    var matrixm = matrix.m;
    var a = matrixm[0],
        b = matrixm[1],
        c = matrixm[4],
        d = matrixm[5],
        tx = matrixm[12],
        ty = matrixm[13];
    var local = this._local;
    var world = this._renderData.vDatas[0];
    var floatsPerVert = this.floatsPerVert;

    for (var i = 0, l = this.verticesCount; i < l; i++) {
      var lx = local[i * 2];
      var ly = local[i * 2 + 1];
      world[floatsPerVert * i] = lx * a + ly * c + tx;
      world[floatsPerVert * i + 1] = lx * b + ly * d + ty;
    }
  };

  return MeshSpriteAssembler;
}(_assembler2d["default"]);

exports["default"] = MeshSpriteAssembler;
module.exports = exports["default"];
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_engine__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,