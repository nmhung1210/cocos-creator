
                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'engine-dev/cocos2d/core/asset-manager/releaseManager.js';
                    var __require = nodeEnv ? function (request) {
                        return require(request);
                    } : function (request) {
                        return __quick_compile_engine__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_engine__.registerModule(__filename, module);}"use strict";

/****************************************************************************
 Copyright (c) 2019 Xiamen Yaji Software Co., Ltd.

 https://www.cocos.com/

 Permission is hereby granted, free of charge, to any person obtaining a copy
 of this software and associated engine source code (the "Software"), a limited,
  worldwide, royalty-free, non-assignable, revocable and non-exclusive license
 to use Cocos Creator solely to develop games on your target platforms. You shall
  not use Cocos Creator software for developing other software or tools that's
  used for developing games. You are not granted to publish, distribute,
  sublicense, and/or sell copies of Cocos Creator.

 The software or tools in this License Agreement are licensed, not sold.
 Xiamen Yaji Software Co., Ltd. reserves all rights not expressly granted to you.

 THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 THE SOFTWARE.
 ****************************************************************************/
var dependUtil = require('./depend-util');

var Cache = require('./cache');

require('../assets/CCAsset');

var _require = require('./shared'),
    assets = _require.assets;

function visitAsset(asset, deps) {
  // Skip assets generated programmatically or by user (e.g. label texture)
  if (!asset._uuid) {
    return;
  }

  deps.push(asset._uuid);
}

function visitComponent(comp, deps) {
  var props = Object.getOwnPropertyNames(comp);

  for (var i = 0; i < props.length; i++) {
    var propName = props[i];
    if (propName === 'node' || propName === '__eventTargets') continue;
    var value = comp[propName];

    if (typeof value === 'object' && value) {
      if (Array.isArray(value)) {
        for (var j = 0; j < value.length; j++) {
          var val = value[j];

          if (val instanceof cc.Asset) {
            visitAsset(val, deps);
          }
        }
      } else if (!value.constructor || value.constructor === Object) {
        var keys = Object.getOwnPropertyNames(value);

        for (var _j = 0; _j < keys.length; _j++) {
          var _val = value[keys[_j]];

          if (_val instanceof cc.Asset) {
            visitAsset(_val, deps);
          }
        }
      } else if (value instanceof cc.Asset) {
        visitAsset(value, deps);
      }
    }
  }
}

var _temp = [];

function visitNode(node, deps) {
  for (var i = 0; i < node._components.length; i++) {
    visitComponent(node._components[i], deps);
  }

  for (var _i = 0; _i < node._children.length; _i++) {
    visitNode(node._children[_i], deps);
  }
}

function descendOpRef(asset, refs, exclude, op) {
  exclude.push(asset._uuid);
  var depends = dependUtil.getDeps(asset._uuid);

  for (var i = 0, l = depends.length; i < l; i++) {
    var dependAsset = assets.get(depends[i]);

    if (dependAsset) {
      var uuid = dependAsset._uuid;

      if (!(uuid in refs)) {
        refs[uuid] = dependAsset.refCount + op;
      } else {
        refs[uuid] += op;
      }

      if (exclude.includes(uuid)) continue;
      descendOpRef(dependAsset, refs, exclude, op);
    }
  }
}

function checkCircularReference(asset) {
  // check circular reference
  var refs = Object.create(null);
  refs[asset._uuid] = asset.refCount;
  descendOpRef(asset, refs, _temp, -1);
  _temp.length = 0;
  if (refs[asset._uuid] !== 0) return refs[asset._uuid];

  for (var uuid in refs) {
    if (refs[uuid] !== 0) {
      descendOpRef(assets.get(uuid), refs, _temp, 1);
    }
  }

  _temp.length = 0;
  return refs[asset._uuid];
}

var _persistNodeDeps = new Cache();

var _toDelete = new Cache();

var eventListener = false;

function freeAssets() {
  eventListener = false;

  _toDelete.forEach(function (asset) {
    releaseManager._free(asset);
  });

  _toDelete.clear();
}

var releaseManager = {
  init: function init() {
    _persistNodeDeps.clear();

    _toDelete.clear();
  },
  _addPersistNodeRef: function _addPersistNodeRef(node) {
    var deps = [];
    visitNode(node, deps);

    for (var i = 0, l = deps.length; i < l; i++) {
      var dependAsset = assets.get(deps[i]);

      if (dependAsset) {
        dependAsset.addRef();
      }
    }

    _persistNodeDeps.add(node.uuid, deps);
  },
  _removePersistNodeRef: function _removePersistNodeRef(node) {
    if (_persistNodeDeps.has(node.uuid)) {
      var deps = _persistNodeDeps.get(node.uuid);

      for (var i = 0, l = deps.length; i < l; i++) {
        var dependAsset = assets.get(deps[i]);

        if (dependAsset) {
          dependAsset.decRef();
        }
      }

      _persistNodeDeps.remove(node.uuid);
    }
  },
  // do auto release
  _autoRelease: function _autoRelease(oldScene, newScene, persistNodes) {
    // transfer refs from persist nodes to new scene
    for (var i = 0, l = persistNodes.length; i < l; i++) {
      var node = persistNodes[i];

      var sceneDeps = dependUtil._depends.get(newScene._id);

      var deps = _persistNodeDeps.get(node.uuid);

      for (var _i2 = 0, _l = deps.length; _i2 < _l; _i2++) {
        var dependAsset = assets.get(deps[_i2]);

        if (dependAsset) {
          dependAsset.addRef();
        }
      }

      if (sceneDeps) {
        !sceneDeps.persistDeps && (sceneDeps.persistDeps = []);
        sceneDeps.persistDeps.push.apply(sceneDeps.persistDeps, deps);
      }
    }

    if (oldScene) {
      var childs = dependUtil.getDeps(oldScene._id);

      for (var _i3 = 0, _l2 = childs.length; _i3 < _l2; _i3++) {
        var asset = assets.get(childs[_i3]);
        asset && asset.decRef(CC_TEST || oldScene.autoReleaseAssets);
      }

      var dependencies = dependUtil._depends.get(oldScene._id);

      if (dependencies && dependencies.persistDeps) {
        var persistDeps = dependencies.persistDeps;

        for (var _i4 = 0, _l3 = persistDeps.length; _i4 < _l3; _i4++) {
          var _asset = assets.get(persistDeps[_i4]);

          _asset && _asset.decRef(CC_TEST || oldScene.autoReleaseAssets);
        }
      }

      dependUtil.remove(oldScene._id);
    }
  },
  _free: function _free(asset, force) {
    _toDelete.remove(asset._uuid);

    if (!cc.isValid(asset, true)) return;

    if (!force) {
      if (asset.refCount > 0) {
        if (checkCircularReference(asset) > 0) return;
      }
    } // remove from cache


    assets.remove(asset._uuid);
    var depends = dependUtil.getDeps(asset._uuid);

    for (var i = 0, l = depends.length; i < l; i++) {
      var dependAsset = assets.get(depends[i]);

      if (dependAsset) {
        dependAsset.decRef(false);

        releaseManager._free(dependAsset, false);
      }
    }

    asset.destroy();
    dependUtil.remove(asset._uuid);
  },
  tryRelease: function tryRelease(asset, force) {
    if (!(asset instanceof cc.Asset)) return;

    if (force) {
      releaseManager._free(asset, force);
    } else {
      _toDelete.add(asset._uuid, asset);

      if (!eventListener) {
        eventListener = true;
        cc.director.once(cc.Director.EVENT_AFTER_DRAW, freeAssets);
      }
    }
  }
};
module.exports = releaseManager;
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_engine__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImVuZ2luZS1kZXYvY29jb3MyZC9jb3JlL2Fzc2V0LW1hbmFnZXIvcmVsZWFzZU1hbmFnZXIuanMiXSwibmFtZXMiOlsiZGVwZW5kVXRpbCIsInJlcXVpcmUiLCJDYWNoZSIsImFzc2V0cyIsInZpc2l0QXNzZXQiLCJhc3NldCIsImRlcHMiLCJfdXVpZCIsInB1c2giLCJ2aXNpdENvbXBvbmVudCIsImNvbXAiLCJwcm9wcyIsIk9iamVjdCIsImdldE93blByb3BlcnR5TmFtZXMiLCJpIiwibGVuZ3RoIiwicHJvcE5hbWUiLCJ2YWx1ZSIsIkFycmF5IiwiaXNBcnJheSIsImoiLCJ2YWwiLCJjYyIsIkFzc2V0IiwiY29uc3RydWN0b3IiLCJrZXlzIiwiX3RlbXAiLCJ2aXNpdE5vZGUiLCJub2RlIiwiX2NvbXBvbmVudHMiLCJfY2hpbGRyZW4iLCJkZXNjZW5kT3BSZWYiLCJyZWZzIiwiZXhjbHVkZSIsIm9wIiwiZGVwZW5kcyIsImdldERlcHMiLCJsIiwiZGVwZW5kQXNzZXQiLCJnZXQiLCJ1dWlkIiwicmVmQ291bnQiLCJpbmNsdWRlcyIsImNoZWNrQ2lyY3VsYXJSZWZlcmVuY2UiLCJjcmVhdGUiLCJfcGVyc2lzdE5vZGVEZXBzIiwiX3RvRGVsZXRlIiwiZXZlbnRMaXN0ZW5lciIsImZyZWVBc3NldHMiLCJmb3JFYWNoIiwicmVsZWFzZU1hbmFnZXIiLCJfZnJlZSIsImNsZWFyIiwiaW5pdCIsIl9hZGRQZXJzaXN0Tm9kZVJlZiIsImFkZFJlZiIsImFkZCIsIl9yZW1vdmVQZXJzaXN0Tm9kZVJlZiIsImhhcyIsImRlY1JlZiIsInJlbW92ZSIsIl9hdXRvUmVsZWFzZSIsIm9sZFNjZW5lIiwibmV3U2NlbmUiLCJwZXJzaXN0Tm9kZXMiLCJzY2VuZURlcHMiLCJfZGVwZW5kcyIsIl9pZCIsInBlcnNpc3REZXBzIiwiYXBwbHkiLCJjaGlsZHMiLCJDQ19URVNUIiwiYXV0b1JlbGVhc2VBc3NldHMiLCJkZXBlbmRlbmNpZXMiLCJmb3JjZSIsImlzVmFsaWQiLCJkZXN0cm95IiwidHJ5UmVsZWFzZSIsImRpcmVjdG9yIiwib25jZSIsIkRpcmVjdG9yIiwiRVZFTlRfQUZURVJfRFJBVyIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7QUFBQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBd0JBLElBQU1BLFVBQVUsR0FBR0MsT0FBTyxDQUFDLGVBQUQsQ0FBMUI7O0FBQ0EsSUFBTUMsS0FBSyxHQUFHRCxPQUFPLENBQUMsU0FBRCxDQUFyQjs7QUFDQUEsT0FBTyxDQUFDLG1CQUFELENBQVA7O2VBQ21CQSxPQUFPLENBQUMsVUFBRDtJQUFsQkUsa0JBQUFBOztBQUVSLFNBQVNDLFVBQVQsQ0FBcUJDLEtBQXJCLEVBQTRCQyxJQUE1QixFQUFrQztBQUM5QjtBQUNBLE1BQUksQ0FBQ0QsS0FBSyxDQUFDRSxLQUFYLEVBQWtCO0FBQ2Q7QUFDSDs7QUFDREQsRUFBQUEsSUFBSSxDQUFDRSxJQUFMLENBQVVILEtBQUssQ0FBQ0UsS0FBaEI7QUFDSDs7QUFFRCxTQUFTRSxjQUFULENBQXlCQyxJQUF6QixFQUErQkosSUFBL0IsRUFBcUM7QUFDakMsTUFBSUssS0FBSyxHQUFHQyxNQUFNLENBQUNDLG1CQUFQLENBQTJCSCxJQUEzQixDQUFaOztBQUNBLE9BQUssSUFBSUksQ0FBQyxHQUFHLENBQWIsRUFBZ0JBLENBQUMsR0FBR0gsS0FBSyxDQUFDSSxNQUExQixFQUFrQ0QsQ0FBQyxFQUFuQyxFQUF1QztBQUNuQyxRQUFJRSxRQUFRLEdBQUdMLEtBQUssQ0FBQ0csQ0FBRCxDQUFwQjtBQUNBLFFBQUlFLFFBQVEsS0FBSyxNQUFiLElBQXVCQSxRQUFRLEtBQUssZ0JBQXhDLEVBQTBEO0FBQzFELFFBQUlDLEtBQUssR0FBR1AsSUFBSSxDQUFDTSxRQUFELENBQWhCOztBQUNBLFFBQUksT0FBT0MsS0FBUCxLQUFpQixRQUFqQixJQUE2QkEsS0FBakMsRUFBd0M7QUFDcEMsVUFBSUMsS0FBSyxDQUFDQyxPQUFOLENBQWNGLEtBQWQsQ0FBSixFQUEw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b250ZW50IjpbIi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXG4gQ29weXJpZ2h0IChjKSAyMDE5IFhpYW1lbiBZYWppIFNvZnR3YXJlIENvLiwgTHRkLlxuXG4gaHR0cHM6Ly93d3cuY29jb3MuY29tL1xuXG4gUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGEgY29weVxuIG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZW5naW5lIHNvdXJjZSBjb2RlICh0aGUgXCJTb2Z0d2FyZVwiKSwgYSBsaW1pdGVkLFxuICB3b3JsZHdpZGUsIHJveWFsdHktZnJlZSwgbm9uLWFzc2lnbmFibGUsIHJldm9jYWJsZSBhbmQgbm9uLWV4Y2x1c2l2ZSBsaWNlbnNlXG4gdG8gdXNlIENvY29zIENyZWF0b3Igc29sZWx5IHRvIGRldmVsb3AgZ2FtZXMgb24geW91ciB0YXJnZXQgcGxhdGZvcm1zLiBZb3Ugc2hhbGxcbiAgbm90IHVzZSBDb2NvcyBDcmVhdG9yIHNvZnR3YXJlIGZvciBkZXZlbG9waW5nIG90aGVyIHNvZnR3YXJlIG9yIHRvb2xzIHRoYXQnc1xuICB1c2VkIGZvciBkZXZlbG9waW5nIGdhbWVzLiBZb3UgYXJlIG5vdCBncmFudGVkIHRvIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsXG4gIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsIGNvcGllcyBvZiBDb2NvcyBDcmVhdG9yLlxuXG4gVGhlIHNvZnR3YXJlIG9yIHRvb2xzIGluIHRoaXMgTGljZW5zZSBBZ3JlZW1lbnQgYXJlIGxpY2Vuc2VkLCBub3Qgc29sZC5cbiBYaWFtZW4gWWFqaSBTb2Z0d2FyZSBDby4sIEx0ZC4gcmVzZXJ2ZXMgYWxsIHJpZ2h0cyBub3QgZXhwcmVzc2x5IGdyYW50ZWQgdG8geW91LlxuXG4gVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUlxuIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLFxuIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRVxuIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVJcbiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLFxuIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU5cbiBUSEUgU09GVFdBUkUuXG4gKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbmNvbnN0IGRlcGVuZFV0aWwgPSByZXF1aXJlKCcuL2RlcGVuZC11dGlsJyk7XG5jb25zdCBDYWNoZSA9IHJlcXVpcmUoJy4vY2FjaGUnKTtcbnJlcXVpcmUoJy4uL2Fzc2V0cy9DQ0Fzc2V0Jyk7XG5jb25zdCB7IGFzc2V0cyB9ID0gcmVxdWlyZSgnLi9zaGFyZWQnKTtcblxuZnVuY3Rpb24gdmlzaXRBc3NldCAoYXNzZXQsIGRlcHMpIHtcbiAgICAvLyBTa2lwIGFzc2V0cyBnZW5lcmF0ZWQgcHJvZ3JhbW1hdGljYWxseSBvciBieSB1c2VyIChlLmcuIGxhYmVsIHRleHR1cmUpXG4gICAgaWYgKCFhc3NldC5fdXVpZCkge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIGRlcHMucHVzaChhc3NldC5fdXVpZCk7XG59XG5cbmZ1bmN0aW9uIHZpc2l0Q29tcG9uZW50IChjb21wLCBkZXBzKSB7XG4gICAgdmFyIHByb3BzID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMoY29tcCk7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykge1xuICAgICAgICB2YXIgcHJvcE5hbWUgPSBwcm9wc1tpXTtcbiAgICAgICAgaWYgKHByb3BOYW1lID09PSAnbm9kZScgfHwgcHJvcE5hbWUgPT09ICdfX2V2ZW50VGFyZ2V0cycpIGNvbnRpbnVlO1xuICAgICAgICB2YXIgdmFsdWUgPSBjb21wW3Byb3BOYW1lXTtcbiAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcgJiYgdmFsdWUpIHtcbiAgICAgICAgICAgIGlmIChBcnJheS5pc0FycmF5KHZhbHVlKSkge1xuICAgICAgICAgICAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgdmFsdWUubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgICAgICAgICAgICAgbGV0IHZhbCA9IHZhbHVlW2pdO1xuICAgICAgICAgICAgICAgICAgICBpZiAodmFsIGluc3RhbmNlb2YgY2MuQXNzZXQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZpc2l0QXNzZXQodmFsLCBkZXBzKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKCF2YWx1ZS5jb25zdHJ1Y3RvciB8fCB2YWx1ZS5jb25zdHJ1Y3RvciA9PT0gT2JqZWN0KSB7XG4gICAgICAgICAgICAgICAgbGV0IGtleXMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyh2YWx1ZSk7XG4gICAgICAgICAgICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCBrZXlzLmxlbmd0aDsgaisrKSB7XG4gICAgICAgICAgICAgICAgICAgIGxldCB2YWwgPSB2YWx1ZVtrZXlzW2pdXTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHZhbCBpbnN0YW5jZW9mIGNjLkFzc2V0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2aXNpdEFzc2V0KHZhbCwgZGVwcyk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmICh2YWx1ZSBpbnN0YW5jZW9mIGNjLkFzc2V0KSB7XG4gICAgICAgICAgICAgICAgdmlzaXRBc3NldCh2YWx1ZSwgZGVwcyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG59XG5cbmxldCBfdGVtcCA9IFtdO1xuXG5mdW5jdGlvbiB2aXNpdE5vZGUgKG5vZGUsIGRlcHMpIHtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IG5vZGUuX2NvbXBvbmVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdmlzaXRDb21wb25lbnQobm9kZS5fY29tcG9uZW50c1tpXSwgZGVwcyk7XG4gICAgfVxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbm9kZS5fY2hpbGRyZW4ubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdmlzaXROb2RlKG5vZGUuX2NoaWxkcmVuW2ldLCBkZXBzKTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIGRlc2NlbmRPcFJlZiAoYXNzZXQsIHJlZnMsIGV4Y2x1ZGUsIG9wKSB7XG4gICAgZXhjbHVkZS5wdXNoKGFzc2V0Ll91dWlkKTtcbiAgICB2YXIgZGVwZW5kcyA9IGRlcGVuZFV0aWwuZ2V0RGVwcyhhc3NldC5fdXVpZCk7XG4gICAgZm9yIChsZXQgaSA9IDAsIGwgPSBkZXBlbmRzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgICB2YXIgZGVwZW5kQXNzZXQgPSBhc3NldHMuZ2V0KGRlcGVuZHNbaV0pO1xuICAgICAgICBpZiAoZGVwZW5kQXNzZXQpIHtcbiAgICAgICAgICAgIGxldCB1dWlkID0gZGVwZW5kQXNzZXQuX3V1aWQ7XG4gICAgICAgICAgICBpZiAoISh1dWlkIGluIHJlZnMpKSB7IFxuICAgICAgICAgICAgICAgIHJlZnNbdXVpZF0gPSBkZXBlbmRBc3NldC5yZWZDb3VudCArIG9wO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgcmVmc1t1dWlkXSArPSBvcDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChleGNsdWRlLmluY2x1ZGVzKHV1aWQpKSBjb250aW51ZTsgXG4gICAgICAgICAgICBkZXNjZW5kT3BSZWYoZGVwZW5kQXNzZXQsIHJlZnMsIGV4Y2x1ZGUsIG9wKTtcbiAgICAgICAgfVxuICAgIH1cbn1cblxuZnVuY3Rpb24gY2hlY2tDaXJjdWxhclJlZmVyZW5jZSAoYXNzZXQpIHtcbiAgICAvLyBjaGVjayBjaXJjdWxhciByZWZlcmVuY2VcbiAgICB2YXIgcmVmcyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgcmVmc1thc3NldC5fdXVpZF0gPSBhc3NldC5yZWZDb3VudDtcbiAgICBkZXNjZW5kT3BSZWYoYXNzZXQsIHJlZnMsIF90ZW1wLCAtMSk7XG4gICAgX3RlbXAubGVuZ3RoID0gMDtcbiAgICBpZiAocmVmc1thc3NldC5fdXVpZF0gIT09IDApIHJldHVybiByZWZzW2Fzc2V0Ll91dWlkXTtcblxuICAgIGZvciAobGV0IHV1aWQgaW4gcmVmcykge1xuICAgICAgICBpZiAocmVmc1t1dWlkXSAhPT0gMCkge1xuICAgICAgICAgICAgZGVzY2VuZE9wUmVmKGFzc2V0cy5nZXQodXVpZCksIHJlZnMsIF90ZW1wLCAxKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBfdGVtcC5sZW5ndGggPSAwO1xuXG4gICAgcmV0dXJuIHJlZnNbYXNzZXQuX3V1aWRdO1xufVxuXG52YXIgX3BlcnNpc3ROb2RlRGVwcyA9IG5ldyBDYWNoZSgpO1xudmFyIF90b0RlbGV0ZSA9IG5ldyBDYWNoZSgpO1xudmFyIGV2ZW50TGlzdGVuZXIgPSBmYWxzZTtcblxuZnVuY3Rpb24gZnJlZUFzc2V0cyAoKSB7XG4gICAgZXZlbnRMaXN0ZW5lciA9IGZhbHNlO1xuICAgIF90b0RlbGV0ZS5mb3JFYWNoKGZ1bmN0aW9uIChhc3NldCkge1xuICAgICAgICByZWxlYXNlTWFuYWdlci5fZnJlZShhc3NldCk7XG4gICAgfSk7XG4gICAgX3RvRGVsZXRlLmNsZWFyKCk7XG59XG5cbnZhciByZWxlYXNlTWFuYWdlciA9IHtcbiAgICBpbml0ICgpIHtcbiAgICAgICAgX3BlcnNpc3ROb2RlRGVwcy5jbGVhcigpO1xuICAgICAgICBfdG9EZWxldGUuY2xlYXIoKTtcbiAgICB9LFxuXG4gICAgX2FkZFBlcnNpc3ROb2RlUmVmIChub2RlKSB7XG4gICAgICAgIHZhciBkZXBzID0gW107XG4gICAgICAgIHZpc2l0Tm9kZShub2RlLCBkZXBzKTtcbiAgICAgICAgZm9yIChsZXQgaSA9IDAsIGwgPSBkZXBzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgICAgICAgdmFyIGRlcGVuZEFzc2V0ID0gYXNzZXRzLmdldChkZXBzW2ldKTtcbiAgICAgICAgICAgIGlmIChkZXBlbmRBc3NldCkge1xuICAgICAgICAgICAgICAgIGRlcGVuZEFzc2V0LmFkZFJlZigpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIF9wZXJzaXN0Tm9kZURlcHMuYWRkKG5vZGUudXVpZCwgZGVwcyk7XG4gICAgfSxcblxuICAgIF9yZW1vdmVQZXJzaXN0Tm9kZVJlZiAobm9kZSkge1xuICAgICAgICBpZiAoX3BlcnNpc3ROb2RlRGVwcy5oYXMobm9kZS51dWlkKSkge1xuICAgICAgICAgICAgdmFyIGRlcHMgPSBfcGVyc2lzdE5vZGVEZXBzLmdldChub2RlLnV1aWQpO1xuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDAsIGwgPSBkZXBzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgICAgICAgICAgIHZhciBkZXBlbmRBc3NldCA9IGFzc2V0cy5nZXQoZGVwc1tpXSk7XG4gICAgICAgICAgICAgICAgaWYgKGRlcGVuZEFzc2V0KSB7XG4gICAgICAgICAgICAgICAgICAgIGRlcGVuZEFzc2V0LmRlY1JlZigpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIF9wZXJzaXN0Tm9kZURlcHMucmVtb3ZlKG5vZGUudXVpZCk7XG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgLy8gZG8gYXV0byByZWxlYXNlXG4gICAgX2F1dG9SZWxlYXNlIChvbGRTY2VuZSwgbmV3U2NlbmUsIHBlcnNpc3ROb2RlcykgeyBcblxuICAgICAgICAvLyB0cmFuc2ZlciByZWZzIGZyb20gcGVyc2lzdCBub2RlcyB0byBuZXcgc2NlbmVcbiAgICAgICAgZm9yIChsZXQgaSA9IDAsIGwgPSBwZXJzaXN0Tm9kZXMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgICAgICB2YXIgbm9kZSA9IHBlcnNpc3ROb2Rlc1tpXTtcbiAgICAgICAgICAgIHZhciBzY2VuZURlcHMgPSBkZXBlbmRVdGlsLl9kZXBlbmRzLmdldChuZXdTY2VuZS5faWQpO1xuICAgICAgICAgICAgdmFyIGRlcHMgPSBfcGVyc2lzdE5vZGVEZXBzLmdldChub2RlLnV1aWQpO1xuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDAsIGwgPSBkZXBzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgICAgICAgICAgIHZhciBkZXBlbmRBc3NldCA9IGFzc2V0cy5nZXQoZGVwc1tpXSk7XG4gICAgICAgICAgICAgICAgaWYgKGRlcGVuZEFzc2V0KSB7XG4gICAgICAgICAgICAgICAgICAgIGRlcGVuZEFzc2V0LmFkZFJlZigpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChzY2VuZURlcHMpIHtcbiAgICAgICAgICAgICAgICAhc2NlbmVEZXBzLnBlcnNpc3REZXBzICYmIChzY2VuZURlcHMucGVyc2lzdERlcHMgPSBbXSk7XG4gICAgICAgICAgICAgICAgc2NlbmVEZXBzLnBlcnNpc3REZXBzLnB1c2guYXBwbHkoc2NlbmVEZXBzLnBlcnNpc3REZXBzLCBkZXBzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChvbGRTY2VuZSkge1xuICAgICAgICAgICAgdmFyIGNoaWxkcyA9IGRlcGVuZFV0aWwuZ2V0RGVwcyhvbGRTY2VuZS5faWQpO1xuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDAsIGwgPSBjaGlsZHMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgbGV0IGFzc2V0ID0gYXNzZXRzLmdldChjaGlsZHNbaV0pO1xuICAgICAgICAgICAgICAgIGFzc2V0ICYmIGFzc2V0LmRlY1JlZihDQ19URVNUIHx8IG9sZFNjZW5lLmF1dG9SZWxlYXNlQXNzZXRzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciBkZXBlbmRlbmNpZXMgPSBkZXBlbmRVdGlsLl9kZXBlbmRzLmdldChvbGRTY2VuZS5faWQpO1xuICAgICAgICAgICAgaWYgKGRlcGVuZGVuY2llcyAmJiBkZXBlbmRlbmNpZXMucGVyc2lzdERlcHMpIHtcbiAgICAgICAgICAgICAgICB2YXIgcGVyc2lzdERlcHMgPSBkZXBlbmRlbmNpZXMucGVyc2lzdERlcHM7XG4gICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDAsIGwgPSBwZXJzaXN0RGVwcy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgbGV0IGFzc2V0ID0gYXNzZXRzLmdldChwZXJzaXN0RGVwc1tpXSk7XG4gICAgICAgICAgICAgICAgICAgIGFzc2V0ICYmIGFzc2V0LmRlY1JlZihDQ19URVNUIHx8IG9sZFNjZW5lLmF1dG9SZWxlYXNlQXNzZXRzKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBkZXBlbmRVdGlsLnJlbW92ZShvbGRTY2VuZS5faWQpO1xuICAgICAgICB9XG4gICAgfSxcblxuICAgIF9mcmVlIChhc3NldCwgZm9yY2UpIHtcbiAgICAgICAgX3RvRGVsZXRlLnJlbW92ZShhc3NldC5fdXVpZCk7XG5cbiAgICAgICAgaWYgKCFjYy5pc1ZhbGlkKGFzc2V0LCB0cnVlKSkgcmV0dXJuO1xuXG4gICAgICAgIGlmICghZm9yY2UpIHtcbiAgICAgICAgICAgIGlmIChhc3NldC5yZWZDb3VudCA+IDApIHtcbiAgICAgICAgICAgICAgICBpZiAoY2hlY2tDaXJjdWxhclJlZmVyZW5jZShhc3NldCkgPiAwKSByZXR1cm47IFxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgXG4gICAgICAgIC8vIHJlbW92ZSBmcm9tIGNhY2hlXG4gICAgICAgIGFzc2V0cy5yZW1vdmUoYXNzZXQuX3V1aWQpO1xuICAgICAgICB2YXIgZGVwZW5kcyA9IGRlcGVuZFV0aWwuZ2V0RGVwcyhhc3NldC5fdXVpZCk7XG4gICAgICAgIGZvciAobGV0IGkgPSAwLCBsID0gZGVwZW5kcy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgICAgICAgIHZhciBkZXBlbmRBc3NldCA9IGFzc2V0cy5nZXQoZGVwZW5kc1tpXSk7XG4gICAgICAgICAgICBpZiAoZGVwZW5kQXNzZXQpIHtcbiAgICAgICAgICAgICAgICBkZXBlbmRBc3NldC5kZWNSZWYoZmFsc2UpO1xuICAgICAgICAgICAgICAgIHJlbGVhc2VNYW5hZ2VyLl9mcmVlKGRlcGVuZEFzc2V0LCBmYWxzZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgYXNzZXQuZGVzdHJveSgpO1xuICAgICAgICBkZXBlbmRVdGlsLnJlbW92ZShhc3NldC5fdXVpZCk7XG4gICAgfSxcblxuICAgIHRyeVJlbGVhc2UgKGFzc2V0LCBmb3JjZSkge1xuICAgICAgICBpZiAoIShhc3NldCBpbnN0YW5jZW9mIGNjLkFzc2V0KSkgcmV0dXJuO1xuICAgICAgICBpZiAoZm9yY2UpIHtcbiAgICAgICAgICAgIHJlbGVhc2VNYW5hZ2VyLl9mcmVlKGFzc2V0LCBmb3JjZSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBfdG9EZWxldGUuYWRkKGFzc2V0Ll91dWlkLCBhc3NldCk7XG4gICAgICAgICAgICBpZiAoIWV2ZW50TGlzdGVuZXIpIHtcbiAgICAgICAgICAgICAgICBldmVudExpc3RlbmVyID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICBjYy5kaXJlY3Rvci5vbmNlKGNjLkRpcmVjdG9yLkVWRU5UX0FGVEVSX0RSQVcsIGZyZWVBc3NldHMpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSByZWxlYXNlTWFuYWdlcjsiXSwic291cmNlUm9vdCI6Ii8ifQ==