
                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'engine-dev/cocos2d/core/asset-manager/utilities.js';
                    var __require = nodeEnv ? function (request) {
                        return require(request);
                    } : function (request) {
                        return __quick_compile_engine__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_engine__.registerModule(__filename, module);}"use strict";

/****************************************************************************
 Copyright (c) 2019 Xiamen Yaji Software Co., Ltd.

 https://www.cocos.com/

 Permission is hereby granted, free of charge, to any person obtaining a copy
 of this software and associated engine source code (the "Software"), a limited,
  worldwide, royalty-free, non-assignable, revocable and non-exclusive license
 to use Cocos Creator solely to develop games on your target platforms. You shall
  not use Cocos Creator software for developing other software or tools that's
  used for developing games. You are not granted to publish, distribute,
  sublicense, and/or sell copies of Cocos Creator.

 The software or tools in this License Agreement are licensed, not sold.
 Xiamen Yaji Software Co., Ltd. reserves all rights not expressly granted to you.

 THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 THE SOFTWARE.
 ****************************************************************************/
var dependUtil = require('./depend-util');

var _require = require('./helper'),
    isScene = _require.isScene,
    decodeUuid = _require.decodeUuid;

var _require2 = require('./shared'),
    assets = _require2.assets;

var _require3 = require('../platform/utils'),
    callInNextTick = _require3.callInNextTick;

var MissingObjectReporter = CC_EDITOR && Editor.require('app://editor/page/scene-utils/missing-object-reporter');

require('../assets/CCAsset');

var utils = {
  processOptions: function processOptions(options) {
    if (CC_EDITOR) return;
    var uuids = options.uuids;
    var paths = options.paths;
    var types = options.types;
    var bundles = options.deps;
    var realEntries = options.paths = Object.create(null);

    if (options.debug === false) {
      for (var i = 0, l = uuids.length; i < l; i++) {
        uuids[i] = decodeUuid(uuids[i]);
      }

      for (var id in paths) {
        var entry = paths[id];
        var type = entry[1];
        entry[1] = types[type];
      }
    } else {
      var out = Object.create(null);

      for (var _i = 0, _l = uuids.length; _i < _l; _i++) {
        var uuid = uuids[_i];
        uuids[_i] = out[uuid] = decodeUuid(uuid);
      }

      uuids = out;
    }

    for (var _id in paths) {
      var _entry = paths[_id];
      realEntries[uuids[_id]] = _entry;
    }

    var scenes = options.scenes;

    for (var name in scenes) {
      var _uuid = scenes[name];
      scenes[name] = uuids[_uuid];
    }

    var packs = options.packs;

    for (var packId in packs) {
      var packedIds = packs[packId];

      for (var j = 0; j < packedIds.length; ++j) {
        packedIds[j] = uuids[packedIds[j]];
      }
    }

    var versions = options.versions;

    if (versions) {
      for (var folder in versions) {
        var entries = versions[folder];

        for (var _i2 = 0; _i2 < entries.length; _i2 += 2) {
          var _uuid2 = entries[_i2];
          entries[_i2] = uuids[_uuid2] || _uuid2;
        }
      }
    }

    var redirect = options.redirect;

    if (redirect) {
      for (var _i3 = 0; _i3 < redirect.length; _i3 += 2) {
        redirect[_i3] = uuids[redirect[_i3]];
        redirect[_i3 + 1] = bundles[redirect[_i3 + 1]];
      }
    }
  },
  clear: function clear(task, clearRef) {
    for (var i = 0, l = task.input.length; i < l; i++) {
      var item = task.input[i];

      if (clearRef) {
        !item.isNative && item.content && item.content.decRef && item.content.decRef(false);
      }

      item.recycle();
    }

    task.input = null;
  },
  urlAppendTimestamp: function urlAppendTimestamp(url) {
    if (cc.assetManager.downloader.appendTimeStamp && typeof url === 'string') {
      if (/\?/.test(url)) return url + '&_t=' + (new Date() - 0);else return url + '?_t=' + (new Date() - 0);
    }

    return url;
  },
  retry: function retry(process, times, wait, onComplete, index) {
    index = index || 0;
    process(index, function (err, result) {
      index++;

      if (!err || index > times) {
        onComplete && onComplete(err, result);
      } else {
        setTimeout(function () {
          utils.retry(process, times, wait, onComplete, index);
        }, wait);
      }
    });
  },
  getDepends: function getDepends(uuid, data, exclude, depends, preload, asyncLoadAssets, config) {
    var err = null;

    try {
      var info = dependUtil.parse(uuid, data);
      var includeNative = true;
      if (data instanceof cc.Asset && (!data.__nativeDepend__ || data._nativeAsset)) includeNative = false;

      if (!preload) {
        asyncLoadAssets = !CC_EDITOR && (!!data.asyncLoadAssets || asyncLoadAssets && !info.preventDeferredLoadDependents);

        for (var i = 0, l = info.deps.length; i < l; i++) {
          var dep = info.deps[i];

          if (!(dep in exclude)) {
            exclude[dep] = true;
            depends.push({
              uuid: dep,
              __asyncLoadAssets__: asyncLoadAssets,
              bundle: config && config.name
            });
          }
        }

        if (includeNative && !asyncLoadAssets && !info.preventPreloadNativeObject && info.nativeDep) {
          config && (info.nativeDep.bundle = config.name);
          depends.push(Object.assign({}, info.nativeDep));
        }
      } else {
        for (var _i4 = 0, _l2 = info.deps.length; _i4 < _l2; _i4++) {
          var _dep = info.deps[_i4];

          if (!(_dep in exclude)) {
            exclude[_dep] = true;
            depends.push({
              uuid: _dep,
              bundle: config && config.name
            });
          }
        }

        if (includeNative && info.nativeDep) {
          config && (info.nativeDep.bundle = config.name);
          depends.push(Object.assign({}, info.nativeDep));
        }
      }
    } catch (e) {
      err = e;
    }

    return err;
  },
  cache: function cache(id, asset, cacheAsset) {
    if (!asset) return;

    var _isScene = isScene(asset);

    if (!_isScene && cacheAsset) {
      assets.add(id, asset);
    }

    if (_isScene) {
      if (CC_EDITOR && !asset.scene) {
        Editor.error('Sorry, the scene data of "%s" is corrupted!', asset._uuid);
      }
    }
  },
  setProperties: function setProperties(uuid, asset, assetsMap) {
    var missingAsset = false;
    var depends = asset.__depends__;

    if (depends) {
      var missingAssetReporter = null;

      for (var i = 0, l = depends.length; i < l; i++) {
        var depend = depends[i];
        var dependAsset = assetsMap[depend.uuid + '@import'];

        if (!dependAsset) {
          if (CC_EDITOR) {
            !missingAssetReporter && (missingAssetReporter = new MissingObjectReporter(asset));
            missingAssetReporter.stashByOwner(depend.owner, depend.prop, Editor.serialize.asAsset(depend.uuid));
          } else {
            cc.error('The asset ' + depend.uuid + ' is missing!');
          }

          missingAsset = true;
        } else {
          depend.owner[depend.prop] = dependAsset.addRef();
        }
      }

      missingAssetReporter && missingAssetReporter.reportByOwner();
      asset.__depends__ = undefined;
    }

    if (asset.__nativeDepend__) {
      if (!asset._nativeAsset) {
        if (assetsMap[uuid + '@native']) {
          asset._nativeAsset = assetsMap[uuid + '@native'];
        } else {
          missingAsset = true;

          if (CC_EDITOR) {
            console.error("the native asset of " + uuid + " is missing!");
          }
        }
      }

      asset.__nativeDepend__ = undefined;
    }

    return missingAsset;
  },
  gatherAsset: function gatherAsset(task) {
    var source = task.source;

    if (!task.options.__outputAsArray__ && source.length === 1) {
      task.output = source[0].content;
    } else {
      var output = task.output = [];

      for (var i = 0, l = source.length; i < l; i++) {
        output.push(source[i].content);
      }
    }
  },
  forEach: function forEach(array, process, onComplete) {
    var count = 0;
    var errs = [];
    if (array.length === 0) onComplete && onComplete(errs);

    for (var i = 0, l = array.length; i < l; i++) {
      process(array[i], function (err) {
        if (err) {
          errs.push(err);
        }

        count++;

        if (count === l) {
          onComplete && onComplete(errs);
        }
      });
    }
  },
  parseParameters: function parseParameters(options, onProgress, onComplete) {
    if (onComplete === undefined) {
      var isCallback = typeof options === 'function';

      if (onProgress) {
        onComplete = onProgress;

        if (!isCallback) {
          onProgress = null;
        }
      } else if (onProgress === undefined && isCallback) {
        onComplete = options;
        options = null;
        onProgress = null;
      }

      if (onProgress !== undefined && isCallback) {
        onProgress = options;
        options = null;
      }
    }

    options = options || Object.create(null);
    return {
      options: options,
      onProgress: onProgress,
      onComplete: onComplete
    };
  },
  parseLoadResArgs: function parseLoadResArgs(type, onProgress, onComplete) {
    if (onComplete === undefined) {
      var isValidType = cc.js.isChildClassOf(type, cc.Asset);

      if (onProgress) {
        onComplete = onProgress;

        if (isValidType) {
          onProgress = null;
        }
      } else if (onProgress === undefined && !isValidType) {
        onComplete = type;
        onProgress = null;
        type = null;
      }

      if (onProgress !== undefined && !isValidType) {
        onProgress = type;
        type = null;
      }
    }

    return {
      type: type,
      onProgress: onProgress,
      onComplete: onComplete
    };
  },
  checkCircleReference: function checkCircleReference(owner, uuid, map, checked) {
    if (!checked) {
      checked = Object.create(null);
    }

    var item = map[uuid];

    if (!item || checked[uuid]) {
      return false;
    }

    checked[uuid] = true;
    var result = false;
    var deps = dependUtil.getDeps(uuid);

    if (deps) {
      for (var i = 0, l = deps.length; i < l; i++) {
        var dep = deps[i];

        if (dep === owner || utils.checkCircleReference(owner, dep, map, checked)) {
          result = true;
          break;
        }
      }
    }

    return result;
  },
  asyncify: function asyncify(cb) {
    return function (p1, p2) {
      cb && callInNextTick(cb, p1, p2);
    };
  }
};
module.exports = utils;
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_engine__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,