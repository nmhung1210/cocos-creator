
                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'engine-dev/cocos2d/core/3d/particle/renderer/particle-batch-model.js';
                    var __require = nodeEnv ? function (request) {
                        return require(request);
                    } : function (request) {
                        return __quick_compile_engine__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_engine__.registerModule(__filename, module);}"use strict";

exports.__esModule = true;
exports["default"] = void 0;

var _gfx = _interopRequireDefault(require("../../../../renderer/gfx"));

var _inputAssembler = _interopRequireDefault(require("../../../../renderer/core/input-assembler"));

var _meshData = require("../../../mesh/mesh-data");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

// Copyright (c) 2017-2018 Xiamen Yaji Software Co., Ltd.
var renderer = require('../../../renderer');

var ParticleBatchModel = /*#__PURE__*/function () {
  function ParticleBatchModel() {
    this._capacity = 0;
    this._vertFormat = null;
    this._vertAttrsFloatCount = 0;
    this._mesh = null;
    this._vertCount = 0;
    this._indexCount = 0;
    this._material = null;
    this._capacity = 0;
    this._vertFormat = null;
    this._vertAttrsFloatCount = 0;
    this._mesh = null;
    this._subDatas = [];
    this._subMeshes = [];
  }

  var _proto = ParticleBatchModel.prototype;

  _proto.setCapacity = function setCapacity(capacity) {
    var capChanged = this._capacity !== capacity;
    this._capacity = capacity;

    if (this._inited && capChanged) {
      this._recreateBuffer();
    }
  };

  _proto.setVertexAttributes = function setVertexAttributes(mesh, vfmt) {
    if (this._mesh === mesh && this._vertFormat === vfmt) {
      return;
    }

    this._mesh = mesh;
    this._vertFormat = vfmt;
    this._vertAttrsFloatCount = this._vertFormat._bytes / 4; // number of float
    // rebuid

    this._createParticleData();

    this._inited = true;
  };

  _proto._recreateBuffer = function _recreateBuffer() {
    this._createParticleData();
  };

  _proto._createParticleData = function _createParticleData() {
    this.destroyIAData();
    this._vertCount = 4;
    this._indexCount = 6;
    var vbData = null;
    var ibData = null;
    var vertSize = this._vertFormat._bytes;

    if (this._mesh) {
      var subData = this._mesh._subDatas[0];
      this._vertCount = subData.vData.byteLength / subData.vfm._bytes;
      this._indexCount = subData.iData.byteLength / 2;
      vbData = new Float32Array(vertSize * this._capacity * this._vertCount / 4);
      ibData = new Uint16Array(this._capacity * this._indexCount);

      var posEle = this._vertFormat.element(_gfx["default"].ATTR_TEX_COORD3);

      var normalEle = this._vertFormat.element(_gfx["default"].ATTR_NORMAL);

      var uvEle = this._vertFormat.element(_gfx["default"].ATTR_TEX_COORD);

      var colorEle = this._vertFormat.element(_gfx["default"].ATTR_COLOR1);

      this._mesh.copyAttribute(0, _gfx["default"].ATTR_POSITION, vbData.buffer, vertSize, posEle.offset);

      this._mesh.copyAttribute(0, _gfx["default"].ATTR_NORMAL, vbData.buffer, vertSize, normalEle.offset);

      this._mesh.copyAttribute(0, _gfx["default"].ATTR_UV0, vbData.buffer, vertSize, uvEle.offset);

      if (!this._mesh.copyAttribute(0, _gfx["default"].ATTR_COLOR, vbData.buffer, vertSize, colorEle.offset)) {
        // copy mesh color to ATTR_COLOR1
        var vb = new Uint32Array(vbData.buffer);

        for (var i = 0; i < this._vertCount; ++i) {
          vb[i * this._vertAttrsFloatCount + colorEle.offset / 4] = cc.Color.WHITE._val;
        }
      }

      var vbFloatArray = new Float32Array(vbData.buffer);

      for (var i = 1; i < this._capacity; i++) {
        vbFloatArray.copyWithin(i * vertSize * this._vertCount / 4, 0, vertSize * this._vertCount / 4);
      }

      this._mesh.copyIndices(0, ibData); // indices


      for (var i = 1; i < this._capacity; i++) {
        for (var j = 0; j < this._indexCount; j++) {
          ibData[i * this._indexCount + j] = ibData[j] + i * this._vertCount;
        }
      }
    } else {
      vbData = new Float32Array(vertSize * this._capacity * this._vertCount / 4);
      ibData = new Uint16Array(this._capacity * this._indexCount);
      var dst = 0;

      for (var i = 0; i < this._capacity; ++i) {
        var baseIdx = 4 * i;
        ibData[dst++] = baseIdx;
        ibData[dst++] = baseIdx + 1;
        ibData[dst++] = baseIdx + 2;
        ibData[dst++] = baseIdx + 3;
        ibData[dst++] = baseIdx + 2;
        ibData[dst++] = baseIdx + 1;
      }
    }

    var meshData = new _meshData.MeshData();
    meshData.vData = vbData;
    meshData.iData = ibData;
    meshData.vfm = this._vertFormat;
    meshData.vDirty = true;
    meshData.iDirty = true;
    meshData.enable = true;
    this._subDatas[0] = meshData;

    if (CC_JSB && CC_NATIVERENDERER) {
      meshData.vDirty = true;
    } else {
      var _vb = new _gfx["default"].VertexBuffer(renderer.device, this._vertFormat, _gfx["default"].USAGE_DYNAMIC, vbData);

      var ib = new _gfx["default"].IndexBuffer(renderer.device, _gfx["default"].INDEX_FMT_UINT16, _gfx["default"].USAGE_STATIC, ibData, ibData.length);
      this._subMeshes[0] = new _inputAssembler["default"](_vb, ib);
    }
  };

  _proto.createTrailData = function createTrailData(vfmt, num) {
    if (this._subDatas[1]) {
      return;
    }

    var vertSize = vfmt._bytes;
    var vBuffer = new ArrayBuffer(vertSize * (num + 1) * 2);
    var ibData = new Uint16Array(num * 6);
    var meshData = new _meshData.MeshData();
    meshData.vData = new Float32Array(vBuffer);
    meshData.iData = ibData;
    meshData.vfm = vfmt;
    meshData.vDirty = true;
    meshData.iDirty = true;
    meshData.enable = true;
    this._subDatas[1] = meshData;

    if (CC_JSB && CC_NATIVERENDERER) {
      meshData.vDirty = true;
    } else {
      var vb = new _gfx["default"].VertexBuffer(renderer.device, vfmt, _gfx["default"].USAGE_DYNAMIC, vBuffer);
      var ib = new _gfx["default"].IndexBuffer(renderer.device, _gfx["default"].INDEX_FMT_UINT16, _gfx["default"].USAGE_DYNAMIC, ibData, num * 6);
      this._subMeshes[1] = new _inputAssembler["default"](vb, ib);
    }
  };

  _proto.setModelMaterial = function setModelMaterial(mat) {
    this._material = mat;
  };

  _proto.addParticleVertexData = function addParticleVertexData(index, pvdata) {
    var subData = this._subDatas[0];
    var vData = subData.getVData();
    var uintVData = subData.getVData(Uint32Array);

    if (!this._mesh) {
      var offset = index * this._vertAttrsFloatCount;
      vData[offset++] = pvdata[0].x; // position

      vData[offset++] = pvdata[0].y;
      vData[offset++] = pvdata[0].z;
      vData[offset++] = pvdata[1].x; // uv

      vData[offset++] = pvdata[1].y;
      vData[offset++] = pvdata[1].z; // frame idx

      vData[offset++] = pvdata[2].x; // size

      vData[offset++] = pvdata[2].y;
      vData[offset++] = pvdata[2].z;
      vData[offset++] = pvdata[3].x; // rotation

      vData[offset++] = pvdata[3].y;
      vData[offset++] = pvdata[3].z;
      uintVData[offset++] = pvdata[4]; // color

      if (pvdata[5]) {
        vData[offset++] = pvdata[5].x; // velocity

        vData[offset++] = pvdata[5].y;
        vData[offset++] = pvdata[5].z;
      }
    } else {
      for (var i = 0; i < this._vertCount; i++) {
        var _offset = (index * this._vertCount + i) * this._vertAttrsFloatCount;

        vData[_offset++] = pvdata[0].x; // position

        vData[_offset++] = pvdata[0].y;
        vData[_offset++] = pvdata[0].z;
        _offset += 2;
        vData[_offset++] = pvdata[1].z; // frame idx

        vData[_offset++] = pvdata[2].x; // size

        vData[_offset++] = pvdata[2].y;
        vData[_offset++] = pvdata[2].z;
        vData[_offset++] = pvdata[3].x; // rotation

        vData[_offset++] = pvdata[3].y;
        vData[_offset++] = pvdata[3].z;
        uintVData[_offset++] = pvdata[4]; // color
      }
    }
  };

  _proto._uploadData = function _uploadData() {
    var subDatas = this._subDatas;
    var subMeshes = this._subMeshes;

    for (var i = 0, len = subDatas.length; i < len; i++) {
      var subData = subDatas[i];
      var subMesh = subMeshes[i];

      if (subData.vDirty) {
        var vBuffer = subMesh._vertexBuffer,
            vData = subData.vData;
        vBuffer.update(0, vData);
        subData.vDirty = false;
      }

      if (subData.iDirty) {
        var iBuffer = subMesh._indexBuffer,
            iData = subData.iData;
        iBuffer.update(0, iData);
        subData.iDirty = false;
      }
    }
  };

  _proto.updateIA = function updateIA(index, count, vDirty, iDirty) {
    if (CC_JSB && CC_NATIVERENDERER) return;
    this._subMeshes[index]._count = count;
    var subData = this._subDatas[index];
    subData.vDirty = vDirty;
    subData.iDirty = iDirty;
  };

  _proto.clear = function clear() {
    var subMesh = this._subMeshes[0];

    if (subMesh) {
      subMesh.indexCount = 0;
    }
  };

  _proto.destroy = function destroy() {
    this._subDatas.length = 0;
    var subMeshes = this._subMeshes;

    for (var i = 0, len = subMeshes.length; i < len; i++) {
      var vb = subMeshes[i]._vertexBuffer;

      if (vb) {
        vb.destroy();
      }

      var ib = subMeshes[i]._indexBuffer;

      if (ib) {
        ib.destroy();
      }
    }

    subMeshes.length = 0;
  };

  _proto.destroyIAData = function destroyIAData() {
    if (this._subMeshes[0]) {
      this._subMeshes[0]._vertexBuffer.destroy();

      this._subMeshes[0]._indexBuffer.destroy();

      this._subMeshes[0] = null;
    }

    this._subDatas[0] = null;
  };

  return ParticleBatchModel;
}();

exports["default"] = ParticleBatchModel;
module.exports = exports["default"];
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_engine__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,