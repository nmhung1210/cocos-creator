
                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'engine-dev/cocos2d/renderer/core/base-renderer.js';
                    var __require = nodeEnv ? function (request) {
                        return require(request);
                    } : function (request) {
                        return __quick_compile_engine__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_engine__.registerModule(__filename, module);}"use strict";

exports.__esModule = true;
exports["default"] = void 0;

var _memop = require("../memop");

var _enums = _interopRequireDefault(require("../enums"));

var _valueTypes = require("../../core/value-types");

var _programLib = _interopRequireDefault(require("./program-lib"));

var _view = _interopRequireDefault(require("./view"));

var _gfx = _interopRequireDefault(require("../gfx"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

// Copyright (c) 2017-2018 Xiamen Yaji Software Co., Ltd. 
var _m4_tmp = new _valueTypes.Mat4();

var _stageInfos = new _memop.RecyclePool(function () {
  return {
    stage: null,
    items: null
  };
}, 8);

var _float2_pool = new _memop.RecyclePool(function () {
  return new Float32Array(2);
}, 8);

var _float3_pool = new _memop.RecyclePool(function () {
  return new Float32Array(3);
}, 8);

var _float4_pool = new _memop.RecyclePool(function () {
  return new Float32Array(4);
}, 8);

var _float9_pool = new _memop.RecyclePool(function () {
  return new Float32Array(9);
}, 8);

var _float16_pool = new _memop.RecyclePool(function () {
  return new Float32Array(16);
}, 8);

var _float64_pool = new _memop.RecyclePool(function () {
  return new Float32Array(64);
}, 8);

var _int2_pool = new _memop.RecyclePool(function () {
  return new Int32Array(2);
}, 8);

var _int3_pool = new _memop.RecyclePool(function () {
  return new Int32Array(3);
}, 8);

var _int4_pool = new _memop.RecyclePool(function () {
  return new Int32Array(4);
}, 8);

var _int64_pool = new _memop.RecyclePool(function () {
  return new Int32Array(64);
}, 8);

var Base = /*#__PURE__*/function () {
  /**
   * @param {gfx.Device} device
   * @param {Object} opts
   * @param {gfx.Texture2D} opts.defaultTexture
   * @param {gfx.TextureCube} opts.defaultTextureCube
   */
  function Base(device, opts) {
    var _this$_type2defaultVa;

    this._device = device;
    this._programLib = new _programLib["default"](device);
    this._opts = opts;
    this._type2defaultValue = (_this$_type2defaultVa = {}, _this$_type2defaultVa[_enums["default"].PARAM_INT] = 0, _this$_type2defaultVa[_enums["default"].PARAM_INT2] = new _valueTypes.Vec2(0, 0), _this$_type2defaultVa[_enums["default"].PARAM_INT3] = new _valueTypes.Vec3(0, 0, 0), _this$_type2defaultVa[_enums["default"].PARAM_INT4] = new _valueTypes.Vec4(0, 0, 0, 0), _this$_type2defaultVa[_enums["default"].PARAM_FLOAT] = 0.0, _this$_type2defaultVa[_enums["default"].PARAM_FLOAT2] = new _valueTypes.Vec2(0, 0), _this$_type2defaultVa[_enums["default"].PARAM_FLOAT3] = new _valueTypes.Vec3(0, 0, 0), _this$_type2defaultVa[_enums["default"].PARAM_FLOAT4] = new _valueTypes.Vec4(0, 0, 0, 0), _this$_type2defaultVa[_enums["default"].PARAM_COLOR4] = new _valueTypes.Color(0, 0, 0, 1), _this$_type2defaultVa[_enums["default"].PARAM_MAT3] = new _valueTypes.Mat3(), _this$_type2defaultVa[_enums["default"].PARAM_MAT4] = new _valueTypes.Mat4(), _this$_type2defaultVa[_enums["default"].PARAM_TEXTURE_2D] = opts.defaultTexture, _this$_type2defaultVa[_enums["default"].PARAM_TEXTURE_CUBE] = opts.defaultTextureCube, _this$_type2defaultVa);
    this._stage2fn = {};
    this._usedTextureUnits = 0;
    this._viewPools = new _memop.RecyclePool(function () {
      return new _view["default"]();
    }, 8);
    this._drawItemsPools = new _memop.RecyclePool(function () {
      return {
        model: null,
        node: null,
        ia: null,
        effect: null,
        defines: null,
        uniforms: null
      };
    }, 100);
    this._stageItemsPools = new _memop.RecyclePool(function () {
      return new _memop.RecyclePool(function () {
        return {
          model: null,
          node: null,
          ia: null,
          effect: null,
          defines: null,
          passes: [],
          sortKey: -1,
          uniforms: null
        };
      }, 100);
    }, 16);
  }

  var _proto = Base.prototype;

  _proto._resetTextuerUnit = function _resetTextuerUnit() {
    this._usedTextureUnits = 0;
  };

  _proto._allocTextureUnit = function _allocTextureUnit() {
    var device = this._device;
    var unit = this._usedTextureUnits;

    if (unit >= device._caps.maxTextureUnits) {
      console.warn("Trying to use " + unit + " texture units while this GPU supports only " + device._caps.maxTextureUnits);
    }

    this._usedTextureUnits += 1;
    return unit;
  };

  _proto._registerStage = function _registerStage(name, fn) {
    this._stage2fn[name] = fn;
  };

  _proto.clear = function clear() {
    this._programLib.clear();

    this.reset();
  };

  _proto.reset = function reset() {
    this._viewPools.reset();

    this._stageItemsPools.reset();
  };

  _proto._requestView = function _requestView() {
    return this._viewPools.add();
  };

  _proto._render = function _render(view, scene) {
    var device = this._device; // setup framebuffer

    device.setFrameBuffer(view._framebuffer); // setup viewport

    device.setViewport(view._rect.x, view._rect.y, view._rect.w, view._rect.h); // setup clear

    var clearOpts = {};

    if (view._clearFlags & _enums["default"].CLEAR_COLOR) {
      clearOpts.color = _valueTypes.Vec4.toArray([], view._color);
    }

    if (view._clearFlags & _enums["default"].CLEAR_DEPTH) {
      clearOpts.depth = view._depth;
    }

    if (view._clearFlags & _enums["default"].CLEAR_STENCIL) {
      clearOpts.stencil = view._stencil;
    }

    device.clear(clearOpts); // get all draw items

    this._drawItemsPools.reset();

    for (var i = 0; i < scene._models.length; ++i) {
      var model = scene._models.data[i]; // filter model by view

      if ((model._cullingMask & view._cullingMask) === 0) {
        continue;
      }

      var drawItem = this._drawItemsPools.add();

      model.extractDrawItem(drawItem);
    } // dispatch draw items to different stage


    _stageInfos.reset();

    for (var _i = 0; _i < view._stages.length; ++_i) {
      var stage = view._stages[_i];

      var stageItems = this._stageItemsPools.add();

      stageItems.reset();

      for (var j = 0; j < this._drawItemsPools.length; ++j) {
        var _drawItem = this._drawItemsPools.data[j];
        var passes = _drawItem.effect.stagePasses[stage];
        if (!passes || passes.length === 0) continue;
        var stageItem = stageItems.add();
        stageItem.passes = passes;
        stageItem.model = _drawItem.model;
        stageItem.node = _drawItem.node;
        stageItem.ia = _drawItem.ia;
        stageItem.effect = _drawItem.effect;
        stageItem.defines = _drawItem.defines;
        stageItem.sortKey = -1;
        stageItem.uniforms = _drawItem.uniforms;
      }

      var stageInfo = _stageInfos.add();

      stageInfo.stage = stage;
      stageInfo.items = stageItems;
    } // render stages


    for (var _i2 = 0; _i2 < _stageInfos.length; ++_i2) {
      var info = _stageInfos.data[_i2];
      var fn = this._stage2fn[info.stage];
      fn(view, info.items);
    }
  };

  _proto._setProperty = function _setProperty(prop) {
    var device = this._device;
    var param = prop.value;

    if (param === undefined) {
      param = prop.val;
    }

    if (param === undefined) {
      param = this._type2defaultValue[prop.type];
    }

    if (param === undefined) {
      console.warn("Failed to set technique property " + prop.name + ", value not found.");
      return;
    }

    if (prop.type === _enums["default"].PARAM_TEXTURE_2D || prop.type === _enums["default"].PARAM_TEXTURE_CUBE) {
      if (Array.isArray(param)) {
        if (param.length > prop.count) {
          console.error("Failed to set property [" + prop.name + "] : The length of texture array [" + param.length + "] is bigger than [" + prop.count + "].");
          return;
        }

        var slots = _int64_pool.add();

        for (var index = 0; index < param.length; ++index) {
          slots[index] = this._allocTextureUnit();
        }

        device.setTextureArray(prop.name, param, slots);
      } else {
        device.setTexture(prop.name, param, this._allocTextureUnit());
      }
    } else {
      if (prop.directly) {
        device.setUniformDirectly(prop.name, param);
      } else {
        device.setUniform(prop.name, param);
      }
    }
  };

  _proto._draw = function _draw(item) {
    var device = this._device;
    var programLib = this._programLib;
    var node = item.node,
        ia = item.ia,
        passes = item.passes,
        effect = item.effect; // reset the pool
    // NOTE: we can use drawCounter optimize this
    // TODO: should be configurable

    _float2_pool.reset();

    _float3_pool.reset();

    _float4_pool.reset();

    _float9_pool.reset();

    _float16_pool.reset();

    _float64_pool.reset();

    _int2_pool.reset();

    _int3_pool.reset();

    _int4_pool.reset();

    _int64_pool.reset(); // set common uniforms
    // TODO: try commit this depends on effect
    // {


    node.getWorldMatrix(_m4_tmp);
    device.setUniform('cc_matWorld', _valueTypes.Mat4.toArray(_float16_pool.add(), _m4_tmp)); // let wq = node.getWorldRotation(cc.quat());

    _valueTypes.Mat4.invert(_m4_tmp, _m4_tmp);

    _valueTypes.Mat4.transpose(_m4_tmp, _m4_tmp);

    device.setUniform('cc_matWorldIT', _valueTypes.Mat4.toArray(_float16_pool.add(), _m4_tmp)); // }

    var defines = this._defines; // for each pass

    for (var i = 0; i < passes.length; ++i) {
      var pass = passes[i];
      var count = ia.count; // set vertex buffer

      if (ia._vertexBuffer) {
        device.setVertexBuffer(0, ia._vertexBuffer);
      } // set index buffer


      if (ia._indexBuffer) {
        device.setIndexBuffer(ia._indexBuffer);
      } // set primitive type


      device.setPrimitiveType(ia._primitiveType); // set program

      Object.setPrototypeOf(defines, pass._defines);
      var program = programLib.getProgram(pass._programName, defines, effect.name);
      device.setProgram(program);
      var uniforms = program._uniforms;
      var variants = pass._properties;

      for (var j = 0; j < uniforms.length; j++) {
        var prop = variants[uniforms[j].name];
        if (prop !== undefined) this._setProperty(prop);
      } // cull mode


      device.setCullMode(pass._cullMode); // blend

      if (pass._blend) {
        device.enableBlend();
        device.setBlendFuncSep(pass._blendSrc, pass._blendDst, pass._blendSrcAlpha, pass._blendDstAlpha);
        device.setBlendEqSep(pass._blendEq, pass._blendAlphaEq);
        device.setBlendColor32(pass._blendColor);
      } // depth test & write


      if (pass._depthTest) {
        device.enableDepthTest();
        device.setDepthFunc(pass._depthFunc);
      }

      if (pass._depthWrite) {
        device.enableDepthWrite();
      } // stencil


      device.setStencilTest(pass._stencilTest);

      if (pass._stencilTest === _gfx["default"].STENCIL_ENABLE) {
        // front
        device.setStencilFuncFront(pass._stencilFuncFront, pass._stencilRefFront, pass._stencilMaskFront);
        device.setStencilOpFront(pass._stencilFailOpFront, pass._stencilZFailOpFront, pass._stencilZPassOpFront, pass._stencilWriteMaskFront); // back

        device.setStencilFuncBack(pass._stencilFuncBack, pass._stencilRefBack, pass._stencilMaskBack);
        device.setStencilOpBack(pass._stencilFailOpBack, pass._stencilZFailOpBack, pass._stencilZPassOpBack, pass._stencilWriteMaskBack);
      } // draw pass


      device.draw(ia._start, count);

      this._resetTextuerUnit();
    }
  };

  return Base;
}();

exports["default"] = Base;
module.exports = exports["default"];
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_engine__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,