
                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'engine-dev/cocos2d/tilemap/tmx-layer-assembler.js';
                    var __require = nodeEnv ? function (request) {
                        return require(request);
                    } : function (request) {
                        return __quick_compile_engine__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_engine__.registerModule(__filename, module);}"use strict";

exports.__esModule = true;
exports["default"] = void 0;

var _assembler = _interopRequireDefault(require("../core/renderer/assembler"));

var _valueTypes = require("../core/value-types");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }

var TiledLayer = require('./CCTiledLayer');

var TiledMap = require('./CCTiledMap');

var TileFlag = TiledMap.TileFlag;
var FLIPPED_MASK = TileFlag.FLIPPED_MASK;

var renderer = require('../core/renderer/');

var vfmtPosUvColor = require('../core/renderer/webgl/vertex-format').vfmtPosUvColor;

var MaxGridsLimit = parseInt(65535 / 6);
var RenderOrder = TiledMap.RenderOrder;

var RenderFlow = require('../core/renderer/render-flow');

var _mat4_temp = cc.mat4();

var _vec3_temp = cc.v3();

var _leftDown = {
  row: 0,
  col: 0
};
var _uva = {
  x: 0,
  y: 0
};
var _uvb = {
  x: 0,
  y: 0
};
var _uvc = {
  x: 0,
  y: 0
};
var _uvd = {
  x: 0,
  y: 0
};
var _renderData = null,
    _ia = null,
    _fillGrids = 0,
    _vfOffset = 0,
    _moveX = 0,
    _moveY = 0,
    _layerMat = null,
    _renderer = null,
    _renderDataList = null,
    _buffer = null,
    _curMaterial = null,
    _comp = null,
    _vbuf = null,
    _uintbuf = null;

function _visitUserNode(userNode) {
  if (CC_NATIVERENDERER) return;

  userNode._updateLocalMatrix();

  _valueTypes.Mat4.mul(userNode._worldMatrix, _layerMat, userNode._matrix);

  userNode._renderFlag &= ~(RenderFlow.FLAG_TRANSFORM | RenderFlow.FLAG_BREAK_FLOW);
  RenderFlow.visitRootNode(userNode);
  userNode._renderFlag |= RenderFlow.FLAG_BREAK_FLOW;
}

function _flush() {
  if (_ia._count === 0) {
    return;
  }

  _renderer.material = _renderData.material;
  _renderer.node = _comp.node;

  _renderer._flushIA(_renderData.ia);

  var needSwitchBuffer = _fillGrids >= MaxGridsLimit;

  if (needSwitchBuffer) {
    _buffer.uploadData();

    _buffer.switchBuffer();

    _vbuf = _buffer._vData;
    _uintbuf = _buffer._uintVData;
    _renderData = _renderDataList.popRenderData(_buffer);
    _ia = _renderData.ia;
    _vfOffset = 0;
    _fillGrids = 0;
  } else {
    _renderData = _renderDataList.popRenderData(_buffer);
    _ia = _renderData.ia;
  }

  _renderData.material = _curMaterial;
}

function _renderNodes(nodeRow, nodeCol) {
  var nodesInfo = _comp._getNodesByRowCol(nodeRow, nodeCol);

  if (!nodesInfo || nodesInfo.count == 0) return;
  var nodesList = nodesInfo.list;
  var newIdx = 0,
      oldIdx = 0; // flush map render data

  _flush();

  _renderer.worldMatDirty++; // begin to render nodes

  for (; newIdx < nodesInfo.count;) {
    var dataComp = nodesList[oldIdx];
    oldIdx++;
    if (!dataComp) continue;

    _visitUserNode(dataComp.node);

    if (newIdx !== oldIdx) {
      nodesList[newIdx] = dataComp;
      dataComp._index = newIdx;
    }

    newIdx++;
  }

  nodesList.length = newIdx;
  _renderer.worldMatDirty--;

  _renderDataList.pushNodesList(_renderData, nodesList); // flush user nodes render data


  _renderer._flush();

  _renderer.node = _comp.node;
}
/*
texture coordinate
a b 
c d
*/


function _flipTexture(inGrid, gid) {
  _uva.x = inGrid.l;
  _uva.y = inGrid.t;
  _uvb.x = inGrid.r;
  _uvb.y = inGrid.t;
  _uvc.x = inGrid.l;
  _uvc.y = inGrid.b;
  _uvd.x = inGrid.r;
  _uvd.y = inGrid.b;
  var tempVal = null; // vice

  if ((gid & TileFlag.DIAGONAL) >>> 0) {
    tempVal = _uvb;
    _uvb = _uvc;
    _uvc = tempVal;
  } // flip x


  if ((gid & TileFlag.HORIZONTAL) >>> 0) {
    tempVal = _uva;
    _uva = _uvb;
    _uvb = tempVal;
    tempVal = _uvc;
    _uvc = _uvd;
    _uvd = tempVal;
  } // flip y


  if ((gid & TileFlag.VERTICAL) >>> 0) {
    tempVal = _uva;
    _uva = _uvc;
    _uvc = tempVal;
    tempVal = _uvb;
    _uvb = _uvd;
    _uvd = tempVal;
  }
}

;

var TmxAssembler = /*#__PURE__*/function (_Assembler) {
  _inheritsLoose(TmxAssembler, _Assembler);

  function TmxAssembler() {
    return _Assembler.apply(this, arguments) || this;
  }

  var _proto = TmxAssembler.prototype;

  _proto.updateRenderData = function updateRenderData(comp) {
    if (!comp._renderDataList) {
      comp._buffer = new cc.TiledMapBuffer(renderer._handle, vfmtPosUvColor);
      comp._renderDataList = new cc.TiledMapRenderDataList();
    }
  };

  _proto.fillBuffers = function fillBuffers(comp, renderer) {
    var vertices = comp._vertices;
    if (vertices.length === 0) return;

    comp._updateCulling();

    var layerNode = comp.node;
    _moveX = comp._leftDownToCenterX;
    _moveY = comp._leftDownToCenterY;
    _layerMat = layerNode._worldMatrix;
    _renderer = renderer;
    _comp = comp;
    _renderDataList = comp._renderDataList;
    _buffer = comp._buffer;

    if (comp._isCullingDirty() || comp._isUserNodeDirty() || comp._hasAnimation() || comp._hasTiledNode()) {
      _buffer.reset();

      var leftDown, rightTop;

      if (comp._enableCulling) {
        var cullingRect = comp._cullingRect;
        leftDown = cullingRect.leftDown;
        rightTop = cullingRect.rightTop;
      } else {
        leftDown = _leftDown;
        rightTop = comp._rightTop;
      }

      var maxRows = rightTop.row - leftDown.row + 1;
      var maxCols = rightTop.col - leftDown.col + 1;
      var maxGrids = maxRows * maxCols;

      if (maxGrids > MaxGridsLimit) {
        maxGrids = MaxGridsLimit;
      }

      _buffer.request(maxGrids * 4, maxGrids * 6);

      switch (comp._renderOrder) {
        // left top to right down, col add, row sub, 
        case RenderOrder.RightDown:
          this.traverseGrids(leftDown, rightTop, -1, 1);
          break;
        // right top to left down, col sub, row sub

        case RenderOrder.LeftDown:
          this.traverseGrids(leftDown, rightTop, -1, -1);
          break;
        // left down to right up, col add, row add

        case RenderOrder.RightUp:
          this.traverseGrids(leftDown, rightTop, 1, 1);
          break;
        // right down to left up, col sub, row add

        case RenderOrder.LeftUp:
          this.traverseGrids(leftDown, rightTop, 1, -1);
          break;
      }

      comp._setCullingDirty(false);

      comp._setUserNodeDirty(false);
    } else if (!CC_NATIVERENDERER) {
      var renderData = null;
      var nodesRenderList = null;
      var nodesList = null;

      for (var i = 0; i < _renderDataList._offset; i++) {
        renderData = _renderDataList._dataList[i];
        nodesRenderList = renderData.nodesRenderList;

        if (nodesRenderList.length > 0) {
          renderer.worldMatDirty++;

          for (var j = 0; j < nodesRenderList.length; j++) {
            nodesList = nodesRenderList[j];
            if (!nodesList) continue;

            for (var idx = 0; idx < nodesList.length; idx++) {
              var dataComp = nodesList[idx];
              if (!dataComp) continue;

              _visitUserNode(dataComp.node);
            }
          }

          renderer.worldMatDirty--;

          renderer._flush();
        }

        if (renderData.ia._count > 0) {
          renderer.material = renderData.material;
          renderer.node = layerNode;

          renderer._flushIA(renderData.ia);
        }
      }
    }

    _renderData = null;
    _ia = null;
    _layerMat = null;
    _renderer = null;
    _renderDataList = null;
    _buffer = null;
    _curMaterial = null;
    _comp = null;
    _vbuf = null;
    _uintbuf = null;
  } // rowMoveDir is -1 or 1, -1 means decrease, 1 means increase
  // colMoveDir is -1 or 1, -1 means decrease, 1 means increase
  ;

  _proto.traverseGrids = function traverseGrids(leftDown, rightTop, rowMoveDir, colMoveDir) {
    _renderDataList.reset(); // show nothing


    if (rightTop.row < 0 || rightTop.col < 0) return;
    _renderData = _renderDataList.popRenderData(_buffer);
    _ia = _renderData.ia;
    _vbuf = _buffer._vData;
    _uintbuf = _buffer._uintVData;
    _fillGrids = 0;
    _vfOffset = 0;
    _curMaterial = null;
    var layerNode = _comp.node;
    var color = layerNode._color._val;
    var tiledTiles = _comp._tiledTiles;
    var texGrids = _comp._texGrids;
    var tiles = _comp._tiles;
    var texIdToMatIdx = _comp._texIdToMatIndex;
    var mats = _comp._materials;
    var vertices = _comp._vertices;
    var rowData,
        col,
        cols,
        row,
        rows,
        colData,
        tileSize,
        grid = null,
        gid = 0;
    var left = 0,
        bottom = 0,
        right = 0,
        top = 0; // x, y

    var tiledNode = null,
        curTexIdx = -1,
        matIdx;
    var colNodesCount = 0,
        checkColRange = true;

    if (rowMoveDir == -1) {
      row = rightTop.row;
      rows = leftDown.row;
    } else {
      row = leftDown.row;
      rows = rightTop.row;
    } // traverse row


    for (; (rows - row) * rowMoveDir >= 0; row += rowMoveDir) {
      rowData = vertices[row];
      colNodesCount = _comp._getNodesCountByRow(row);
      checkColRange = colNodesCount == 0 && rowData != undefined; // limit min col and max col

      if (colMoveDir == 1) {
        col = checkColRange && leftDown.col < rowData.minCol ? rowData.minCol : leftDown.col;
        cols = checkColRange && rightTop.col > rowData.maxCol ? rowData.maxCol : rightTop.col;
      } else {
        col = checkColRange && rightTop.col > rowData.maxCol ? rowData.maxCol : rightTop.col;
        cols = checkColRange && leftDown.col < rowData.minCol ? rowData.minCol : leftDown.col;
      } // traverse col


      for (; (cols - col) * colMoveDir >= 0; col += colMoveDir) {
        colData = rowData && rowData[col];

        if (!colData) {
          // only render users nodes because map data is empty
          if (colNodesCount > 0) _renderNodes(row, col);
          continue;
        }

        gid = tiles[colData.index];
        grid = texGrids[(gid & FLIPPED_MASK) >>> 0];
        if (!grid) continue; // check init or new material

        if (curTexIdx !== grid.texId) {
          // need flush
          if (curTexIdx !== -1) {
            _flush();
          } // update material


          curTexIdx = grid.texId;
          matIdx = texIdToMatIdx[curTexIdx];
          _curMaterial = mats[matIdx];
          _renderData.material = _curMaterial;
        }

        if (!_curMaterial) continue; // calc rect vertex

        left = colData.left - _moveX;
        bottom = colData.bottom - _moveY;
        tileSize = grid.tileset._tileSize;
        right = left + tileSize.width;
        top = bottom + tileSize.height; // begin to fill vertex buffer

        tiledNode = tiledTiles[colData.index];

        if (!tiledNode) {
          // tl
          _vbuf[_vfOffset] = left;
          _vbuf[_vfOffset + 1] = top;
          _uintbuf[_vfOffset + 4] = color; // bl

          _vbuf[_vfOffset + 5] = left;
          _vbuf[_vfOffset + 6] = bottom;
          _uintbuf[_vfOffset + 9] = color; // tr

          _vbuf[_vfOffset + 10] = right;
          _vbuf[_vfOffset + 11] = top;
          _uintbuf[_vfOffset + 14] = color; // br

          _vbuf[_vfOffset + 15] = right;
          _vbuf[_vfOffset + 16] = bottom;
          _uintbuf[_vfOffset + 19] = color;
        } else {
          this.fillByTiledNode(tiledNode.node, _vbuf, _uintbuf, left, right, top, bottom);
        }

        _flipTexture(grid, gid); // tl -> a


        _vbuf[_vfOffset + 2] = _uva.x;
        _vbuf[_vfOffset + 3] = _uva.y; // bl -> c

        _vbuf[_vfOffset + 7] = _uvc.x;
        _vbuf[_vfOffset + 8] = _uvc.y; // tr -> b

        _vbuf[_vfOffset + 12] = _uvb.x;
        _vbuf[_vfOffset + 13] = _uvb.y; // br -> d

        _vbuf[_vfOffset + 17] = _uvd.x;
        _vbuf[_vfOffset + 18] = _uvd.y; // modify buffer all kinds of offset

        _vfOffset += 20;

        _buffer.adjust(4, 6);

        _ia._count += 6;
        _fillGrids++; // check render users node

        if (colNodesCount > 0) _renderNodes(row, col); // vertices count exceed 66635, buffer must be switched

        if (_fillGrids >= MaxGridsLimit) {
          _flush();
        }
      }
    } // upload buffer data


    _buffer.uploadData(); // last flush


    if (_ia._count > 0) {
      _renderer.material = _renderData.material;
      _renderer.node = _comp.node;

      _renderer._flushIA(_renderData.ia);
    }
  };

  _proto.fillByTiledNode = function fillByTiledNode(tiledNode, vbuf, uintbuf, left, right, top, bottom) {
    tiledNode._updateLocalMatrix();

    _valueTypes.Mat4.copy(_mat4_temp, tiledNode._matrix);

    _valueTypes.Vec3.set(_vec3_temp, -(left + _moveX), -(bottom + _moveY), 0);

    _valueTypes.Mat4.transform(_mat4_temp, _mat4_temp, _vec3_temp);

    var m = _mat4_temp.m;
    var a = m[0];
    var b = m[1];
    var c = m[4];
    var d = m[5];
    var tx = m[12];
    var ty = m[13];
    var color = tiledNode._color._val; // tl

    vbuf[_vfOffset] = left * a + top * c + tx;
    vbuf[_vfOffset + 1] = left * b + top * d + ty;
    uintbuf[_vfOffset + 4] = color; // bl

    vbuf[_vfOffset + 5] = left * a + bottom * c + tx;
    vbuf[_vfOffset + 6] = left * b + bottom * d + ty;
    uintbuf[_vfOffset + 9] = color; // tr

    vbuf[_vfOffset + 10] = right * a + top * c + tx;
    vbuf[_vfOffset + 11] = right * b + top * d + ty;
    uintbuf[_vfOffset + 14] = color; // br

    vbuf[_vfOffset + 15] = right * a + bottom * c + tx;
    vbuf[_vfOffset + 16] = right * b + bottom * d + ty;
    uintbuf[_vfOffset + 19] = color;
  };

  return TmxAssembler;
}(_assembler["default"]);

exports["default"] = TmxAssembler;

_assembler["default"].register(TiledLayer, TmxAssembler);

module.exports = exports["default"];
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_engine__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,